From 3ed70a9541cbfe83cbfdbf6dd6a8aa93b48af4a5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:14:00 +0200
Subject: [PATCH 001/414] Step 0.1: Create project

---
 .gitignore                  |  1 +
 .meteor/.finished-upgraders | 15 ++++++++++
 .meteor/.gitignore          |  1 +
 .meteor/.id                 |  7 +++++
 .meteor/packages            | 22 ++++++++++++++
 .meteor/platforms           |  2 ++
 .meteor/release             |  1 +
 .meteor/versions            | 72 +++++++++++++++++++++++++++++++++++++++++++++
 client/main.css             |  1 +
 client/main.html            | 25 ++++++++++++++++
 client/main.js              | 22 ++++++++++++++
 package.json                | 10 +++++++
 server/main.js              |  5 ++++
 13 files changed, 184 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 .meteor/.finished-upgraders
 create mode 100644 .meteor/.gitignore
 create mode 100644 .meteor/.id
 create mode 100644 .meteor/packages
 create mode 100644 .meteor/platforms
 create mode 100644 .meteor/release
 create mode 100644 .meteor/versions
 create mode 100644 client/main.css
 create mode 100644 client/main.html
 create mode 100644 client/main.js
 create mode 100644 package.json
 create mode 100644 server/main.js

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..40b878d
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+node_modules/
\ No newline at end of file
diff --git a/.meteor/.finished-upgraders b/.meteor/.finished-upgraders
new file mode 100644
index 0000000..aa60704
--- /dev/null
+++ b/.meteor/.finished-upgraders
@@ -0,0 +1,15 @@
+# This file contains information which helps Meteor properly upgrade your
+# app when you run 'meteor update'. You should check it into version control
+# with your project.
+
+notices-for-0.9.0
+notices-for-0.9.1
+0.9.4-platform-file
+notices-for-facebook-graph-api-2
+1.2.0-standard-minifiers-package
+1.2.0-meteor-platform-split
+1.2.0-cordova-changes
+1.2.0-breaking-changes
+1.3.0-split-minifiers-package
+1.4.0-remove-old-dev-bundle-link
+1.4.1-add-shell-server-package
diff --git a/.meteor/.gitignore b/.meteor/.gitignore
new file mode 100644
index 0000000..4083037
--- /dev/null
+++ b/.meteor/.gitignore
@@ -0,0 +1 @@
+local
diff --git a/.meteor/.id b/.meteor/.id
new file mode 100644
index 0000000..9576694
--- /dev/null
+++ b/.meteor/.id
@@ -0,0 +1,7 @@
+# This file contains a token that is unique to your project.
+# Check it into your repository along with the rest of this directory.
+# It can be used for purposes such as:
+#   - ensuring you don't accidentally deploy one app on top of another
+#   - providing package authors with aggregated statistics
+
+izkzocvxiv481sbjyh1
diff --git a/.meteor/packages b/.meteor/packages
new file mode 100644
index 0000000..801f3fc
--- /dev/null
+++ b/.meteor/packages
@@ -0,0 +1,22 @@
+# Meteor packages used by this project, one per line.
+# Check this file (and the other files in this directory) into your repository.
+#
+# 'meteor add' and 'meteor remove' will edit this file for you,
+# but you can also edit it by hand.
+
+meteor-base@1.0.4             # Packages every Meteor app needs to have
+mobile-experience@1.0.4       # Packages for a great mobile UX
+mongo@1.1.12_1                   # The database Meteor supports right now
+blaze-html-templates@1.0.4    # Compile .html files into Meteor Blaze views
+reactive-var@1.0.10            # Reactive variable for tracker
+jquery@1.11.9                  # Helpful client-side library
+tracker@1.1.0                 # Meteor's client-side reactive programming library
+
+standard-minifier-css@1.2.0_1   # CSS minifier run for production mode
+standard-minifier-js@1.2.0_1    # JS minifier run for production mode
+es5-shim@4.6.14_1                # ECMAScript 5 compatibility for older browsers.
+ecmascript@0.5.8_1              # Enable ECMAScript2015+ syntax in app code
+
+autopublish@1.0.7             # Publish all data to the clients (for prototyping)
+insecure@1.0.7                # Allow all DB writes from clients (for prototyping)
+shell-server
diff --git a/.meteor/platforms b/.meteor/platforms
new file mode 100644
index 0000000..efeba1b
--- /dev/null
+++ b/.meteor/platforms
@@ -0,0 +1,2 @@
+server
+browser
diff --git a/.meteor/release b/.meteor/release
new file mode 100644
index 0000000..2631a23
--- /dev/null
+++ b/.meteor/release
@@ -0,0 +1 @@
+METEOR@1.4.1.2
diff --git a/.meteor/versions b/.meteor/versions
new file mode 100644
index 0000000..8cc40eb
--- /dev/null
+++ b/.meteor/versions
@@ -0,0 +1,72 @@
+allow-deny@1.0.5
+autopublish@1.0.7
+autoupdate@1.2.11
+babel-compiler@6.9.1_1
+babel-runtime@0.1.11_1
+base64@1.0.9
+binary-heap@1.0.9
+blaze@2.1.9
+blaze-html-templates@1.0.5
+blaze-tools@1.0.10
+boilerplate-generator@1.0.10
+caching-compiler@1.1.7_1
+caching-html-compiler@1.0.7
+callback-hook@1.0.9
+check@1.2.3
+ddp@1.2.5
+ddp-client@1.2.9
+ddp-common@1.2.6
+ddp-server@1.2.10
+deps@1.0.12
+diff-sequence@1.0.6
+ecmascript@0.5.8_1
+ecmascript-runtime@0.3.14_1
+ejson@1.0.12
+es5-shim@4.6.14_1
+fastclick@1.0.12
+geojson-utils@1.0.9
+hot-code-push@1.0.4
+html-tools@1.0.11
+htmljs@1.0.11
+http@1.1.8
+id-map@1.0.8
+insecure@1.0.7
+jquery@1.11.9
+launch-screen@1.0.12
+livedata@1.0.18
+logging@1.1.15_1
+meteor@1.2.17_1
+meteor-base@1.0.4
+minifier-css@1.2.14_1
+minifier-js@1.2.14_1
+minimongo@1.0.17
+mobile-experience@1.0.4
+mobile-status-bar@1.0.12
+modules@0.7.6_1
+modules-runtime@0.7.6_1
+mongo@1.1.12_5
+mongo-id@1.0.5
+npm-mongo@2.2.10_1
+observe-sequence@1.0.13
+ordered-dict@1.0.8
+promise@0.8.7
+random@1.0.10
+reactive-var@1.0.10
+reload@1.1.10
+retry@1.0.8
+routepolicy@1.0.11
+shell-server@0.2.1
+spacebars@1.0.13
+spacebars-compiler@1.0.13
+standard-minifier-css@1.2.1
+standard-minifier-js@1.2.0_1
+templating@1.2.15
+templating-compiler@1.2.15
+templating-runtime@1.2.15
+templating-tools@1.0.5
+tracker@1.1.0
+ui@1.0.12
+underscore@1.0.9
+url@1.0.10
+webapp@1.3.11_1
+webapp-hashing@1.0.9
diff --git a/client/main.css b/client/main.css
new file mode 100644
index 0000000..b6b4052
--- /dev/null
+++ b/client/main.css
@@ -0,0 +1 @@
+/* CSS declarations go here */
diff --git a/client/main.html b/client/main.html
new file mode 100644
index 0000000..203539b
--- /dev/null
+++ b/client/main.html
@@ -0,0 +1,25 @@
+<head>
+  <title>simple</title>
+</head>
+
+<body>
+  <h1>Welcome to Meteor!</h1>
+
+  {{> hello}}
+  {{> info}}
+</body>
+
+<template name="hello">
+  <button>Click Me</button>
+  <p>You've pressed the button {{counter}} times.</p>
+</template>
+
+<template name="info">
+  <h2>Learn Meteor!</h2>
+  <ul>
+    <li><a href="https://www.meteor.com/try">Do the Tutorial</a></li>
+    <li><a href="http://guide.meteor.com">Follow the Guide</a></li>
+    <li><a href="https://docs.meteor.com">Read the Docs</a></li>
+    <li><a href="https://forums.meteor.com">Discussions</a></li>
+  </ul>
+</template>
\ No newline at end of file
diff --git a/client/main.js b/client/main.js
new file mode 100644
index 0000000..ecb3282
--- /dev/null
+++ b/client/main.js
@@ -0,0 +1,22 @@
+import { Template } from 'meteor/templating';
+import { ReactiveVar } from 'meteor/reactive-var';
+
+import './main.html';
+
+Template.hello.onCreated(function helloOnCreated() {
+  // counter starts at 0
+  this.counter = new ReactiveVar(0);
+});
+
+Template.hello.helpers({
+  counter() {
+    return Template.instance().counter.get();
+  },
+});
+
+Template.hello.events({
+  'click button'(event, instance) {
+    // increment the counter when button is clicked
+    instance.counter.set(instance.counter.get() + 1);
+  },
+});
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..196e6e1
--- /dev/null
+++ b/package.json
@@ -0,0 +1,10 @@
+{
+  "name": "socially",
+  "private": true,
+  "scripts": {
+    "start": "meteor run"
+  },
+  "dependencies": {
+    "meteor-node-stubs": "~0.2.0"
+  }
+}
diff --git a/server/main.js b/server/main.js
new file mode 100644
index 0000000..31a9e0e
--- /dev/null
+++ b/server/main.js
@@ -0,0 +1,5 @@
+import { Meteor } from 'meteor/meteor';
+
+Meteor.startup(() => {
+  // code to run on server at startup
+});
-- 
2.7.4


From 04c6f86f078098ce124f1dec399b88fddcdafeeb Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:15:57 +0200
Subject: [PATCH 002/414] Step 0.2: Remove project files

---
 client/main.css  |  1 -
 client/main.html | 25 -------------------------
 client/main.js   | 22 ----------------------
 server/main.js   |  5 -----
 4 files changed, 53 deletions(-)
 delete mode 100644 client/main.css
 delete mode 100644 client/main.html
 delete mode 100644 client/main.js
 delete mode 100644 server/main.js

diff --git a/client/main.css b/client/main.css
deleted file mode 100644
index b6b4052..0000000
--- a/client/main.css
+++ /dev/null
@@ -1 +0,0 @@
-/* CSS declarations go here */
diff --git a/client/main.html b/client/main.html
deleted file mode 100644
index 203539b..0000000
--- a/client/main.html
+++ /dev/null
@@ -1,25 +0,0 @@
-<head>
-  <title>simple</title>
-</head>
-
-<body>
-  <h1>Welcome to Meteor!</h1>
-
-  {{> hello}}
-  {{> info}}
-</body>
-
-<template name="hello">
-  <button>Click Me</button>
-  <p>You've pressed the button {{counter}} times.</p>
-</template>
-
-<template name="info">
-  <h2>Learn Meteor!</h2>
-  <ul>
-    <li><a href="https://www.meteor.com/try">Do the Tutorial</a></li>
-    <li><a href="http://guide.meteor.com">Follow the Guide</a></li>
-    <li><a href="https://docs.meteor.com">Read the Docs</a></li>
-    <li><a href="https://forums.meteor.com">Discussions</a></li>
-  </ul>
-</template>
\ No newline at end of file
diff --git a/client/main.js b/client/main.js
deleted file mode 100644
index ecb3282..0000000
--- a/client/main.js
+++ /dev/null
@@ -1,22 +0,0 @@
-import { Template } from 'meteor/templating';
-import { ReactiveVar } from 'meteor/reactive-var';
-
-import './main.html';
-
-Template.hello.onCreated(function helloOnCreated() {
-  // counter starts at 0
-  this.counter = new ReactiveVar(0);
-});
-
-Template.hello.helpers({
-  counter() {
-    return Template.instance().counter.get();
-  },
-});
-
-Template.hello.events({
-  'click button'(event, instance) {
-    // increment the counter when button is clicked
-    instance.counter.set(instance.counter.get() + 1);
-  },
-});
diff --git a/server/main.js b/server/main.js
deleted file mode 100644
index 31a9e0e..0000000
--- a/server/main.js
+++ /dev/null
@@ -1,5 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-
-Meteor.startup(() => {
-  // code to run on server at startup
-});
-- 
2.7.4


From e2b83efe946e03e96ed9f5404dca47f7da85bcc4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:29:56 +0200
Subject: [PATCH 003/414] Step 0.3: Create an empty html file

---
 client/index.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 client/index.html

diff --git a/client/index.html b/client/index.html
new file mode 100644
index 0000000..ef412ef
--- /dev/null
+++ b/client/index.html
@@ -0,0 +1,3 @@
+<body>
+  <p>Nothing here</p>
+</body>
-- 
2.7.4


From 72b9d025897fa04ff6f8f44fa728dd312c22de69 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:33:17 +0200
Subject: [PATCH 004/414] Step 0.4: Remove `blaze-html-templates` and
 `ecmascript`

---
 .meteor/packages | 20 +++++++++-----------
 .meteor/versions |  7 -------
 2 files changed, 9 insertions(+), 18 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 801f3fc..365a3d5 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -4,18 +4,16 @@
 # 'meteor add' and 'meteor remove' will edit this file for you,
 # but you can also edit it by hand.
 
-meteor-base@1.0.4             # Packages every Meteor app needs to have
-mobile-experience@1.0.4       # Packages for a great mobile UX
-mongo@1.1.12_1                   # The database Meteor supports right now
-blaze-html-templates@1.0.4    # Compile .html files into Meteor Blaze views
-reactive-var@1.0.10            # Reactive variable for tracker
-jquery@1.11.9                  # Helpful client-side library
-tracker@1.1.0                 # Meteor's client-side reactive programming library
+meteor-base             # Packages every Meteor app needs to have
+mobile-experience       # Packages for a great mobile UX
+mongo                   # The database Meteor supports right now
+reactive-var            # Reactive variable for tracker
+jquery                  # Helpful client-side library
+tracker                 # Meteor's client-side reactive programming library
 
-standard-minifier-css@1.2.0_1   # CSS minifier run for production mode
-standard-minifier-js@1.2.0_1    # JS minifier run for production mode
-es5-shim@4.6.14_1                # ECMAScript 5 compatibility for older browsers.
-ecmascript@0.5.8_1              # Enable ECMAScript2015+ syntax in app code
+standard-minifier-css   # CSS minifier run for production mode
+standard-minifier-js    # JS minifier run for production mode
+es5-shim                # ECMAScript 5 compatibility for older browsers.
 
 autopublish@1.0.7             # Publish all data to the clients (for prototyping)
 insecure@1.0.7                # Allow all DB writes from clients (for prototyping)
diff --git a/.meteor/versions b/.meteor/versions
index 8cc40eb..9fcabc4 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -6,11 +6,8 @@ babel-runtime@0.1.11_1
 base64@1.0.9
 binary-heap@1.0.9
 blaze@2.1.9
-blaze-html-templates@1.0.5
 blaze-tools@1.0.10
 boilerplate-generator@1.0.10
-caching-compiler@1.1.7_1
-caching-html-compiler@1.0.7
 callback-hook@1.0.9
 check@1.2.3
 ddp@1.2.5
@@ -60,10 +57,6 @@ spacebars@1.0.13
 spacebars-compiler@1.0.13
 standard-minifier-css@1.2.1
 standard-minifier-js@1.2.0_1
-templating@1.2.15
-templating-compiler@1.2.15
-templating-runtime@1.2.15
-templating-tools@1.0.5
 tracker@1.1.0
 ui@1.0.12
 underscore@1.0.9
-- 
2.7.4


From 055084db2ea3b902cd009e8705421c71032e881c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:35:22 +0200
Subject: [PATCH 005/414] Step 0.5: Add `angular-templates` and
 `pbastowski:angular-babel`

---
 .meteor/packages | 7 ++++---
 .meteor/versions | 5 ++++-
 2 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 365a3d5..d74ee49 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -15,6 +15,7 @@ standard-minifier-css   # CSS minifier run for production mode
 standard-minifier-js    # JS minifier run for production mode
 es5-shim                # ECMAScript 5 compatibility for older browsers.
 
-autopublish@1.0.7             # Publish all data to the clients (for prototyping)
-insecure@1.0.7                # Allow all DB writes from clients (for prototyping)
-shell-server
+autopublish             # Publish all data to the clients (for prototyping)
+insecure                # Allow all DB writes from clients (for prototyping)
+pbastowski:angular-babel
+angular-templates
diff --git a/.meteor/versions b/.meteor/versions
index 9fcabc4..5358258 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,4 +1,5 @@
 allow-deny@1.0.5
+angular-templates@1.0.9
 autopublish@1.0.7
 autoupdate@1.2.11
 babel-compiler@6.9.1_1
@@ -8,6 +9,7 @@ binary-heap@1.0.9
 blaze@2.1.9
 blaze-tools@1.0.10
 boilerplate-generator@1.0.10
+caching-compiler@1.0.6
 callback-hook@1.0.9
 check@1.2.3
 ddp@1.2.5
@@ -46,13 +48,13 @@ mongo-id@1.0.5
 npm-mongo@2.2.10_1
 observe-sequence@1.0.13
 ordered-dict@1.0.8
+pbastowski:angular-babel@1.3.6
 promise@0.8.7
 random@1.0.10
 reactive-var@1.0.10
 reload@1.1.10
 retry@1.0.8
 routepolicy@1.0.11
-shell-server@0.2.1
 spacebars@1.0.13
 spacebars-compiler@1.0.13
 standard-minifier-css@1.2.1
@@ -60,6 +62,7 @@ standard-minifier-js@1.2.0_1
 tracker@1.1.0
 ui@1.0.12
 underscore@1.0.9
+urigo:static-html-compiler@0.1.8
 url@1.0.10
 webapp@1.3.11_1
 webapp-hashing@1.0.9
-- 
2.7.4


From 55365cc83bf1f45f3a811b96d4174e43ec6e3d65 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:36:09 +0200
Subject: [PATCH 006/414] Step 0.6: Add `angular` and `angular-meteor`

---
 package.json | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/package.json b/package.json
index 196e6e1..1fdb919 100644
--- a/package.json
+++ b/package.json
@@ -5,6 +5,8 @@
     "start": "meteor run"
   },
   "dependencies": {
+    "angular": "^1.5.3",
+    "angular-meteor": "^1.3.9",
     "meteor-node-stubs": "~0.2.0"
   }
 }
-- 
2.7.4


From 7399a7dc27516dda7a9cd8f19c1f5b152f922859 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:38:27 +0200
Subject: [PATCH 007/414] Step 0.7: Move the main content to a new file

---
 client/main.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 client/main.html

diff --git a/client/main.html b/client/main.html
new file mode 100644
index 0000000..79ed426
--- /dev/null
+++ b/client/main.html
@@ -0,0 +1 @@
+<p>Nothing here</p>
-- 
2.7.4


From 3cea70773ddf894b7c543ffc1cc8aa2936438d87 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:39:02 +0200
Subject: [PATCH 008/414] Step 0.8: Add `ng-include` that loads the main.html
 file

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index ef412ef..6378317 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,3 @@
 <body>
-  <p>Nothing here</p>
+  <div ng-include src="'client/main.html'"></div>
 </body>
-- 
2.7.4


From f32b5f249da93d0694e91a029c68b4e1cb01d06e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:41:54 +0200
Subject: [PATCH 009/414] Step 0.9: Add main.js with angular module

---
 client/main.js | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 client/main.js

diff --git a/client/main.js b/client/main.js
new file mode 100644
index 0000000..558ad57
--- /dev/null
+++ b/client/main.js
@@ -0,0 +1,6 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+angular.module('socially', [
+  angularMeteor
+]);
-- 
2.7.4


From 9a3c46dc36f90b40720df2ef234c4b18352a29cd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:42:29 +0200
Subject: [PATCH 010/414] Step 0.10: Add usage of `ng-app` in our app

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index 6378317..f6b9ac4 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,3 @@
-<body>
+<body ng-app="socially">
   <div ng-include src="'client/main.html'"></div>
 </body>
-- 
2.7.4


From 62e38b66be49779206a63733abfea5521ccfe23e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:47:16 +0200
Subject: [PATCH 011/414] Step 0.11: Add some AngularJS code !

---
 client/main.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/main.html b/client/main.html
index 79ed426..a9c8ddc 100644
--- a/client/main.html
+++ b/client/main.html
@@ -1 +1 @@
-<p>Nothing here</p>
+<p>Nothing here {{ 'yet' + '!' }}</p>
-- 
2.7.4


From eded909a9ce9667c2bdaa7298c27c54ffdf89a4b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:48:04 +0200
Subject: [PATCH 012/414] Step 1.1: Add some static HTML the to main page

---
 client/main.html | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/client/main.html b/client/main.html
index a9c8ddc..dd1ef68 100644
--- a/client/main.html
+++ b/client/main.html
@@ -1 +1,14 @@
-<p>Nothing here {{ 'yet' + '!' }}</p>
+<ul>
+  <li>
+    <span>Dubstep-Free Zone</span>
+    <p>
+      Can we please just for an evening not listen to dubstep.
+    </p>
+  </li>
+  <li>
+    <span>All dubstep all the time</span>
+    <p>
+      Get it on!
+    </p>
+  </li>
+</ul>
-- 
2.7.4


From 0d8995c1265393cf2efdaef03689f85c7126d388 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:49:31 +0200
Subject: [PATCH 013/414] Step 2.1: Use dynamic template instead of static

---
 client/main.html | 22 ++++++++--------------
 1 file changed, 8 insertions(+), 14 deletions(-)

diff --git a/client/main.html b/client/main.html
index dd1ef68..7f8c6d9 100644
--- a/client/main.html
+++ b/client/main.html
@@ -1,14 +1,8 @@
-<ul>
-  <li>
-    <span>Dubstep-Free Zone</span>
-    <p>
-      Can we please just for an evening not listen to dubstep.
-    </p>
-  </li>
-  <li>
-    <span>All dubstep all the time</span>
-    <p>
-      Get it on!
-    </p>
-  </li>
-</ul>
+<div ng-controller="PartiesListCtrl">
+  <ul>
+    <li ng-repeat="party in parties">
+      {{party.name}}
+      <p>{{party.description}}</p>
+    </li>
+  </ul>
+</div>
-- 
2.7.4


From ad2ce953ce81eded8f3e62ddb9c3df4627d3edf0 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:50:30 +0200
Subject: [PATCH 014/414] Step 2.2: Add the parties controller

---
 client/main.js | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/client/main.js b/client/main.js
index 558ad57..abc441c 100644
--- a/client/main.js
+++ b/client/main.js
@@ -2,5 +2,17 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
 angular.module('socially', [
-  angularMeteor
-]);
+    angularMeteor
+  ])
+  .controller('PartiesListCtrl', ['$scope', function($scope) {
+    $scope.parties = [{
+      'name': 'Dubstep-Free Zone',
+      'description': 'Can we please just for an evening not listen to dubstep.'
+    }, {
+      'name': 'All dubstep all the time',
+      'description': 'Get it on!'
+    }, {
+      'name': 'Savage lounging',
+      'description': 'Leisure suit required. And only fiercest manners.'
+    }];
+  }]);
-- 
2.7.4


From 40ee7395a2bb3c70d2e77f9d87b6a75b8168e770 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:51:13 +0200
Subject: [PATCH 015/414] Step 2.3: Remove the DI manual decleration

---
 client/main.js | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/client/main.js b/client/main.js
index abc441c..feb14f8 100644
--- a/client/main.js
+++ b/client/main.js
@@ -4,7 +4,9 @@ import angularMeteor from 'angular-meteor';
 angular.module('socially', [
     angularMeteor
   ])
-  .controller('PartiesListCtrl', ['$scope', function($scope) {
+  .controller('PartiesListCtrl', function($scope) {
+    'ngInject';
+    
     $scope.parties = [{
       'name': 'Dubstep-Free Zone',
       'description': 'Can we please just for an evening not listen to dubstep.'
@@ -15,4 +17,4 @@ angular.module('socially', [
       'name': 'Savage lounging',
       'description': 'Leisure suit required. And only fiercest manners.'
     }];
-  }]);
+  });
-- 
2.7.4


From 0c08274ce8ab934d35dbf184558b346c48afd4bd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:51:56 +0200
Subject: [PATCH 016/414] Step 2.4: Add ng-strict-di directive to the app

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index f6b9ac4..48c2d09 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,3 @@
-<body ng-app="socially">
+<body ng-app="socially" ng-strict-di="">
   <div ng-include src="'client/main.html'"></div>
 </body>
-- 
2.7.4


From fb8bd125bc93e60ee20c5d730026d437c11e469c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:56:08 +0200
Subject: [PATCH 017/414] Step 3.1: Add the parties collection

---
 collections/parties.js | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 collections/parties.js

diff --git a/collections/parties.js b/collections/parties.js
new file mode 100644
index 0000000..2c98c01
--- /dev/null
+++ b/collections/parties.js
@@ -0,0 +1,2 @@
+import { Mongo } from 'meteor/mongo';
+export const Parties = new Mongo.Collection('parties');
\ No newline at end of file
-- 
2.7.4


From 99565aa70fad1f9aacdbbeda0f6f50e26ed79200 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 09:56:46 +0200
Subject: [PATCH 018/414] Step 3.2: Add the parties collection helper

---
 client/main.js | 18 +++++++-----------
 1 file changed, 7 insertions(+), 11 deletions(-)

diff --git a/client/main.js b/client/main.js
index feb14f8..f03bc32 100644
--- a/client/main.js
+++ b/client/main.js
@@ -1,20 +1,16 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
+import { Parties } from '../collections/parties'
 
 angular.module('socially', [
     angularMeteor
   ])
   .controller('PartiesListCtrl', function($scope) {
     'ngInject';
-    
-    $scope.parties = [{
-      'name': 'Dubstep-Free Zone',
-      'description': 'Can we please just for an evening not listen to dubstep.'
-    }, {
-      'name': 'All dubstep all the time',
-      'description': 'Get it on!'
-    }, {
-      'name': 'Savage lounging',
-      'description': 'Leisure suit required. And only fiercest manners.'
-    }];
+
+    $scope.helpers({
+      parties() {
+        return Parties.find({});
+      }
+    });
   });
-- 
2.7.4


From c7c2d614f5e79c43ab9061139ec4c1800f488c9c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:00:24 +0200
Subject: [PATCH 019/414] Step 3.3: Add some data to the parties collection

---
 client/main.js |  2 +-
 server/main.js | 21 +++++++++++++++++++++
 2 files changed, 22 insertions(+), 1 deletion(-)
 create mode 100644 server/main.js

diff --git a/client/main.js b/client/main.js
index f03bc32..e16ab3b 100644
--- a/client/main.js
+++ b/client/main.js
@@ -1,6 +1,6 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
-import { Parties } from '../collections/parties'
+import { Parties } from '../collections/parties';
 
 angular.module('socially', [
     angularMeteor
diff --git a/server/main.js b/server/main.js
new file mode 100644
index 0000000..a1f025e
--- /dev/null
+++ b/server/main.js
@@ -0,0 +1,21 @@
+import { Meteor } from 'meteor/meteor';
+import { Parties } from '../collections/parties';
+
+Meteor.startup(() => {
+  if (Parties.find().count() === 0) {
+    const parties = [{
+      'name': 'Dubstep-Free Zone',
+      'description': 'Fast just got faster with Nexus S.'
+    }, {
+      'name': 'All dubstep all the time',
+      'description': 'Get it on!'
+    }, {
+      'name': 'Savage lounging',
+      'description': 'Leisure suit required. And only fiercest manners.'
+    }];
+
+    parties.forEach((party) => {
+      Parties.insert(party)
+    });
+  }
+});
-- 
2.7.4


From f1f10d1e3fd6eb6074d3289a5f7bcd54f2df9a87 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:00:58 +0200
Subject: [PATCH 020/414] Step 3.4: Change to use controllerAs syntax

---
 client/main.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/client/main.html b/client/main.html
index 7f8c6d9..62eca58 100644
--- a/client/main.html
+++ b/client/main.html
@@ -1,6 +1,6 @@
-<div ng-controller="PartiesListCtrl">
+<div ng-controller="PartiesListCtrl as vm">
   <ul>
-    <li ng-repeat="party in parties">
+    <li ng-repeat="party in vm.parties">
       {{party.name}}
       <p>{{party.description}}</p>
     </li>
-- 
2.7.4


From 80afe679391245e6c1f0d707f234076f64631440 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:07:22 +0200
Subject: [PATCH 021/414] Step 3.5: Change the parties controller to use
 $reactive and `this` instead of `$scope`

---
 client/main.js | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/client/main.js b/client/main.js
index e16ab3b..029dc58 100644
--- a/client/main.js
+++ b/client/main.js
@@ -5,10 +5,12 @@ import { Parties } from '../collections/parties';
 angular.module('socially', [
     angularMeteor
   ])
-  .controller('PartiesListCtrl', function($scope) {
+  .controller('PartiesListCtrl', function($scope, $reactive) {
     'ngInject';
 
-    $scope.helpers({
+    $reactive(this).attach($scope);
+
+    this.helpers({
       parties() {
         return Parties.find({});
       }
-- 
2.7.4


From b9d5246c597e78482bceb09a22426cb004ce0abf Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:12:43 +0200
Subject: [PATCH 022/414] Step 3.6: Refactor PartiesListCtrl to be a component

---
 client/main.js | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/client/main.js b/client/main.js
index 029dc58..33040cd 100644
--- a/client/main.js
+++ b/client/main.js
@@ -5,14 +5,18 @@ import { Parties } from '../collections/parties';
 angular.module('socially', [
     angularMeteor
   ])
-  .controller('PartiesListCtrl', function($scope, $reactive) {
-    'ngInject';
+  .component('partiesList', {
+    templateUrl: 'client/partiesList.html',
+    controllerAs: 'partiesList',
+    controller($scope, $reactive) {
+      'ngInject';
 
-    $reactive(this).attach($scope);
+      $reactive(this).attach($scope);
 
-    this.helpers({
-      parties() {
-        return Parties.find({});
-      }
-    });
+      this.helpers({
+        parties() {
+          return Parties.find({});
+        }
+      });
+    }
   });
-- 
2.7.4


From f3037214612521b02779b1444e60bae4817281f2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:13:37 +0200
Subject: [PATCH 023/414] Step 3.7: Change usage from controllerAs to
 components code-style - view

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index 48c2d09..84f0ef3 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,3 @@
 <body ng-app="socially" ng-strict-di="">
-  <div ng-include src="'client/main.html'"></div>
+  <parties-list></parties-list>
 </body>
-- 
2.7.4


From db2f36599413ae427f3695d91ec4146384b1edc7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:14:22 +0200
Subject: [PATCH 024/414] Step 3.8: Move the parties list to a different HTML
 file

---
 client/partiesList.html | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 client/partiesList.html

diff --git a/client/partiesList.html b/client/partiesList.html
new file mode 100644
index 0000000..64ac441
--- /dev/null
+++ b/client/partiesList.html
@@ -0,0 +1,6 @@
+<ul>
+  <li ng-repeat="party in partiesList.parties">
+    {{party.name}}
+    <p>{{party.description}}</p>
+  </li>
+</ul>
-- 
2.7.4


From 4b3b320ec84ae5a43976d141b4cb5a0da9de6bfb Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:25:52 +0200
Subject: [PATCH 025/414] Step 3.9: Move PartiesList to imports

---
 imports/ui/components/partiesList/partiesList.js | 27 ++++++++++++++++++++++++
 1 file changed, 27 insertions(+)
 create mode 100644 imports/ui/components/partiesList/partiesList.js

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
new file mode 100644
index 0000000..a5a8a27
--- /dev/null
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -0,0 +1,27 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+class PartiesList {
+  constructor($scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+
+    this.helpers({
+      parties() {
+        return Parties.find({});
+      }
+    });
+  }
+}
+
+const name = 'partiesList';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  templateUrl: `imports/ui/components/${name}/${name}.html`,
+  controllerAs: name,
+  controller: PartiesList
+});
-- 
2.7.4


From be9fa1822133616605c7d671f1dd8ee87c04fee2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:26:25 +0200
Subject: [PATCH 026/414] Step 3.10: Move PartiesList view to imports

---
 imports/ui/components/partiesList/partiesList.html | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 imports/ui/components/partiesList/partiesList.html

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
new file mode 100644
index 0000000..64ac441
--- /dev/null
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -0,0 +1,6 @@
+<ul>
+  <li ng-repeat="party in partiesList.parties">
+    {{party.name}}
+    <p>{{party.description}}</p>
+  </li>
+</ul>
-- 
2.7.4


From cb72a5f47cb808f366ed69901c8d8f01ba929f37 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:27:59 +0200
Subject: [PATCH 027/414] Step 3.11: Use PartiesList from imports

---
 client/main.js | 22 +++++-----------------
 1 file changed, 5 insertions(+), 17 deletions(-)

diff --git a/client/main.js b/client/main.js
index 33040cd..646a86f 100644
--- a/client/main.js
+++ b/client/main.js
@@ -2,21 +2,9 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 import { Parties } from '../collections/parties';
 
-angular.module('socially', [
-    angularMeteor
-  ])
-  .component('partiesList', {
-    templateUrl: 'client/partiesList.html',
-    controllerAs: 'partiesList',
-    controller($scope, $reactive) {
-      'ngInject';
-
-      $reactive(this).attach($scope);
+import { name as PartiesList } from '../imports/ui/components/partiesList/partiesList';
 
-      this.helpers({
-        parties() {
-          return Parties.find({});
-        }
-      });
-    }
-  });
+angular.module('socially', [
+    angularMeteor,
+    PartiesList
+  ]);
-- 
2.7.4


From bb05d5dbb7e12a93ad0938c8ea9b3d266de56f60 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:28:46 +0200
Subject: [PATCH 028/414] Step 3.12: Remove old partiesList.html

---
 client/partiesList.html | 6 ------
 1 file changed, 6 deletions(-)
 delete mode 100644 client/partiesList.html

diff --git a/client/partiesList.html b/client/partiesList.html
deleted file mode 100644
index 64ac441..0000000
--- a/client/partiesList.html
+++ /dev/null
@@ -1,6 +0,0 @@
-<ul>
-  <li ng-repeat="party in partiesList.parties">
-    {{party.name}}
-    <p>{{party.description}}</p>
-  </li>
-</ul>
-- 
2.7.4


From 3f6786e60404e62e0a0bfe8a4ff68c863bceba65 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:29:23 +0200
Subject: [PATCH 029/414] Step 3.13: Remove unused main.html

---
 client/main.html | 8 --------
 1 file changed, 8 deletions(-)
 delete mode 100644 client/main.html

diff --git a/client/main.html b/client/main.html
deleted file mode 100644
index 62eca58..0000000
--- a/client/main.html
+++ /dev/null
@@ -1,8 +0,0 @@
-<div ng-controller="PartiesListCtrl as vm">
-  <ul>
-    <li ng-repeat="party in vm.parties">
-      {{party.name}}
-      <p>{{party.description}}</p>
-    </li>
-  </ul>
-</div>
-- 
2.7.4


From 3e2cd8cf62948aa0b7caf0d650e97182eb148466 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:29:59 +0200
Subject: [PATCH 030/414] Step 3.14: Import template

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index a5a8a27..ba6973f 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -1,6 +1,8 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
+import templateUrl from './partiesList.html';
+
 class PartiesList {
   constructor($scope, $reactive) {
     'ngInject';
@@ -21,7 +23,7 @@ const name = 'partiesList';
 export default angular.module(name, [
   angularMeteor
 ]).component(name, {
-  templateUrl: `imports/ui/components/${name}/${name}.html`,
+  templateUrl,
   controllerAs: name,
   controller: PartiesList
 });
-- 
2.7.4


From fee13095be9c12d5d48d6209ebe5925e9a2da8d9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 12 May 2016 10:18:38 +0200
Subject: [PATCH 031/414] Step 3.15: Add static-templates

---
 .meteor/packages | 2 +-
 .meteor/versions | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index d74ee49..7474951 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -18,4 +18,4 @@ es5-shim                # ECMAScript 5 compatibility for older browsers.
 autopublish             # Publish all data to the clients (for prototyping)
 insecure                # Allow all DB writes from clients (for prototyping)
 pbastowski:angular-babel
-angular-templates
+urigo:static-templates
diff --git a/.meteor/versions b/.meteor/versions
index 5358258..cf253c0 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,5 +1,4 @@
 allow-deny@1.0.5
-angular-templates@1.0.9
 autopublish@1.0.7
 autoupdate@1.2.11
 babel-compiler@6.9.1_1
@@ -63,6 +62,7 @@ tracker@1.1.0
 ui@1.0.12
 underscore@1.0.9
 urigo:static-html-compiler@0.1.8
+urigo:static-templates@0.1.3
 url@1.0.10
 webapp@1.3.11_1
 webapp-hashing@1.0.9
-- 
2.7.4


From a45cc7554dffe5ff21cfc82a5c7f09ff59a4afaf Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 12 May 2016 10:19:21 +0200
Subject: [PATCH 032/414] Step 3.16: Switch from templateUrl to template

---
 imports/ui/components/partiesList/partiesList.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index ba6973f..fc2bdd6 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -1,7 +1,7 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
-import templateUrl from './partiesList.html';
+import template from './partiesList.html';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -23,7 +23,7 @@ const name = 'partiesList';
 export default angular.module(name, [
   angularMeteor
 ]).component(name, {
-  templateUrl,
+  template,
   controllerAs: name,
   controller: PartiesList
 });
-- 
2.7.4


From 2c9d20805b0e93a00da75b558aa8d70b203829cd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:31:27 +0200
Subject: [PATCH 033/414] Step 3.17: Create view for Socially component

---
 imports/ui/components/socially/socially.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 imports/ui/components/socially/socially.html

diff --git a/imports/ui/components/socially/socially.html b/imports/ui/components/socially/socially.html
new file mode 100644
index 0000000..5e9673b
--- /dev/null
+++ b/imports/ui/components/socially/socially.html
@@ -0,0 +1 @@
+<parties-list></parties-list>
-- 
2.7.4


From 0689d22d3be363656c3fbe770f090b0d1d92bac5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:32:56 +0200
Subject: [PATCH 034/414] Step 3.18: Create Socially component

---
 imports/ui/components/socially/socially.js | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)
 create mode 100644 imports/ui/components/socially/socially.js

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
new file mode 100644
index 0000000..2a99481
--- /dev/null
+++ b/imports/ui/components/socially/socially.js
@@ -0,0 +1,19 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import template from './socially.html';
+import { name as PartiesList } from '../partiesList/partiesList';
+
+class Socially {}
+
+const name = 'socially';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  PartiesList
+]).component(name, {
+  template,
+  controllerAs: name,
+  controller: Socially
+});
-- 
2.7.4


From 34832b0df83142934ff6dc67a1df43655226e178 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:33:26 +0200
Subject: [PATCH 035/414] Step 3.19: Replace parties-list with socially

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index 84f0ef3..e6d21ea 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,3 @@
 <body ng-app="socially" ng-strict-di="">
-  <parties-list></parties-list>
+  <socially></socially>
 </body>
-- 
2.7.4


From 919ebe4e670493eae6766f6d1b338f451d7a9072 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:34:53 +0200
Subject: [PATCH 036/414] Step 3.20: Import Socially in main.js

---
 client/main.js | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/client/main.js b/client/main.js
index 646a86f..9a3c900 100644
--- a/client/main.js
+++ b/client/main.js
@@ -2,9 +2,4 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 import { Parties } from '../collections/parties';
 
-import { name as PartiesList } from '../imports/ui/components/partiesList/partiesList';
-
-angular.module('socially', [
-    angularMeteor,
-    PartiesList
-  ]);
+import { name as Socially } from '../imports/ui/components/socially/socially';
-- 
2.7.4


From 90e9cae2b3ab97afde32b3f3fa83a7c72877b3b3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:35:46 +0200
Subject: [PATCH 037/414] Step 4.1: Create template for PartyAdd component

---
 imports/ui/components/partyAdd/partyAdd.html | 11 +++++++++++
 1 file changed, 11 insertions(+)
 create mode 100644 imports/ui/components/partyAdd/partyAdd.html

diff --git a/imports/ui/components/partyAdd/partyAdd.html b/imports/ui/components/partyAdd/partyAdd.html
new file mode 100644
index 0000000..a61cf04
--- /dev/null
+++ b/imports/ui/components/partyAdd/partyAdd.html
@@ -0,0 +1,11 @@
+<form>
+  <label>
+    Party Name:
+  </label>
+  <input type="text"/>
+  <label>
+    Description:
+  </label>
+  <input type="text"/>
+  <button>Add Party!</button>
+</form>
-- 
2.7.4


From dd948bbc9611c629fb74285a4af61908024cdbb2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:36:39 +0200
Subject: [PATCH 038/414] Step 4.2: Create PartyAdd component

---
 imports/ui/components/partyAdd/partyAdd.js | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)
 create mode 100644 imports/ui/components/partyAdd/partyAdd.js

diff --git a/imports/ui/components/partyAdd/partyAdd.js b/imports/ui/components/partyAdd/partyAdd.js
new file mode 100644
index 0000000..bec462e
--- /dev/null
+++ b/imports/ui/components/partyAdd/partyAdd.js
@@ -0,0 +1,17 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import template from './partyAdd.html';
+
+class PartyAdd {}
+
+const name = 'partyAdd';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name,
+  controller: PartyAdd
+});
-- 
2.7.4


From 90e12a72b12024caa5eb171c0f24819e83f09abc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:37:19 +0200
Subject: [PATCH 039/414] Step 4.3: Implement PartyAdd to the view

---
 imports/ui/components/partiesList/partiesList.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 64ac441..229908b 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,3 +1,5 @@
+<party-add></party-add>
+
 <ul>
   <li ng-repeat="party in partiesList.parties">
     {{party.name}}
-- 
2.7.4


From efa37a5a2bb4994458a75cab2481314b6528e144 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:42:22 +0200
Subject: [PATCH 040/414] Step 4.4: Add PartyAdd to PartiesList

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index fc2bdd6..9acb917 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -2,6 +2,7 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
 import template from './partiesList.html';
+import { name as PartyAdd } from '../partyAdd/partyAdd';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -21,7 +22,8 @@ const name = 'partiesList';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor
+  angularMeteor,
+  PartyAdd
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From d1d8cc58a555fd0ea1d849703ba1beed13869762 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:43:11 +0200
Subject: [PATCH 041/414] Step 4.5: Add ng-model to the form inputs

---
 imports/ui/components/partyAdd/partyAdd.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partyAdd/partyAdd.html b/imports/ui/components/partyAdd/partyAdd.html
index a61cf04..f035ecd 100644
--- a/imports/ui/components/partyAdd/partyAdd.html
+++ b/imports/ui/components/partyAdd/partyAdd.html
@@ -2,10 +2,10 @@
   <label>
     Party Name:
   </label>
-  <input type="text"/>
+  <input type="text" ng-model="partyAdd.party.name" />
   <label>
     Description:
   </label>
-  <input type="text"/>
+  <input type="text" ng-model="partyAdd.party.description" />
   <button>Add Party!</button>
 </form>
-- 
2.7.4


From 626c6ec35bf9239e09091dd5fe58866ad72b2fa6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:46:01 +0200
Subject: [PATCH 042/414] Step 4.6: Add submit method to the button

---
 imports/ui/components/partyAdd/partyAdd.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyAdd/partyAdd.html b/imports/ui/components/partyAdd/partyAdd.html
index f035ecd..3508bef 100644
--- a/imports/ui/components/partyAdd/partyAdd.html
+++ b/imports/ui/components/partyAdd/partyAdd.html
@@ -7,5 +7,5 @@
     Description:
   </label>
   <input type="text" ng-model="partyAdd.party.description" />
-  <button>Add Party!</button>
+  <button ng-click="partyAdd.submit()">Add Party!</button>
 </form>
-- 
2.7.4


From d88f28f91f79e339b9880c12ce51a80fc9f8cbf1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:47:30 +0200
Subject: [PATCH 043/414] Step 4.7: Add submit method

---
 imports/ui/components/partyAdd/partyAdd.js | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyAdd/partyAdd.js b/imports/ui/components/partyAdd/partyAdd.js
index bec462e..d864dbb 100644
--- a/imports/ui/components/partyAdd/partyAdd.js
+++ b/imports/ui/components/partyAdd/partyAdd.js
@@ -3,7 +3,15 @@ import angularMeteor from 'angular-meteor';
 
 import template from './partyAdd.html';
 
-class PartyAdd {}
+class PartyAdd {
+  constructor() {
+    this.party = {};
+  }
+
+  submit() {
+    console.log('submit:', this.party);
+  }
+}
 
 const name = 'partyAdd';
 
-- 
2.7.4


From 34e5bf9f6131c675043057199cfed33ec63120c9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:52:00 +0200
Subject: [PATCH 044/414] Step 4.8: Move Parties to imports

---
 imports/api/parties.js | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/api/parties.js

diff --git a/imports/api/parties.js b/imports/api/parties.js
new file mode 100644
index 0000000..e308632
--- /dev/null
+++ b/imports/api/parties.js
@@ -0,0 +1,3 @@
+import { Mongo } from 'meteor/mongo';
+
+export const Parties = new Mongo.Collection('parties');
-- 
2.7.4


From 1adfde9fde4d8128847eddffce3efda153814dc2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:52:33 +0200
Subject: [PATCH 045/414] Step 4.9: Remove old collection

---
 collections/parties.js | 2 --
 1 file changed, 2 deletions(-)
 delete mode 100644 collections/parties.js

diff --git a/collections/parties.js b/collections/parties.js
deleted file mode 100644
index 2c98c01..0000000
--- a/collections/parties.js
+++ /dev/null
@@ -1,2 +0,0 @@
-import { Mongo } from 'meteor/mongo';
-export const Parties = new Mongo.Collection('parties');
\ No newline at end of file
-- 
2.7.4


From 64e9a383acbd79237a1c19102f3c1389c6b7b2af Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:56:28 +0200
Subject: [PATCH 046/414] Step 4.10: Import new module with Parties collection

---
 server/main.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/server/main.js b/server/main.js
index a1f025e..6ce39cd 100644
--- a/server/main.js
+++ b/server/main.js
@@ -1,5 +1,5 @@
 import { Meteor } from 'meteor/meteor';
-import { Parties } from '../collections/parties';
+import { Parties } from '../imports/api/parties';
 
 Meteor.startup(() => {
   if (Parties.find().count() === 0) {
-- 
2.7.4


From fa35cd064135178b77a74f196b2f0f5ba0d51556 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 10:57:41 +0200
Subject: [PATCH 047/414] Step 4.11: Import new module with Parties to
 PartiesList

---
 imports/ui/components/partiesList/partiesList.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 9acb917..b9ef5c8 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -2,6 +2,7 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
 import template from './partiesList.html';
+import { Parties } from '../../../api/parties';
 import { name as PartyAdd } from '../partyAdd/partyAdd';
 
 class PartiesList {
-- 
2.7.4


From e5c414a51a75d3c6b28cc1f0e02b5d7c5b1be690 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:00:20 +0200
Subject: [PATCH 048/414] Step 4.12: Insert new party

---
 imports/ui/components/partyAdd/partyAdd.js | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyAdd/partyAdd.js b/imports/ui/components/partyAdd/partyAdd.js
index d864dbb..aa9b76f 100644
--- a/imports/ui/components/partyAdd/partyAdd.js
+++ b/imports/ui/components/partyAdd/partyAdd.js
@@ -2,6 +2,7 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
 import template from './partyAdd.html';
+import { Parties } from '../../../api/parties';
 
 class PartyAdd {
   constructor() {
@@ -9,7 +10,12 @@ class PartyAdd {
   }
 
   submit() {
-    console.log('submit:', this.party);
+    Parties.insert(this.party);
+    this.reset();
+  }
+
+  reset() {
+    this.party = {};
   }
 }
 
-- 
2.7.4


From 53a40c0be0b66f854d6cfc3c86c4b381bd182225 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:01:18 +0200
Subject: [PATCH 049/414] Step 4.13: Create view for PartyRemove component

---
 imports/ui/components/partyRemove/partyRemove.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 imports/ui/components/partyRemove/partyRemove.html

diff --git a/imports/ui/components/partyRemove/partyRemove.html b/imports/ui/components/partyRemove/partyRemove.html
new file mode 100644
index 0000000..1295105
--- /dev/null
+++ b/imports/ui/components/partyRemove/partyRemove.html
@@ -0,0 +1 @@
+<button ng-click="partyRemove.remove()">X</button>
-- 
2.7.4


From bd778b8913de5d7858eaf29f98a8df38c8bcbd47 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:04:08 +0200
Subject: [PATCH 050/414] Step 4.14: Create PartyRemove component

---
 imports/ui/components/partyRemove/partyRemove.js | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 imports/ui/components/partyRemove/partyRemove.js

diff --git a/imports/ui/components/partyRemove/partyRemove.js b/imports/ui/components/partyRemove/partyRemove.js
new file mode 100644
index 0000000..646d78d
--- /dev/null
+++ b/imports/ui/components/partyRemove/partyRemove.js
@@ -0,0 +1,21 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import template from './partyRemove.html';
+
+class PartyRemove {
+  remove() {
+    console.log('remove party');
+  }
+}
+
+const name = 'partyRemove';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name,
+  controller: PartyRemove
+});
-- 
2.7.4


From 2a143088035ddd00d85a02ff181c2dc9e585d09c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:05:10 +0200
Subject: [PATCH 051/414] Step 4.15: Add party binding

---
 imports/ui/components/partyRemove/partyRemove.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partyRemove/partyRemove.js b/imports/ui/components/partyRemove/partyRemove.js
index 646d78d..fb007aa 100644
--- a/imports/ui/components/partyRemove/partyRemove.js
+++ b/imports/ui/components/partyRemove/partyRemove.js
@@ -16,6 +16,9 @@ export default angular.module(name, [
   angularMeteor
 ]).component(name, {
   template,
+  bindings: {
+    party: '<'
+  },
   controllerAs: name,
   controller: PartyRemove
 });
-- 
2.7.4


From 11c3d483267a2aed548ed494ff214a475cf1f18d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:06:30 +0200
Subject: [PATCH 052/414] Step 4.16: Remove party from collection

---
 imports/ui/components/partyRemove/partyRemove.js | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyRemove/partyRemove.js b/imports/ui/components/partyRemove/partyRemove.js
index fb007aa..ab73562 100644
--- a/imports/ui/components/partyRemove/partyRemove.js
+++ b/imports/ui/components/partyRemove/partyRemove.js
@@ -2,10 +2,13 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
 import template from './partyRemove.html';
+import { Parties } from '../../../api/parties';
 
 class PartyRemove {
   remove() {
-    console.log('remove party');
+    if (this.party) {
+      Parties.remove(this.party._id);
+    }
   }
 }
 
-- 
2.7.4


From 2dfbb61d53a8cdec024500d8b9f8bb49ff774d7d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:07:06 +0200
Subject: [PATCH 053/414] Step 4.17: Add PartyRemove

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index b9ef5c8..d5d132a 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -4,6 +4,7 @@ import angularMeteor from 'angular-meteor';
 import template from './partiesList.html';
 import { Parties } from '../../../api/parties';
 import { name as PartyAdd } from '../partyAdd/partyAdd';
+import { name as PartyRemove } from '../partyRemove/partyRemove';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -24,7 +25,8 @@ const name = 'partiesList';
 // create a module
 export default angular.module(name, [
   angularMeteor,
-  PartyAdd
+  PartyAdd,
+  PartyRemove
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 94472d9697d19bc63b924c1fe4af9ee49075e2ce Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:08:02 +0200
Subject: [PATCH 054/414] Step 4.18: Implement component

---
 imports/ui/components/partiesList/partiesList.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 229908b..24dedb1 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -4,5 +4,6 @@
   <li ng-repeat="party in partiesList.parties">
     {{party.name}}
     <p>{{party.description}}</p>
+    <party-remove party="party"></party-remove>
   </li>
 </ul>
-- 
2.7.4


From e524994d179597386a99dff39ad290a336f8e131 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 14:21:49 +0200
Subject: [PATCH 055/414] Step 4.19: Add `sanjo:jasmine` and reporters

---
 .meteor/packages |  3 +++
 .meteor/versions | 11 +++++++++++
 2 files changed, 14 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 7474951..026de87 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -19,3 +19,6 @@ autopublish             # Publish all data to the clients (for prototyping)
 insecure                # Allow all DB writes from clients (for prototyping)
 pbastowski:angular-babel
 urigo:static-templates
+sanjo:jasmine
+velocity:html-reporter
+velocity:console-reporter
diff --git a/.meteor/versions b/.meteor/versions
index cf253c0..af73cb2 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,4 +1,5 @@
 allow-deny@1.0.5
+amplify@1.0.0
 autopublish@1.0.7
 autoupdate@1.2.11
 babel-compiler@6.9.1_1
@@ -9,6 +10,7 @@ blaze@2.1.9
 blaze-tools@1.0.10
 boilerplate-generator@1.0.10
 caching-compiler@1.0.6
+caching-html-compiler@1.0.6
 callback-hook@1.0.9
 check@1.2.3
 ddp@1.2.5
@@ -31,6 +33,7 @@ id-map@1.0.8
 insecure@1.0.7
 jquery@1.11.9
 launch-screen@1.0.12
+less@2.5.7
 livedata@1.0.18
 logging@1.1.15_1
 meteor@1.2.17_1
@@ -50,19 +53,27 @@ ordered-dict@1.0.8
 pbastowski:angular-babel@1.3.6
 promise@0.8.7
 random@1.0.10
+reactive-dict@1.1.8
 reactive-var@1.0.10
 reload@1.1.10
 retry@1.0.8
 routepolicy@1.0.11
+sanjo:jasmine@1.0.1
+session@1.1.6
 spacebars@1.0.13
 spacebars-compiler@1.0.13
 standard-minifier-css@1.2.1
 standard-minifier-js@1.2.0_1
+templating@1.1.14
+templating-tools@1.0.5
 tracker@1.1.0
 ui@1.0.12
 underscore@1.0.9
 urigo:static-html-compiler@0.1.8
 urigo:static-templates@0.1.3
 url@1.0.10
+velocity:console-reporter@0.2.1
+velocity:html-reporter@0.10.1
+velocity:reports@1.0.0
 webapp@1.3.11_1
 webapp-hashing@1.0.9
-- 
2.7.4


From 6679e6d2bb346f226b2407c59e4c226763325782 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 14:23:16 +0200
Subject: [PATCH 056/414] Step 4.20: Add `test:watch` npm script

---
 package.json | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/package.json b/package.json
index 1fdb919..af9f43d 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,8 @@
   "name": "socially",
   "private": true,
   "scripts": {
-    "start": "meteor run"
+    "start": "meteor run",
+    "test:watch": "meteor test --driver-package sanjo:jasmine"
   },
   "dependencies": {
     "angular": "^1.5.3",
-- 
2.7.4


From c7872f557f3629bf1216a6c955e32b889c784adb Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 14:24:39 +0200
Subject: [PATCH 057/414] Step 4.21: Install `angular-mocks`

---
 package.json | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/package.json b/package.json
index af9f43d..1555b86 100644
--- a/package.json
+++ b/package.json
@@ -9,5 +9,8 @@
     "angular": "^1.5.3",
     "angular-meteor": "^1.3.9",
     "meteor-node-stubs": "~0.2.0"
+  },
+  "devDependencies": {
+    "angular-mocks": "^1.5.3"
   }
 }
-- 
2.7.4


From 67e54598537074f80232e32de1f7ce592898a333 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 14:45:42 +0200
Subject: [PATCH 058/414] Step 4.22: Tests of PartyAdd

---
 .../components/partyAdd/client/partyAdd.tests.js   | 53 ++++++++++++++++++++++
 1 file changed, 53 insertions(+)
 create mode 100644 imports/ui/components/partyAdd/client/partyAdd.tests.js

diff --git a/imports/ui/components/partyAdd/client/partyAdd.tests.js b/imports/ui/components/partyAdd/client/partyAdd.tests.js
new file mode 100644
index 0000000..cc1d35e
--- /dev/null
+++ b/imports/ui/components/partyAdd/client/partyAdd.tests.js
@@ -0,0 +1,53 @@
+import { name as PartyAdd } from '../partyAdd';
+import { Parties } from '../../../../api/parties';
+import 'angular-mocks';
+
+describe('PartyAdd', () => {
+  beforeEach(() => {
+    window.module(PartyAdd);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const party = {
+      name: 'Foo',
+      description: 'Birthday of Foo'
+    };
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartyAdd, {
+          $scope: $rootScope.$new(true)
+        });
+      });
+    });
+
+    describe('reset()', () => {
+      it('should clean up party object', () => {
+        controller.party = party;
+        controller.reset();
+
+        expect(controller.party).toEqual({});
+      });
+    });
+
+    describe('submit()', () => {
+      beforeEach(() => {
+        spyOn(Parties, 'insert');
+        spyOn(controller, 'reset').and.callThrough();
+
+        controller.party = party;
+
+        controller.submit();
+      });
+
+      it('should insert a new party', () => {
+        expect(Parties.insert).toHaveBeenCalledWith(party);
+      });
+
+      it('should call reset()', () => {
+        expect(controller.reset).toHaveBeenCalled();
+      });
+    });
+  });
+});
-- 
2.7.4


From 6d0883078b69e58828a6df096b505598cece2626 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 14:50:11 +0200
Subject: [PATCH 059/414] Step 4.23: Tests of PartyRemove

---
 .../partyRemove/client/partyRemove.tests.js        | 37 ++++++++++++++++++++++
 1 file changed, 37 insertions(+)
 create mode 100644 imports/ui/components/partyRemove/client/partyRemove.tests.js

diff --git a/imports/ui/components/partyRemove/client/partyRemove.tests.js b/imports/ui/components/partyRemove/client/partyRemove.tests.js
new file mode 100644
index 0000000..e8b6e97
--- /dev/null
+++ b/imports/ui/components/partyRemove/client/partyRemove.tests.js
@@ -0,0 +1,37 @@
+import { name as PartyRemove } from '../partyRemove';
+import { Parties } from '../../../../api/parties';
+import 'angular-mocks';
+
+describe('PartyRemove', () => {
+  beforeEach(() => {
+    window.module(PartyRemove);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const party = {
+      _id: 'partyId'
+    };
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartyRemove, {
+          $scope: $rootScope.$new(true)
+        }, {
+          party
+        });
+      });
+    });
+
+    describe('remove()', () => {
+      beforeEach(() => {
+        spyOn(Parties, 'remove');
+        controller.remove();
+      });
+
+      it('should remove a party', () => {
+        expect(Parties.remove).toHaveBeenCalledWith(party._id);
+      });
+    });
+  });
+});
-- 
2.7.4


From 79cf51e948bedb52b012280e07762765a83eba32 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:09:16 +0200
Subject: [PATCH 060/414] Step 5.1: Add ui-router

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 1555b86..b8cdb95 100644
--- a/package.json
+++ b/package.json
@@ -8,6 +8,7 @@
   "dependencies": {
     "angular": "^1.5.3",
     "angular-meteor": "^1.3.9",
+    "angular-ui-router": "^0.2.18",
     "meteor-node-stubs": "~0.2.0"
   },
   "devDependencies": {
-- 
2.7.4


From 8cb12e7eed2824fdfc25b13d84583a567061dce5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:10:34 +0200
Subject: [PATCH 061/414] Step 5.2: Add uiRouter to Socially

---
 imports/ui/components/socially/socially.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index 2a99481..7cd7e96 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -1,5 +1,6 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
+import uiRouter from 'angular-ui-router';
 
 import template from './socially.html';
 import { name as PartiesList } from '../partiesList/partiesList';
@@ -11,6 +12,7 @@ const name = 'socially';
 // create a module
 export default angular.module(name, [
   angularMeteor,
+  uiRouter,
   PartiesList
 ]).component(name, {
   template,
-- 
2.7.4


From e4eac6e1a065b907ead3250834440caf7ac7528f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:11:08 +0200
Subject: [PATCH 062/414] Step 5.3: Add base tag to main template

---
 client/index.html | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/client/index.html b/client/index.html
index e6d21ea..806f6ab 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,3 +1,6 @@
+<head>
+  <base href="/">
+</head>
 <body ng-app="socially" ng-strict-di="">
   <socially></socially>
 </body>
-- 
2.7.4


From 8d8f46e14e8abe6509882e0c5e8fec1465530041 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:11:52 +0200
Subject: [PATCH 063/414] Step 5.4: Add uiView to Socially view

---
 imports/ui/components/socially/socially.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.html b/imports/ui/components/socially/socially.html
index 5e9673b..19b303a 100644
--- a/imports/ui/components/socially/socially.html
+++ b/imports/ui/components/socially/socially.html
@@ -1 +1 @@
-<parties-list></parties-list>
+<div ui-view=""></div>
-- 
2.7.4


From 9bc32bb62efdbed05ddb866b2ecc90e4a424c3d4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:13:54 +0200
Subject: [PATCH 064/414] Step 5.5: Define `parties` route

---
 imports/ui/components/partiesList/partiesList.js | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index d5d132a..54e8ad3 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -1,5 +1,6 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
+import uiRouter from 'angular-ui-router';
 
 import template from './partiesList.html';
 import { Parties } from '../../../api/parties';
@@ -25,10 +26,21 @@ const name = 'partiesList';
 // create a module
 export default angular.module(name, [
   angularMeteor,
+  uiRouter,
   PartyAdd,
   PartyRemove
 ]).component(name, {
   template,
   controllerAs: name,
   controller: PartiesList
-});
+})
+  .config(config);
+
+function config($stateProvider) {
+  'ngInject';
+  $stateProvider
+    .state('parties', {
+      url: '/parties',
+      template: '<parties-list></parties-list>'
+    });
+}
-- 
2.7.4


From 0fa2bbf009df7074d202202ba60526c3052a61d4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:15:19 +0200
Subject: [PATCH 065/414] Step 5.6: Set html5Mode and `parties` as default
 route

---
 imports/ui/components/socially/socially.js | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index 7cd7e96..b064f0d 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -18,4 +18,13 @@ export default angular.module(name, [
   template,
   controllerAs: name,
   controller: Socially
-});
+})
+  .config(config);
+
+function config($locationProvider, $urlRouterProvider) {
+  'ngInject';
+
+  $locationProvider.html5Mode(true);
+
+  $urlRouterProvider.otherwise('/parties');
+}
-- 
2.7.4


From e17eb2bc88fbac024ba61c6beb95326350aa5b23 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:16:09 +0200
Subject: [PATCH 066/414] Step 5.7: Create view for Navigation component

---
 imports/ui/components/navigation/navigation.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/navigation/navigation.html

diff --git a/imports/ui/components/navigation/navigation.html b/imports/ui/components/navigation/navigation.html
new file mode 100644
index 0000000..def2640
--- /dev/null
+++ b/imports/ui/components/navigation/navigation.html
@@ -0,0 +1,3 @@
+<h1>
+  <a href="/parties">Home</a>
+</h1>
-- 
2.7.4


From 013a522bb91efc95649394fdb2b1326400ea6bda Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:17:01 +0200
Subject: [PATCH 067/414] Step 5.8: Create Navigation component

---
 imports/ui/components/navigation/navigation.js | 14 ++++++++++++++
 1 file changed, 14 insertions(+)
 create mode 100644 imports/ui/components/navigation/navigation.js

diff --git a/imports/ui/components/navigation/navigation.js b/imports/ui/components/navigation/navigation.js
new file mode 100644
index 0000000..5e33f59
--- /dev/null
+++ b/imports/ui/components/navigation/navigation.js
@@ -0,0 +1,14 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import template from './navigation.html';
+
+const name = 'navigation';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name
+});
-- 
2.7.4


From f98554396ffc5b158c3f44701c90db23689fbeb4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:17:37 +0200
Subject: [PATCH 068/414] Step 5.9: Implement Navigation in the view

---
 imports/ui/components/socially/socially.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/socially/socially.html b/imports/ui/components/socially/socially.html
index 19b303a..7fdb2de 100644
--- a/imports/ui/components/socially/socially.html
+++ b/imports/ui/components/socially/socially.html
@@ -1 +1,3 @@
+<navigation></navigation>
+
 <div ui-view=""></div>
-- 
2.7.4


From 07f6427ddf365f56032b29c5b21c67301fc11748 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:18:12 +0200
Subject: [PATCH 069/414] Step 5.10: Add Navigation to Socially

---
 imports/ui/components/socially/socially.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index b064f0d..c035c49 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -4,6 +4,7 @@ import uiRouter from 'angular-ui-router';
 
 import template from './socially.html';
 import { name as PartiesList } from '../partiesList/partiesList';
+import { name as Navigation } from '../navigation/navigation';
 
 class Socially {}
 
@@ -13,7 +14,8 @@ const name = 'socially';
 export default angular.module(name, [
   angularMeteor,
   uiRouter,
-  PartiesList
+  PartiesList,
+  Navigation
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From b17791fb986ddfba48af04afca501f892ed3e93e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:19:42 +0200
Subject: [PATCH 070/414] Step 5.11: Create view for the PartyDetails

---
 imports/ui/components/partyDetails/partyDetails.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 imports/ui/components/partyDetails/partyDetails.html

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
new file mode 100644
index 0000000..7fcd6c9
--- /dev/null
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -0,0 +1 @@
+The party you selected is: {{ partyDetails.partyId }}
-- 
2.7.4


From cab35ed7e6c58768d90aeb6f342af58511ffbf98 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:21:42 +0200
Subject: [PATCH 071/414] Step 5.12: Create PartyDetails

---
 imports/ui/components/partyDetails/partyDetails.js | 24 ++++++++++++++++++++++
 1 file changed, 24 insertions(+)
 create mode 100644 imports/ui/components/partyDetails/partyDetails.js

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
new file mode 100644
index 0000000..de7b7bb
--- /dev/null
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -0,0 +1,24 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+import uiRouter from 'angular-ui-router';
+
+import template from './partyDetails.html';
+
+class PartyDetails {
+  constructor($stateParams) {
+    'ngInject';
+
+    this.partyId = $stateParams.partyId;
+  }
+}
+
+const name = 'partyDetails';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name,
+  controller: PartyDetails
+});
-- 
2.7.4


From 84f056a1a1cbbd28eebc269f3d2144efe74348ab Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:22:56 +0200
Subject: [PATCH 072/414] Step 5.13: Set partyDetails state

---
 imports/ui/components/partyDetails/partyDetails.js | 15 +++++++++++++--
 1 file changed, 13 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index de7b7bb..89b01b2 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -16,9 +16,20 @@ const name = 'partyDetails';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor
+  angularMeteor,
+  uiRouter
 ]).component(name, {
   template,
   controllerAs: name,
   controller: PartyDetails
-});
+})
+  .config(config);
+
+function config($stateProvider) {
+  'ngInject';
+
+  $stateProvider.state('partyDetails', {
+    url: '/parties/:partyId',
+    template: '<party-details></party-details>'
+  });
+}
-- 
2.7.4


From 1decea84cef5491b4e7637c93b0ab5a8c749483a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:23:41 +0200
Subject: [PATCH 073/414] Step 5.14: Add PartyDetails to Socially

---
 imports/ui/components/socially/socially.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index c035c49..db55196 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -4,6 +4,7 @@ import uiRouter from 'angular-ui-router';
 
 import template from './socially.html';
 import { name as PartiesList } from '../partiesList/partiesList';
+import { name as PartyDetails } from '../partyDetails/partyDetails';
 import { name as Navigation } from '../navigation/navigation';
 
 class Socially {}
@@ -15,6 +16,7 @@ export default angular.module(name, [
   angularMeteor,
   uiRouter,
   PartiesList,
+  PartyDetails,
   Navigation
 ]).component(name, {
   template,
-- 
2.7.4


From d799729ab8e9691a60ee447b9462cacdb2b0e992 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:25:15 +0200
Subject: [PATCH 074/414] Step 5.15: Add link

---
 imports/ui/components/partiesList/partiesList.html | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 24dedb1..c1b07e2 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -2,7 +2,9 @@
 
 <ul>
   <li ng-repeat="party in partiesList.parties">
-    {{party.name}}
+    <a ui-sref="partyDetails({ partyId: party._id })">
+      {{party.name}}
+    </a>
     <p>{{party.description}}</p>
     <party-remove party="party"></party-remove>
   </li>
-- 
2.7.4


From 7c179447a538e4baf5f59aeeefda6de39f35fc1c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:30:15 +0200
Subject: [PATCH 075/414] Step 6.1: Add party helper

---
 imports/ui/components/partyDetails/partyDetails.js | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 89b01b2..8027663 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -3,12 +3,23 @@ import angularMeteor from 'angular-meteor';
 import uiRouter from 'angular-ui-router';
 
 import template from './partyDetails.html';
+import { Parties } from '../../../api/parties';
 
 class PartyDetails {
-  constructor($stateParams) {
+  constructor($stateParams, $scope, $reactive) {
     'ngInject';
 
+    $reactive(this).attach($scope);
+
     this.partyId = $stateParams.partyId;
+
+    this.helpers({
+      party() {
+        return Parties.findOne({
+          _id: $stateParams.partyId
+        });
+      }
+    });
   }
 }
 
-- 
2.7.4


From b3df62368f40735d508ae25e49dbbbdb65ca86b6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:33:34 +0200
Subject: [PATCH 076/414] Step 6.2: Add form with the party details to the
 party details page

---
 imports/ui/components/partyDetails/partyDetails.html | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index 7fcd6c9..650e315 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -1 +1,5 @@
-The party you selected is: {{ partyDetails.partyId }}
+The party you selected is:
+<form>
+  Party name: <input type="text" ng-model="partyDetails.party.name" />
+  Description: <input type="text" ng-model="partyDetails.party.description" />
+</form>
-- 
2.7.4


From c03f9ef1619cc379078f41fefaa1ea96e701cd59 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:34:10 +0200
Subject: [PATCH 077/414] Step 6.3: Add save and back buttons to the view

---
 imports/ui/components/partyDetails/partyDetails.html | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index 650e315..3e308f6 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -2,4 +2,7 @@ The party you selected is:
 <form>
   Party name: <input type="text" ng-model="partyDetails.party.name" />
   Description: <input type="text" ng-model="partyDetails.party.description" />
+  <button ng-click="partyDetails.save()">Save</button>
 </form>
+
+<button ui-sref="parties">Back</button>
-- 
2.7.4


From 3da5c0507711da56b36d208a68c3f635c337a6a6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:35:38 +0200
Subject: [PATCH 078/414] Step 6.4: Implement save button on the component
 logic

---
 imports/ui/components/partyDetails/partyDetails.js | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 8027663..af77e46 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -21,6 +21,17 @@ class PartyDetails {
       }
     });
   }
+
+  save() {
+    Parties.update({
+      _id: this.party._id
+    }, {
+      $set: {
+        name: this.party.name,
+        description: this.party.description
+      }
+    });
+  }
 }
 
 const name = 'partyDetails';
-- 
2.7.4


From d01bd065875fd10d27b431e29fb7d8fe4ad3c30c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:36:24 +0200
Subject: [PATCH 079/414] Step 6.5: Handle success and fail for data actions

---
 imports/ui/components/partyDetails/partyDetails.js | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index af77e46..e63b6ef 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -30,6 +30,12 @@ class PartyDetails {
         name: this.party.name,
         description: this.party.description
       }
+    }, (error) => {
+      if (error) {
+        console.log('Oops, unable to update the party...');
+      } else {
+        console.log('Done!');
+      }
     });
   }
 }
-- 
2.7.4


From d5ce4400ee080a887edc17779ad390039e31ccf3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 15:11:57 +0200
Subject: [PATCH 080/414] Step 6.6: Tests of PartyDetails

---
 .../partyDetails/client/partyDetails.tests.js      | 49 ++++++++++++++++++++++
 1 file changed, 49 insertions(+)
 create mode 100644 imports/ui/components/partyDetails/client/partyDetails.tests.js

diff --git a/imports/ui/components/partyDetails/client/partyDetails.tests.js b/imports/ui/components/partyDetails/client/partyDetails.tests.js
new file mode 100644
index 0000000..997304e
--- /dev/null
+++ b/imports/ui/components/partyDetails/client/partyDetails.tests.js
@@ -0,0 +1,49 @@
+import { name as PartyDetails } from '../partyDetails';
+import { Parties } from '../../../../api/parties';
+import 'angular-mocks';
+
+describe('PartyDetails', () => {
+  beforeEach(() => {
+    window.module(PartyDetails);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const party = {
+      _id: 'partyId',
+      name: 'Foo',
+      description: 'Birthday of Foo'
+    };
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartyDetails, {
+          $scope: $rootScope.$new(true)
+        });
+      });
+    });
+
+    describe('save()', () => {
+      beforeEach(() => {
+        spyOn(Parties, 'update');
+        controller.party = party;
+        controller.save();
+      });
+
+      it('should update a proper party', () => {
+        expect(Parties.update.calls.mostRecent().args[0]).toEqual({
+          _id: party._id
+        });
+      });
+
+      it('should update with proper modifier', () => {
+        expect(Parties.update.calls.mostRecent().args[1]).toEqual({
+          $set: {
+            name: party.name,
+            description: party.description
+          }
+        });
+      });
+    });
+  });
+});
-- 
2.7.4


From 59146ad3a9005a17ea1009d5b88e53295be944fc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:38:12 +0200
Subject: [PATCH 081/414] Step 7.1: Move startup to imports

---
 imports/startup/fixtures.js | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 imports/startup/fixtures.js

diff --git a/imports/startup/fixtures.js b/imports/startup/fixtures.js
new file mode 100644
index 0000000..d92fb48
--- /dev/null
+++ b/imports/startup/fixtures.js
@@ -0,0 +1,21 @@
+import { Meteor } from 'meteor/meteor';
+import { Parties } from '../api/parties';
+
+Meteor.startup(() => {
+  if (Parties.find().count() === 0) {
+    const parties = [{
+      'name': 'Dubstep-Free Zone',
+      'description': 'Fast just got faster with Nexus S.'
+    }, {
+      'name': 'All dubstep all the time',
+      'description': 'Get it on!'
+    }, {
+      'name': 'Savage lounging',
+      'description': 'Leisure suit required. And only fiercest manners.'
+    }];
+
+    parties.forEach((party) => {
+      Parties.insert(party)
+    });
+  }
+});
-- 
2.7.4


From f69cf30c023d92c31d46702b3d179950366398a6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:39:27 +0200
Subject: [PATCH 082/414] Step 7.2: Create main entry point on server-side

---
 server/main.js | 22 +---------------------
 1 file changed, 1 insertion(+), 21 deletions(-)

diff --git a/server/main.js b/server/main.js
index 6ce39cd..40efcd1 100644
--- a/server/main.js
+++ b/server/main.js
@@ -1,21 +1 @@
-import { Meteor } from 'meteor/meteor';
-import { Parties } from '../imports/api/parties';
-
-Meteor.startup(() => {
-  if (Parties.find().count() === 0) {
-    const parties = [{
-      'name': 'Dubstep-Free Zone',
-      'description': 'Fast just got faster with Nexus S.'
-    }, {
-      'name': 'All dubstep all the time',
-      'description': 'Get it on!'
-    }, {
-      'name': 'Savage lounging',
-      'description': 'Leisure suit required. And only fiercest manners.'
-    }];
-
-    parties.forEach((party) => {
-      Parties.insert(party)
-    });
-  }
-});
+import '../imports/startup/fixtures';
-- 
2.7.4


From 05f6d53fb7f33718050d77a7843e09e2dee6a63e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:40:16 +0200
Subject: [PATCH 083/414] Step 7.3: Import Parties on server-side to be
 synchronized

---
 server/main.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.js b/server/main.js
index 40efcd1..d4c97f0 100644
--- a/server/main.js
+++ b/server/main.js
@@ -1 +1,2 @@
 import '../imports/startup/fixtures';
+import '../imports/api/parties';
-- 
2.7.4


From 8a9c4c546d150aaa7a3f865e95ed90493fdc13fe Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:41:57 +0200
Subject: [PATCH 084/414] Step 8.1: Remove `insecure` package

---
 .meteor/packages | 1 -
 .meteor/versions | 1 -
 2 files changed, 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 026de87..1b00904 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -16,7 +16,6 @@ standard-minifier-js    # JS minifier run for production mode
 es5-shim                # ECMAScript 5 compatibility for older browsers.
 
 autopublish             # Publish all data to the clients (for prototyping)
-insecure                # Allow all DB writes from clients (for prototyping)
 pbastowski:angular-babel
 urigo:static-templates
 sanjo:jasmine
diff --git a/.meteor/versions b/.meteor/versions
index af73cb2..b20c468 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -30,7 +30,6 @@ html-tools@1.0.11
 htmljs@1.0.11
 http@1.1.8
 id-map@1.0.8
-insecure@1.0.7
 jquery@1.11.9
 launch-screen@1.0.12
 less@2.5.7
-- 
2.7.4


From fe22b69f6478d7c7d7e141b804a77e44079e5430 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:42:53 +0200
Subject: [PATCH 085/414] Step 8.2: Add `accounts-password`

---
 .meteor/packages |  1 +
 .meteor/versions | 10 ++++++++++
 2 files changed, 11 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 1b00904..8bac382 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -21,3 +21,4 @@ urigo:static-templates
 sanjo:jasmine
 velocity:html-reporter
 velocity:console-reporter
+accounts-password
diff --git a/.meteor/versions b/.meteor/versions
index b20c468..9f2aa1c 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,3 +1,5 @@
+accounts-base@1.2.12_1
+accounts-password@1.3.0
 allow-deny@1.0.5
 amplify@1.0.0
 autopublish@1.0.7
@@ -16,12 +18,14 @@ check@1.2.3
 ddp@1.2.5
 ddp-client@1.2.9
 ddp-common@1.2.6
+ddp-rate-limiter@1.0.5
 ddp-server@1.2.10
 deps@1.0.12
 diff-sequence@1.0.6
 ecmascript@0.5.8_1
 ecmascript-runtime@0.3.14_1
 ejson@1.0.12
+email@1.1.17_1
 es5-shim@4.6.14_1
 fastclick@1.0.12
 geojson-utils@1.0.9
@@ -34,6 +38,7 @@ jquery@1.11.9
 launch-screen@1.0.12
 less@2.5.7
 livedata@1.0.18
+localstorage@1.0.11
 logging@1.1.15_1
 meteor@1.2.17_1
 meteor-base@1.0.4
@@ -46,21 +51,26 @@ modules@0.7.6_1
 modules-runtime@0.7.6_1
 mongo@1.1.12_5
 mongo-id@1.0.5
+npm-bcrypt@0.9.1_1
 npm-mongo@2.2.10_1
 observe-sequence@1.0.13
 ordered-dict@1.0.8
 pbastowski:angular-babel@1.3.6
 promise@0.8.7
 random@1.0.10
+rate-limit@1.0.5
 reactive-dict@1.1.8
 reactive-var@1.0.10
 reload@1.1.10
 retry@1.0.8
 routepolicy@1.0.11
 sanjo:jasmine@1.0.1
+service-configuration@1.0.10
 session@1.1.6
+sha@1.0.8
 spacebars@1.0.13
 spacebars-compiler@1.0.13
+srp@1.0.9
 standard-minifier-css@1.2.1
 standard-minifier-js@1.2.0_1
 templating@1.1.14
-- 
2.7.4


From 59a75f3c5ef18055f309d5f3339d07e66ec583d3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:44:10 +0200
Subject: [PATCH 086/414] Step 8.3: Add `dotansimha:accounts-ui-angular`

---
 .meteor/packages | 1 +
 .meteor/versions | 5 +++++
 2 files changed, 6 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 8bac382..6069c29 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -22,3 +22,4 @@ sanjo:jasmine
 velocity:html-reporter
 velocity:console-reporter
 accounts-password
+dotansimha:accounts-ui-angular
diff --git a/.meteor/versions b/.meteor/versions
index 9f2aa1c..b8b2453 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,5 +1,7 @@
 accounts-base@1.2.12_1
 accounts-password@1.3.0
+accounts-ui@1.1.8
+accounts-ui-unstyled@1.1.11
 allow-deny@1.0.5
 amplify@1.0.0
 autopublish@1.0.7
@@ -9,6 +11,7 @@ babel-runtime@0.1.11_1
 base64@1.0.9
 binary-heap@1.0.9
 blaze@2.1.9
+blaze-html-templates@1.0.4
 blaze-tools@1.0.10
 boilerplate-generator@1.0.10
 caching-compiler@1.0.6
@@ -22,6 +25,7 @@ ddp-rate-limiter@1.0.5
 ddp-server@1.2.10
 deps@1.0.12
 diff-sequence@1.0.6
+dotansimha:accounts-ui-angular@0.0.4
 ecmascript@0.5.8_1
 ecmascript-runtime@0.3.14_1
 ejson@1.0.12
@@ -75,6 +79,7 @@ standard-minifier-css@1.2.1
 standard-minifier-js@1.2.0_1
 templating@1.1.14
 templating-tools@1.0.5
+tmeasday:check-npm-versions@0.1.1
 tracker@1.1.0
 ui@1.0.12
 underscore@1.0.9
-- 
2.7.4


From 013483e61e4c357306270f2a43e3d166e44f637e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:44:45 +0200
Subject: [PATCH 087/414] Step 8.4: Add a dependecy for accounts-ui package

---
 imports/ui/components/socially/socially.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index db55196..e539bf1 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -17,7 +17,8 @@ export default angular.module(name, [
   uiRouter,
   PartiesList,
   PartyDetails,
-  Navigation
+  Navigation,
+  'accounts.ui'
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 1d43766709d7033a7ef36885ec5611d6d237cc0f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 11:45:52 +0200
Subject: [PATCH 088/414] Step 8.5: Add usage for login-buttons directive

---
 imports/ui/components/socially/socially.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/socially/socially.html b/imports/ui/components/socially/socially.html
index 7fdb2de..83c40e7 100644
--- a/imports/ui/components/socially/socially.html
+++ b/imports/ui/components/socially/socially.html
@@ -1,3 +1,5 @@
+<login-buttons></login-buttons>
+
 <navigation></navigation>
 
 <div ui-view=""></div>
-- 
2.7.4


From 9e9afcacc0c312ffa4b1cf25249137a2c60cd8bd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:01:43 +0200
Subject: [PATCH 089/414] Step 8.6: Add allow logic to the model

---
 imports/api/parties.js | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/imports/api/parties.js b/imports/api/parties.js
index e308632..3e283c1 100644
--- a/imports/api/parties.js
+++ b/imports/api/parties.js
@@ -1,3 +1,15 @@
 import { Mongo } from 'meteor/mongo';
 
 export const Parties = new Mongo.Collection('parties');
+
+Parties.allow({
+  insert(userId, party) {
+    return userId && party.owner === userId;
+  },
+  update(userId, party, fields, modifier) {
+    return userId && party.owner === userId;
+  },
+  remove(userId, party) {
+    return userId && party.owner === userId;
+  }
+});
-- 
2.7.4


From bfd63188422c595becb27cf7b5d781209d1a4510 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:02:37 +0200
Subject: [PATCH 090/414] Step 8.7: Add current user to the new party

---
 imports/ui/components/partyAdd/partyAdd.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partyAdd/partyAdd.js b/imports/ui/components/partyAdd/partyAdd.js
index aa9b76f..528d938 100644
--- a/imports/ui/components/partyAdd/partyAdd.js
+++ b/imports/ui/components/partyAdd/partyAdd.js
@@ -1,6 +1,8 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
+import { Meteor } from 'meteor/meteor';
+
 import template from './partyAdd.html';
 import { Parties } from '../../../api/parties';
 
@@ -10,6 +12,7 @@ class PartyAdd {
   }
 
   submit() {
+    this.party.owner = Meteor.userId();
     Parties.insert(this.party);
     this.reset();
   }
-- 
2.7.4


From b673b2ceda2a5f12851abad0f950b2ddc205ea4d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:03:33 +0200
Subject: [PATCH 091/414] Step 8.8: Add facebook and twitter

---
 .meteor/packages |  2 ++
 .meteor/versions | 12 ++++++++++--
 2 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 6069c29..8ae4a69 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -23,3 +23,5 @@ velocity:html-reporter
 velocity:console-reporter
 accounts-password
 dotansimha:accounts-ui-angular
+accounts-facebook
+accounts-twitter
diff --git a/.meteor/versions b/.meteor/versions
index b8b2453..04f7979 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -1,5 +1,8 @@
 accounts-base@1.2.12_1
+accounts-facebook@1.0.10
+accounts-oauth@1.1.13
 accounts-password@1.3.0
+accounts-twitter@1.1.11
 accounts-ui@1.1.8
 accounts-ui-unstyled@1.1.11
 allow-deny@1.0.5
@@ -31,12 +34,13 @@ ecmascript-runtime@0.3.14_1
 ejson@1.0.12
 email@1.1.17_1
 es5-shim@4.6.14_1
+facebook@1.2.9
 fastclick@1.0.12
 geojson-utils@1.0.9
 hot-code-push@1.0.4
 html-tools@1.0.11
 htmljs@1.0.11
-http@1.1.8
+http@1.2.9_1
 id-map@1.0.8
 jquery@1.11.9
 launch-screen@1.0.12
@@ -57,6 +61,9 @@ mongo@1.1.12_5
 mongo-id@1.0.5
 npm-bcrypt@0.9.1_1
 npm-mongo@2.2.10_1
+oauth@1.1.11
+oauth1@1.1.10
+oauth2@1.1.10
 observe-sequence@1.0.13
 ordered-dict@1.0.8
 pbastowski:angular-babel@1.3.6
@@ -77,10 +84,11 @@ spacebars-compiler@1.0.13
 srp@1.0.9
 standard-minifier-css@1.2.1
 standard-minifier-js@1.2.0_1
-templating@1.1.14
+templating@1.2.14_1
 templating-tools@1.0.5
 tmeasday:check-npm-versions@0.1.1
 tracker@1.1.0
+twitter@1.1.12
 ui@1.0.12
 underscore@1.0.9
 urigo:static-html-compiler@0.1.8
-- 
2.7.4


From 37ba26079467a4e386010f45c8776dabe754273a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:05:29 +0200
Subject: [PATCH 092/414] Step 8.9: Add permissions limit to the party details
 page

---
 imports/ui/components/partyDetails/partyDetails.js | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index e63b6ef..565aa4b 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -2,6 +2,8 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 import uiRouter from 'angular-ui-router';
 
+import { Meteor } from 'meteor/meteor';
+
 import template from './partyDetails.html';
 import { Parties } from '../../../api/parties';
 
@@ -58,6 +60,15 @@ function config($stateProvider) {
 
   $stateProvider.state('partyDetails', {
     url: '/parties/:partyId',
-    template: '<party-details></party-details>'
+    template: '<party-details></party-details>',
+    resolve: {
+      currentUser($q) {
+        if (Meteor.userId() === null) {
+          return $q.reject();
+        } else {
+          return $q.resolve();
+        }
+      }
+    }
   });
 }
-- 
2.7.4


From ef8fe97dfb3e0e2828b9d9d04a109366fc20579d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 26 Apr 2016 13:20:33 +0200
Subject: [PATCH 093/414] Step 8.10: Add the reason of rejection

---
 imports/ui/components/partyDetails/partyDetails.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 565aa4b..1767720 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -64,7 +64,7 @@ function config($stateProvider) {
     resolve: {
       currentUser($q) {
         if (Meteor.userId() === null) {
-          return $q.reject();
+          return $q.reject('AUTH_REQUIRED');
         } else {
           return $q.resolve();
         }
-- 
2.7.4


From 230a6e479b16b23ecb72dbf86079d207f34d036c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Tue, 26 Apr 2016 13:22:23 +0200
Subject: [PATCH 094/414] Step 8.11: Handle `AUTH_REQUIRED`

---
 imports/ui/components/socially/socially.js | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index e539bf1..dec6060 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -24,7 +24,8 @@ export default angular.module(name, [
   controllerAs: name,
   controller: Socially
 })
-  .config(config);
+  .config(config)
+  .run(run);
 
 function config($locationProvider, $urlRouterProvider) {
   'ngInject';
@@ -33,3 +34,15 @@ function config($locationProvider, $urlRouterProvider) {
 
   $urlRouterProvider.otherwise('/parties');
 }
+
+function run($rootScope, $state) {
+  'ngInject';
+
+  $rootScope.$on('$stateChangeError',
+    (event, toState, toParams, fromState, fromParams, error) => {
+      if (error === 'AUTH_REQUIRED') {
+        $state.go('parties');
+      }
+    }
+  );
+}
-- 
2.7.4


From a2c19f9e770e3189813badb86033fa7b6cf2f8d1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:08:59 +0200
Subject: [PATCH 095/414] Step 9.1: Remove `autopublish`

---
 .meteor/packages | 1 -
 .meteor/versions | 1 -
 2 files changed, 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 8ae4a69..9e4bf08 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -15,7 +15,6 @@ standard-minifier-css   # CSS minifier run for production mode
 standard-minifier-js    # JS minifier run for production mode
 es5-shim                # ECMAScript 5 compatibility for older browsers.
 
-autopublish             # Publish all data to the clients (for prototyping)
 pbastowski:angular-babel
 urigo:static-templates
 sanjo:jasmine
diff --git a/.meteor/versions b/.meteor/versions
index 04f7979..cc0865f 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -7,7 +7,6 @@ accounts-ui@1.1.8
 accounts-ui-unstyled@1.1.11
 allow-deny@1.0.5
 amplify@1.0.0
-autopublish@1.0.7
 autoupdate@1.2.11
 babel-compiler@6.9.1_1
 babel-runtime@0.1.11_1
-- 
2.7.4


From bbcb041eaf629dcd496c98ae236721e7b77c89be Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:14:30 +0200
Subject: [PATCH 096/414] Step 9.2: Add the `parties` publication to the server

---
 imports/api/parties/publish.js | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)
 create mode 100644 imports/api/parties/publish.js

diff --git a/imports/api/parties/publish.js b/imports/api/parties/publish.js
new file mode 100644
index 0000000..590f23b
--- /dev/null
+++ b/imports/api/parties/publish.js
@@ -0,0 +1,31 @@
+import { Meteor } from 'meteor/meteor';
+
+import { Parties } from './collection';
+
+if (Meteor.isServer) {
+  Meteor.publish('parties', function() {
+    const selector = {
+      $or: [{
+        // the public parties
+        $and: [{
+          public: true
+        }, {
+          public: {
+            $exists: true
+          }
+        }]
+      }, {
+        // when logged in user is the owner
+        $and: [{
+          owner: this.userId
+        }, {
+          owner: {
+            $exists: true
+          }
+        }]
+      }]
+    };
+
+    return Parties.find(selector);
+  });
+}
-- 
2.7.4


From 9e168b20bdba85c0b494488ee0447b0dd151275f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:15:16 +0200
Subject: [PATCH 097/414] Step 9.3: Move Parties to collection.js

---
 imports/api/parties/collection.js | 15 +++++++++++++++
 1 file changed, 15 insertions(+)
 create mode 100644 imports/api/parties/collection.js

diff --git a/imports/api/parties/collection.js b/imports/api/parties/collection.js
new file mode 100644
index 0000000..3e283c1
--- /dev/null
+++ b/imports/api/parties/collection.js
@@ -0,0 +1,15 @@
+import { Mongo } from 'meteor/mongo';
+
+export const Parties = new Mongo.Collection('parties');
+
+Parties.allow({
+  insert(userId, party) {
+    return userId && party.owner === userId;
+  },
+  update(userId, party, fields, modifier) {
+    return userId && party.owner === userId;
+  },
+  remove(userId, party) {
+    return userId && party.owner === userId;
+  }
+});
-- 
2.7.4


From 3a977806f0a40fca1ef84bc0e40b3028aa7b6886 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:15:55 +0200
Subject: [PATCH 098/414] Step 9.4: Create entry point for Parties

---
 imports/api/parties/index.js | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/api/parties/index.js

diff --git a/imports/api/parties/index.js b/imports/api/parties/index.js
new file mode 100644
index 0000000..5f7ae00
--- /dev/null
+++ b/imports/api/parties/index.js
@@ -0,0 +1,3 @@
+import './publish';
+
+export * from './collection';
-- 
2.7.4


From 3de684a5535f158a7cfe39eaa9ca301a321e6ae5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:16:11 +0200
Subject: [PATCH 099/414] Step 9.5: Remove old parties.js

---
 imports/api/parties.js | 15 ---------------
 1 file changed, 15 deletions(-)
 delete mode 100644 imports/api/parties.js

diff --git a/imports/api/parties.js b/imports/api/parties.js
deleted file mode 100644
index 3e283c1..0000000
--- a/imports/api/parties.js
+++ /dev/null
@@ -1,15 +0,0 @@
-import { Mongo } from 'meteor/mongo';
-
-export const Parties = new Mongo.Collection('parties');
-
-Parties.allow({
-  insert(userId, party) {
-    return userId && party.owner === userId;
-  },
-  update(userId, party, fields, modifier) {
-    return userId && party.owner === userId;
-  },
-  remove(userId, party) {
-    return userId && party.owner === userId;
-  }
-});
-- 
2.7.4


From 1c4d5a62405019b26b23422e579f811a878fa8a4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:18:56 +0200
Subject: [PATCH 100/414] Step 9.6: Add the `parties` subscription

---
 imports/ui/components/partiesList/partiesList.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 54e8ad3..7aced57 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -13,6 +13,8 @@ class PartiesList {
 
     $reactive(this).attach($scope);
 
+    this.subscribe('parties');
+
     this.helpers({
       parties() {
         return Parties.find({});
-- 
2.7.4


From 3432038372bd592288c5a3cd9a77cdc3783ecc6b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:20:20 +0200
Subject: [PATCH 101/414] Step 9.7: Add public party checkbox to the add new
 party form

---
 imports/ui/components/partyAdd/partyAdd.html | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/imports/ui/components/partyAdd/partyAdd.html b/imports/ui/components/partyAdd/partyAdd.html
index 3508bef..4db1888 100644
--- a/imports/ui/components/partyAdd/partyAdd.html
+++ b/imports/ui/components/partyAdd/partyAdd.html
@@ -7,5 +7,9 @@
     Description:
   </label>
   <input type="text" ng-model="partyAdd.party.description" />
+  <label>
+    Public Party?
+  </label>
+  <input type="checkbox" ng-model="partyAdd.party.public">
   <button ng-click="partyAdd.submit()">Add Party!</button>
 </form>
-- 
2.7.4


From c844adb2f93f004ace7e66d0192cbb6b0409d51f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:20:49 +0200
Subject: [PATCH 102/414] Step 9.8: Add is public checkbox to the party details
 view

---
 imports/ui/components/partyDetails/partyDetails.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index 3e308f6..f6eabb7 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -2,6 +2,7 @@ The party you selected is:
 <form>
   Party name: <input type="text" ng-model="partyDetails.party.name" />
   Description: <input type="text" ng-model="partyDetails.party.description" />
+  Public Party? <input type="checkbox" ng-model="partyDetails.party.public">
   <button ng-click="partyDetails.save()">Save</button>
 </form>
 
-- 
2.7.4


From 33fce1b348550bfbe5c64e983cb4f47871928e08 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:21:31 +0200
Subject: [PATCH 103/414] Step 9.9: Add is public checkbox to the party details
 component

---
 imports/ui/components/partyDetails/partyDetails.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 1767720..903ec9d 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -30,7 +30,8 @@ class PartyDetails {
     }, {
       $set: {
         name: this.party.name,
-        description: this.party.description
+        description: this.party.description,
+        public: this.party.public
       }
     }, (error) => {
       if (error) {
-- 
2.7.4


From b649210c623b1a4c929d795d0406480cd9928131 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:22:34 +0200
Subject: [PATCH 104/414] Step 9.10: Add `parties` subscription to the
 PartyDetails

---
 imports/ui/components/partyDetails/partyDetails.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 903ec9d..9c6a6f7 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -15,6 +15,8 @@ class PartyDetails {
 
     this.partyId = $stateParams.partyId;
 
+    this.subscribe('parties');
+
     this.helpers({
       party() {
         return Parties.findOne({
-- 
2.7.4


From fa91da2fdbccf56fde4df603fc022fc3dfad1bc9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:24:09 +0200
Subject: [PATCH 105/414] Step 9.11: Create the users publication

---
 imports/api/users.js | 12 ++++++++++++
 1 file changed, 12 insertions(+)
 create mode 100644 imports/api/users.js

diff --git a/imports/api/users.js b/imports/api/users.js
new file mode 100644
index 0000000..4c9fee9
--- /dev/null
+++ b/imports/api/users.js
@@ -0,0 +1,12 @@
+import { Meteor } from 'meteor/meteor';
+
+if (Meteor.isServer) {
+  Meteor.publish('users', function() {
+    return Meteor.users.find({}, {
+      fields: {
+        emails: 1,
+        profile: 1
+      }
+    });
+  });
+}
-- 
2.7.4


From 8262f3909febfcc8ca3e2af6a0c925aa31956c9c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:24:32 +0200
Subject: [PATCH 106/414] Step 9.12: Add `users` publication to the server-side

---
 server/main.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.js b/server/main.js
index d4c97f0..1acdc6c 100644
--- a/server/main.js
+++ b/server/main.js
@@ -1,2 +1,3 @@
 import '../imports/startup/fixtures';
 import '../imports/api/parties';
+import '../imports/api/users';
-- 
2.7.4


From 311ceaa0c10437984a111abb66464882030865a9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:26:29 +0200
Subject: [PATCH 107/414] Step 9.13: Add `users` subscription and helper

---
 imports/ui/components/partyDetails/partyDetails.js | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 9c6a6f7..a526c43 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -16,12 +16,16 @@ class PartyDetails {
     this.partyId = $stateParams.partyId;
 
     this.subscribe('parties');
+    this.subscribe('users');
 
     this.helpers({
       party() {
         return Parties.findOne({
           _id: $stateParams.partyId
         });
+      },
+      users() {
+        return Meteor.users.find({});
       }
     });
   }
-- 
2.7.4


From 5e74ca220f7823cdd9c680c6736b8a1795955424 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:27:20 +0200
Subject: [PATCH 108/414] Step 9.14: Add the users list to the party details
 view

---
 imports/ui/components/partyDetails/partyDetails.html | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index f6eabb7..d53f73f 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -7,3 +7,10 @@ The party you selected is:
 </form>
 
 <button ui-sref="parties">Back</button>
+
+<ul>
+  Users:
+  <li ng-repeat="user in partyDetails.users">
+    <div>{{ user.emails[0].address }}</div>
+  </li>
+</ul>
-- 
2.7.4


From 08e2b03ca5c1889c0d77abd3f0878936e36eb39a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 15:44:26 +0200
Subject: [PATCH 109/414] Step 9.15: Update tests of PartyAdd

---
 imports/ui/components/partyAdd/client/partyAdd.tests.js | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partyAdd/client/partyAdd.tests.js b/imports/ui/components/partyAdd/client/partyAdd.tests.js
index cc1d35e..76765c0 100644
--- a/imports/ui/components/partyAdd/client/partyAdd.tests.js
+++ b/imports/ui/components/partyAdd/client/partyAdd.tests.js
@@ -1,3 +1,4 @@
+import { Meteor } from 'meteor/meteor';
 import { name as PartyAdd } from '../partyAdd';
 import { Parties } from '../../../../api/parties';
 import 'angular-mocks';
@@ -11,7 +12,11 @@ describe('PartyAdd', () => {
     let controller;
     const party = {
       name: 'Foo',
-      description: 'Birthday of Foo'
+      description: 'Birthday of Foo',
+      public: true
+    };
+    const user = {
+      _id: 'userId'
     };
 
     beforeEach(() => {
@@ -20,6 +25,8 @@ describe('PartyAdd', () => {
           $scope: $rootScope.$new(true)
         });
       });
+
+      spyOn(Meteor, 'userId').and.returnValue(user._id);
     });
 
     describe('reset()', () => {
@@ -42,7 +49,12 @@ describe('PartyAdd', () => {
       });
 
       it('should insert a new party', () => {
-        expect(Parties.insert).toHaveBeenCalledWith(party);
+        expect(Parties.insert).toHaveBeenCalledWith({
+          name: party.name,
+          description: party.description,
+          public: party.public,
+          owner: user._id
+        });
       });
 
       it('should call reset()', () => {
-- 
2.7.4


From dda4cc470728c37cc041097bd2e1a88d5d8f4b81 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 15:45:37 +0200
Subject: [PATCH 110/414] Step 9.16: Update tests of PartyDetails

---
 imports/ui/components/partyDetails/client/partyDetails.tests.js | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partyDetails/client/partyDetails.tests.js b/imports/ui/components/partyDetails/client/partyDetails.tests.js
index 997304e..0f3aa3b 100644
--- a/imports/ui/components/partyDetails/client/partyDetails.tests.js
+++ b/imports/ui/components/partyDetails/client/partyDetails.tests.js
@@ -12,7 +12,8 @@ describe('PartyDetails', () => {
     const party = {
       _id: 'partyId',
       name: 'Foo',
-      description: 'Birthday of Foo'
+      description: 'Birthday of Foo',
+      public: true
     };
 
     beforeEach(() => {
@@ -40,7 +41,8 @@ describe('PartyDetails', () => {
         expect(Parties.update.calls.mostRecent().args[1]).toEqual({
           $set: {
             name: party.name,
-            description: party.description
+            description: party.description,
+            public: party.public
           }
         });
       });
-- 
2.7.4


From e6c2a1f2937fafa0ad777cd7f66a8ecb85d66351 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:29:01 +0200
Subject: [PATCH 111/414] Step 11.1: Update the module initialization

---
 client/main.js | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/client/main.js b/client/main.js
index 9a3c900..06731e1 100644
--- a/client/main.js
+++ b/client/main.js
@@ -1,5 +1,19 @@
 import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import { Parties } from '../collections/parties';
+
+import { Meteor } from 'meteor/meteor';
 
 import { name as Socially } from '../imports/ui/components/socially/socially';
+
+function onReady() {
+  angular.bootstrap(document, [
+    Socially
+  ], {
+    strictDi: true
+  });
+}
+
+if (Meteor.isCordova) {
+  angular.element(document).on('deviceready', onReady);
+} else {
+  angular.element(document).ready(onReady);
+}
-- 
2.7.4


From 8fe9d16645a127520b3bf696cdb65010fd08f04c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:29:45 +0200
Subject: [PATCH 112/414] Step 11.2: Remove the ngApp and ngStrictDi

---
 client/index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/client/index.html b/client/index.html
index 806f6ab..0a26426 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,6 +1,6 @@
 <head>
   <base href="/">
 </head>
-<body ng-app="socially" ng-strict-di="">
+<body>
   <socially></socially>
 </body>
-- 
2.7.4


From 0f18f70c7e43ac94e27a309b08ec32d3bda3390b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:32:51 +0200
Subject: [PATCH 113/414] Step 12.1: Add options to the parties publish

---
 imports/api/parties/publish.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/api/parties/publish.js b/imports/api/parties/publish.js
index 590f23b..65b8f38 100644
--- a/imports/api/parties/publish.js
+++ b/imports/api/parties/publish.js
@@ -3,7 +3,7 @@ import { Meteor } from 'meteor/meteor';
 import { Parties } from './collection';
 
 if (Meteor.isServer) {
-  Meteor.publish('parties', function() {
+  Meteor.publish('parties', function(options) {
     const selector = {
       $or: [{
         // the public parties
@@ -26,6 +26,6 @@ if (Meteor.isServer) {
       }]
     };
 
-    return Parties.find(selector);
+    return Parties.find(selector, options);
   });
 }
-- 
2.7.4


From c636a4a3a3168ca3b7d6533fa472c8d740536b36 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:33:40 +0200
Subject: [PATCH 114/414] Step 12.2: Add the pagination default params

---
 imports/ui/components/partiesList/partiesList.js | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 7aced57..a68c32d 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -13,6 +13,12 @@ class PartiesList {
 
     $reactive(this).attach($scope);
 
+    this.perPage = 3;
+    this.page = 1;
+    this.sort = {
+      name: 1
+    };
+
     this.subscribe('parties');
 
     this.helpers({
-- 
2.7.4


From 6e6b8233a9a4c5d04f04e589a4b396852e572665 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:35:13 +0200
Subject: [PATCH 115/414] Step 12.3: Add the params to the subscription

---
 imports/ui/components/partiesList/partiesList.js | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index a68c32d..8c04090 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -19,7 +19,11 @@ class PartiesList {
       name: 1
     };
 
-    this.subscribe('parties');
+    this.subscribe('parties', () => [{
+      limit: parseInt(this.perPage),
+      skip: parseInt((this.getReactively('page') - 1) * this.perPage),
+      sort: this.getReactively('sort')}
+    ]);
 
     this.helpers({
       parties() {
-- 
2.7.4


From e9cec94bc5d6f704f31be35faa79ba6ffab1b085 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:36:07 +0200
Subject: [PATCH 116/414] Step 12.4: Add the sort parameter to the collection
 helper

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 8c04090..9d3493a 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -27,7 +27,9 @@ class PartiesList {
 
     this.helpers({
       parties() {
-        return Parties.find({});
+        return Parties.find({}, {
+          sort : this.getReactively('sort')
+        });
       }
     });
   }
-- 
2.7.4


From cb3f2143ca6ec92589a525f9244fd3a06495447d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:37:39 +0200
Subject: [PATCH 117/414] Step 12.5: Install `angular-utils-pagination`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index b8cdb95..3df8d27 100644
--- a/package.json
+++ b/package.json
@@ -9,6 +9,7 @@
     "angular": "^1.5.3",
     "angular-meteor": "^1.3.9",
     "angular-ui-router": "^0.2.18",
+    "angular-utils-pagination": "^0.11.1",
     "meteor-node-stubs": "~0.2.0"
   },
   "devDependencies": {
-- 
2.7.4


From cbdf75c3292218961f74de8be22b5777cdf49b67 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:38:35 +0200
Subject: [PATCH 118/414] Step 12.6: Add new dependency

---
 imports/ui/components/partiesList/partiesList.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 9d3493a..cae9853 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -1,6 +1,7 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 import uiRouter from 'angular-ui-router';
+import utilsPagination from 'angular-utils-pagination';
 
 import template from './partiesList.html';
 import { Parties } from '../../../api/parties';
@@ -41,6 +42,7 @@ const name = 'partiesList';
 export default angular.module(name, [
   angularMeteor,
   uiRouter,
+  utilsPagination,
   PartyAdd,
   PartyRemove
 ]).component(name, {
-- 
2.7.4


From a8c50faced42c54ebf98670fe393d486d56f8fd9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:39:32 +0200
Subject: [PATCH 119/414] Step 12.7: Add usage to the dir-pagination directive

---
 imports/ui/components/partiesList/partiesList.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index c1b07e2..71b36ae 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,7 +1,7 @@
 <party-add></party-add>
 
 <ul>
-  <li ng-repeat="party in partiesList.parties">
+  <li dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
     <a ui-sref="partyDetails({ partyId: party._id })">
       {{party.name}}
     </a>
-- 
2.7.4


From 890d15ec640f56167dd9137aa32940ab6659e8da Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:39:54 +0200
Subject: [PATCH 120/414] Step 12.8: Add the pagination controls to the view

---
 imports/ui/components/partiesList/partiesList.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 71b36ae..d4206d6 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -9,3 +9,5 @@
     <party-remove party="party"></party-remove>
   </li>
 </ul>
+
+<dir-pagination-controls on-page-change="partiesList.pageChanged(newPageNumber)"></dir-pagination-controls>
-- 
2.7.4


From ef54ca9e93af84e450b61704c80dde7f41fa7cb8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:40:29 +0200
Subject: [PATCH 121/414] Step 12.9: Add the pageChanged method to the
 component

---
 imports/ui/components/partiesList/partiesList.js | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index cae9853..1d73e64 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -34,6 +34,10 @@ class PartiesList {
       }
     });
   }
+
+  pageChanged(newPage) {
+    this.page = newPage;
+  }
 }
 
 const name = 'partiesList';
-- 
2.7.4


From bd0e8e7c0c22f2751dac440cc565da46f31a6eb0 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:41:20 +0200
Subject: [PATCH 122/414] Step 12.10: Add `tmeasday:publish-counts`

---
 .meteor/packages | 1 +
 .meteor/versions | 1 +
 2 files changed, 2 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 9e4bf08..f33cc77 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -24,3 +24,4 @@ accounts-password
 dotansimha:accounts-ui-angular
 accounts-facebook
 accounts-twitter
+tmeasday:publish-counts
diff --git a/.meteor/versions b/.meteor/versions
index cc0865f..d6f5bc3 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -86,6 +86,7 @@ standard-minifier-js@1.2.0_1
 templating@1.2.14_1
 templating-tools@1.0.5
 tmeasday:check-npm-versions@0.1.1
+tmeasday:publish-counts@0.8.0
 tracker@1.1.0
 twitter@1.1.12
 ui@1.0.12
-- 
2.7.4


From a0ebc78f3dc036d2b4caa111ad5e6b8792dd8545 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:42:27 +0200
Subject: [PATCH 123/414] Step 12.11: Add usage of Counts

---
 imports/api/parties/publish.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/imports/api/parties/publish.js b/imports/api/parties/publish.js
index 65b8f38..4932df2 100644
--- a/imports/api/parties/publish.js
+++ b/imports/api/parties/publish.js
@@ -1,4 +1,5 @@
 import { Meteor } from 'meteor/meteor';
+import { Counts } from 'meteor/tmeasday:publish-counts';
 
 import { Parties } from './collection';
 
@@ -26,6 +27,10 @@ if (Meteor.isServer) {
       }]
     };
 
+    Counts.publish(this, 'numberOfParties', Parties.find(selector), {
+      noReady: true
+    });
+
     return Parties.find(selector, options);
   });
 }
-- 
2.7.4


From 94c70e6f8bf849149ebaed8674b0af90d2905685 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:44:44 +0200
Subject: [PATCH 124/414] Step 12.12: Add the Count usage in the component

---
 imports/ui/components/partiesList/partiesList.js | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 1d73e64..6282160 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -3,6 +3,8 @@ import angularMeteor from 'angular-meteor';
 import uiRouter from 'angular-ui-router';
 import utilsPagination from 'angular-utils-pagination';
 
+import { Counts } from 'meteor/tmeasday:publish-counts';
+
 import template from './partiesList.html';
 import { Parties } from '../../../api/parties';
 import { name as PartyAdd } from '../partyAdd/partyAdd';
@@ -31,6 +33,9 @@ class PartiesList {
         return Parties.find({}, {
           sort : this.getReactively('sort')
         });
+      },
+      partiesCount() {
+        return Counts.get('numberOfParties');
       }
     });
   }
-- 
2.7.4


From 1320b4c9904e3431fb07dd18dba5ba89032984ee Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:47:04 +0200
Subject: [PATCH 125/414] Step 12.13: Create view for PartiesSort component

---
 imports/ui/components/partiesSort/partiesSort.html | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 imports/ui/components/partiesSort/partiesSort.html

diff --git a/imports/ui/components/partiesSort/partiesSort.html b/imports/ui/components/partiesSort/partiesSort.html
new file mode 100644
index 0000000..cf2102b
--- /dev/null
+++ b/imports/ui/components/partiesSort/partiesSort.html
@@ -0,0 +1,6 @@
+<div>
+  <select ng-model="partiesSort.order" ng-change="partiesSort.changed()">
+    <option value="1">Ascending</option>
+    <option value="-1">Descending</option>
+  </select>
+</div>
-- 
2.7.4


From c42519b3164009b53d0278e5d108429775790584 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:48:25 +0200
Subject: [PATCH 126/414] Step 12.14: Create PartiesSort component

---
 imports/ui/components/partiesSort/partiesSort.js | 34 ++++++++++++++++++++++++
 1 file changed, 34 insertions(+)
 create mode 100644 imports/ui/components/partiesSort/partiesSort.js

diff --git a/imports/ui/components/partiesSort/partiesSort.js b/imports/ui/components/partiesSort/partiesSort.js
new file mode 100644
index 0000000..d5ff3fb
--- /dev/null
+++ b/imports/ui/components/partiesSort/partiesSort.js
@@ -0,0 +1,34 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import template from './partiesSort.html';
+
+class PartiesSort {
+  constructor() {
+    this.changed();
+  }
+
+  changed() {
+    this.onChange({
+      sort: {
+        [this.property]: parseInt(this.order)
+      }
+    });
+  }
+}
+
+const name = 'partiesSort';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  bindings: {
+    onChange: '&',
+    property: '@',
+    order: '@'
+  },
+  controllerAs: name,
+  controller: PartiesSort
+});
-- 
2.7.4


From cb571cb535d9680527938df7222083e4d50bc3d0 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:49:26 +0200
Subject: [PATCH 127/414] Step 12.15: Add as a dependency

---
 imports/ui/components/partiesList/partiesList.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 6282160..3fa1641 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -7,6 +7,7 @@ import { Counts } from 'meteor/tmeasday:publish-counts';
 
 import template from './partiesList.html';
 import { Parties } from '../../../api/parties';
+import { name as PartiesSort } from '../partiesSort/partiesSort';
 import { name as PartyAdd } from '../partyAdd/partyAdd';
 import { name as PartyRemove } from '../partyRemove/partyRemove';
 
@@ -52,6 +53,7 @@ export default angular.module(name, [
   angularMeteor,
   uiRouter,
   utilsPagination,
+  PartiesSort,
   PartyAdd,
   PartyRemove
 ]).component(name, {
-- 
2.7.4


From 2e5ecdc8b48bb1fa69d6ad3c235411eedd39c455 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:50:20 +0200
Subject: [PATCH 128/414] Step 12.16: Implement component

---
 imports/ui/components/partiesList/partiesList.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index d4206d6..0fe847e 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,5 +1,7 @@
 <party-add></party-add>
 
+<parties-sort on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
+
 <ul>
   <li dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
     <a ui-sref="partyDetails({ partyId: party._id })">
-- 
2.7.4


From 36c0b00b08a0c6cce4708c0d578d7a19c44a9492 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 12:51:09 +0200
Subject: [PATCH 129/414] Step 12.17: Handle sort changes

---
 imports/ui/components/partiesList/partiesList.js | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 3fa1641..199a0b8 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -44,6 +44,10 @@ class PartiesList {
   pageChanged(newPage) {
     this.page = newPage;
   }
+
+  sortChanged(sort) {
+    this.sort = sort;
+  }
 }
 
 const name = 'partiesList';
-- 
2.7.4


From 78651aa6db7cae8524d72e4ccbf8b494b85fa16f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:12:35 +0200
Subject: [PATCH 130/414] Step 12.18: Add searchString to `parties` publication

---
 imports/api/parties/publish.js | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/imports/api/parties/publish.js b/imports/api/parties/publish.js
index 4932df2..67c9bdb 100644
--- a/imports/api/parties/publish.js
+++ b/imports/api/parties/publish.js
@@ -4,7 +4,7 @@ import { Counts } from 'meteor/tmeasday:publish-counts';
 import { Parties } from './collection';
 
 if (Meteor.isServer) {
-  Meteor.publish('parties', function(options) {
+  Meteor.publish('parties', function(options, searchString) {
     const selector = {
       $or: [{
         // the public parties
@@ -27,6 +27,13 @@ if (Meteor.isServer) {
       }]
     };
 
+    if (typeof searchString === 'string' && searchString.length) {
+      selector.name = {
+        $regex: `.*${searchString}.*`,
+        $options : 'i'
+      };
+    }
+
     Counts.publish(this, 'numberOfParties', Parties.find(selector), {
       noReady: true
     });
-- 
2.7.4


From 8f3e2798d482538d9f31c145fd8b4a39f2a66409 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:15:46 +0200
Subject: [PATCH 131/414] Step 12.19: Add searchText to subscription

---
 imports/ui/components/partiesList/partiesList.js | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 199a0b8..c7221df 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -22,11 +22,13 @@ class PartiesList {
     this.sort = {
       name: 1
     };
+    this.searchText = '';
 
     this.subscribe('parties', () => [{
-      limit: parseInt(this.perPage),
-      skip: parseInt((this.getReactively('page') - 1) * this.perPage),
-      sort: this.getReactively('sort')}
+        limit: parseInt(this.perPage),
+        skip: parseInt((this.getReactively('page') - 1) * this.perPage),
+        sort: this.getReactively('sort')
+      }, this.getReactively('searchText')
     ]);
 
     this.helpers({
-- 
2.7.4


From 695f76032050b69eaab380a2476592dcb5d8837f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:16:30 +0200
Subject: [PATCH 132/414] Step 12.20: Add input with searchText as ngModel

---
 imports/ui/components/partiesList/partiesList.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 0fe847e..3c411fe 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,5 +1,7 @@
 <party-add></party-add>
 
+<input type="search" ng-model="partiesList.searchText" placeholder="Search" />
+
 <parties-sort on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
 
 <ul>
-- 
2.7.4


From bf7e79d4b506b49d7a3ec2f614d78b7b68fbb19f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 15:59:07 +0200
Subject: [PATCH 133/414] Step 12.21: Tests of PartiesSort

---
 .../partiesSort/client/partiesSort.tests.js        | 54 ++++++++++++++++++++++
 1 file changed, 54 insertions(+)
 create mode 100644 imports/ui/components/partiesSort/client/partiesSort.tests.js

diff --git a/imports/ui/components/partiesSort/client/partiesSort.tests.js b/imports/ui/components/partiesSort/client/partiesSort.tests.js
new file mode 100644
index 0000000..09d81b4
--- /dev/null
+++ b/imports/ui/components/partiesSort/client/partiesSort.tests.js
@@ -0,0 +1,54 @@
+import { name as PartiesSort } from '../partiesSort';
+import 'angular-mocks';
+
+describe('PartiesSort', () => {
+  beforeEach(() => {
+    window.module(PartiesSort);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const onChange = function() {};
+    const property = 'name';
+    const order = -1;
+
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartiesSort, {
+          $scope: $rootScope.$new(true)
+        }, {
+          onChange,
+          property,
+          order
+        });
+      });
+    });
+
+    it('should set property', () => {
+      expect(controller.property).toEqual(property);
+    });
+
+    it('should set order', () => {
+      expect(controller.order).toEqual(order);
+    });
+
+    it('should set onChange', () => {
+      expect(controller.onChange).toBe(onChange);
+    });
+
+    describe('changed()', () => {
+      it('should call onChange expression', () => {
+        spyOn(controller, 'onChange');
+
+        controller.changed();
+
+        expect(controller.onChange).toHaveBeenCalledWith({
+          sort: {
+            [property]: order
+          }
+        });
+      });
+    });
+  });
+});
-- 
2.7.4


From 8f01dbbd5b5dd37dbd3051706f9128dce5a6a44b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:07:14 +0200
Subject: [PATCH 134/414] Step 12.22: Tests of PartiesList

---
 .../partiesList/client/partiesList.tests.js        | 50 ++++++++++++++++++++++
 1 file changed, 50 insertions(+)
 create mode 100644 imports/ui/components/partiesList/client/partiesList.tests.js

diff --git a/imports/ui/components/partiesList/client/partiesList.tests.js b/imports/ui/components/partiesList/client/partiesList.tests.js
new file mode 100644
index 0000000..176da85
--- /dev/null
+++ b/imports/ui/components/partiesList/client/partiesList.tests.js
@@ -0,0 +1,50 @@
+import { name as PartiesList } from '../partiesList';
+import 'angular-mocks';
+
+describe('PartiesList', () => {
+  beforeEach(() => {
+    window.module(PartiesList);
+  });
+
+  describe('controller', () => {
+    let controller;
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartiesList, {
+          $scope: $rootScope.$new(true)
+        });
+      });
+    });
+
+    it('should have perPage that equals 3 by default', () => {
+      expect(controller.perPage).toEqual(3);
+    });
+
+    it('should have page that equals 1 by default', () => {
+      expect(controller.page).toEqual(1);
+    });
+
+    it('should sort by name - ASC', () => {
+      expect(controller.sort).toEqual({
+        name: 1
+      });
+    });
+
+    it('should be able to change sorting', () => {
+      controller.sortChanged({
+        name: -1
+      });
+
+      expect(controller.sort).toEqual({
+        name: -1
+      });
+    });
+
+    it('should be able to change page', () => {
+      controller.pageChanged(2);
+
+      expect(controller.page).toEqual(2);
+    });
+  });
+});
-- 
2.7.4


From d1c64ebd090b28e6c336fc51a2b1a631e35f82b2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:23:07 +0200
Subject: [PATCH 135/414] Step 13.1: Create UninvitedFilter

---
 imports/ui/filters/uninvitedFilter.js | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)
 create mode 100644 imports/ui/filters/uninvitedFilter.js

diff --git a/imports/ui/filters/uninvitedFilter.js b/imports/ui/filters/uninvitedFilter.js
new file mode 100644
index 0000000..77528fc
--- /dev/null
+++ b/imports/ui/filters/uninvitedFilter.js
@@ -0,0 +1,20 @@
+import angular from 'angular';
+
+const name = 'uninvitedFilter';
+
+function UninvitedFilter(users, party) {
+  if (!party) {
+    return false;
+  }
+
+  return users.filter((user) => {
+    // if not the owner and not invited
+    return user._id !== party.owner && (party.invited || []).indexOf(user._id) === -1;
+  });
+}
+
+// create a module
+export default angular.module(name, [])
+  .filter(name, () => {
+    return UninvitedFilter;
+  });
-- 
2.7.4


From 45b654b5294a5ff677c1e3cc65bba521c32a797d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:24:04 +0200
Subject: [PATCH 136/414] Step 13.2: Install `underscore`

---
 package.json | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/package.json b/package.json
index 3df8d27..9e6806d 100644
--- a/package.json
+++ b/package.json
@@ -10,7 +10,8 @@
     "angular-meteor": "^1.3.9",
     "angular-ui-router": "^0.2.18",
     "angular-utils-pagination": "^0.11.1",
-    "meteor-node-stubs": "~0.2.0"
+    "meteor-node-stubs": "~0.2.0",
+    "underscore": "^1.8.3"
   },
   "devDependencies": {
     "angular-mocks": "^1.5.3"
-- 
2.7.4


From ab798623f63fff6dcc078a05c922c8866a360743 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:24:21 +0200
Subject: [PATCH 137/414] Step 13.3: Use underscore

---
 imports/ui/filters/uninvitedFilter.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/imports/ui/filters/uninvitedFilter.js b/imports/ui/filters/uninvitedFilter.js
index 77528fc..cfe8d2d 100644
--- a/imports/ui/filters/uninvitedFilter.js
+++ b/imports/ui/filters/uninvitedFilter.js
@@ -1,4 +1,5 @@
 import angular from 'angular';
+import _ from 'underscore';
 
 const name = 'uninvitedFilter';
 
@@ -9,7 +10,7 @@ function UninvitedFilter(users, party) {
 
   return users.filter((user) => {
     // if not the owner and not invited
-    return user._id !== party.owner && (party.invited || []).indexOf(user._id) === -1;
+    return user._id !== party.owner && !_.contains(party.invited, user._id);
   });
 }
 
-- 
2.7.4


From 366ce7e2a5c03393fefdf5d3a5f3dea6adc95bce Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:26:20 +0200
Subject: [PATCH 138/414] Step 13.4: Move list of users to separate component

---
 imports/ui/components/partyUninvited/partyUninvited.html | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 imports/ui/components/partyUninvited/partyUninvited.html

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
new file mode 100644
index 0000000..ac0bbc7
--- /dev/null
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -0,0 +1,6 @@
+<ul>
+  Users:
+  <li ng-repeat="user in partyUninvited.users">
+    <div>{{ user.emails[0].address }}</div>
+  </li>
+</ul>
-- 
2.7.4


From bcd8b6580938d70bb850e86eb80d5359ff12598b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:30:02 +0200
Subject: [PATCH 139/414] Step 13.5: Create PartyUninvited component

---
 .../ui/components/partyUninvited/partyUninvited.js | 34 ++++++++++++++++++++++
 1 file changed, 34 insertions(+)
 create mode 100644 imports/ui/components/partyUninvited/partyUninvited.js

diff --git a/imports/ui/components/partyUninvited/partyUninvited.js b/imports/ui/components/partyUninvited/partyUninvited.js
new file mode 100644
index 0000000..8ae1e9b
--- /dev/null
+++ b/imports/ui/components/partyUninvited/partyUninvited.js
@@ -0,0 +1,34 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyUninvited.html';
+
+class PartyUninvited {
+  constructor($scope) {
+    'ngInject';
+
+    $scope.viewModel(this);
+
+    this.helpers({
+      users() {
+        return Meteor.users.find({});
+      }
+    });
+  }
+}
+
+const name = 'partyUninvited';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    party: '<'
+  },
+  controller: PartyUninvited
+});
-- 
2.7.4


From 73754eea821124be274f3611eae139c464d6193c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:30:46 +0200
Subject: [PATCH 140/414] Step 13.6: Add UninvitedFilter

---
 imports/ui/components/partyUninvited/partyUninvited.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.js b/imports/ui/components/partyUninvited/partyUninvited.js
index 8ae1e9b..2489fc2 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.js
+++ b/imports/ui/components/partyUninvited/partyUninvited.js
@@ -4,6 +4,7 @@ import angularMeteor from 'angular-meteor';
 import { Meteor } from 'meteor/meteor';
 
 import template from './partyUninvited.html';
+import { name as UninvitedFilter } from '../../filters/uninvitedFilter';
 
 class PartyUninvited {
   constructor($scope) {
@@ -23,7 +24,8 @@ const name = 'partyUninvited';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor
+  angularMeteor,
+  UninvitedFilter
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From cc539149f1cbe2bef5143a856b4dd2c25d554c41 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:31:26 +0200
Subject: [PATCH 141/414] Step 13.7: Implement filter

---
 imports/ui/components/partyUninvited/partyUninvited.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index ac0bbc7..c1ccda5 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -1,6 +1,6 @@
 <ul>
-  Users:
-  <li ng-repeat="user in partyUninvited.users">
+  Users to invite:
+  <li ng-repeat="user in partyUninvited.users | uninvitedFilter:partyUninvited.party">
     <div>{{ user.emails[0].address }}</div>
   </li>
 </ul>
-- 
2.7.4


From 252bb7a92c01ddc08eeaa206b2f4e8ad1361f17b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:32:22 +0200
Subject: [PATCH 142/414] Step 13.8: Implement component in PartyDetails view

---
 imports/ui/components/partyDetails/partyDetails.html | 7 +------
 1 file changed, 1 insertion(+), 6 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index d53f73f..0e46f30 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -8,9 +8,4 @@ The party you selected is:
 
 <button ui-sref="parties">Back</button>
 
-<ul>
-  Users:
-  <li ng-repeat="user in partyDetails.users">
-    <div>{{ user.emails[0].address }}</div>
-  </li>
-</ul>
+<party-uninvited party="partyDetails.party"></party-uninvited>
-- 
2.7.4


From bc92d05a0796cde1e04660949037c65d5b1c87ec Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:33:20 +0200
Subject: [PATCH 143/414] Step 13.9: Add to dependencies

---
 imports/ui/components/partyDetails/partyDetails.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index a526c43..5443915 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -6,6 +6,7 @@ import { Meteor } from 'meteor/meteor';
 
 import template from './partyDetails.html';
 import { Parties } from '../../../api/parties';
+import { name as PartyUninvited } from '../partyUninvited/partyUninvited';
 
 class PartyDetails {
   constructor($stateParams, $scope, $reactive) {
@@ -54,7 +55,8 @@ const name = 'partyDetails';
 // create a module
 export default angular.module(name, [
   angularMeteor,
-  uiRouter
+  uiRouter,
+  PartyUninvited
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From f1d4defb6caa58fe2b3a2710ef5cdbdc5c54109f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:40:30 +0200
Subject: [PATCH 144/414] Step 13.10: Create DisplayNameFilter

---
 imports/ui/filters/displayNameFilter.js | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)
 create mode 100644 imports/ui/filters/displayNameFilter.js

diff --git a/imports/ui/filters/displayNameFilter.js b/imports/ui/filters/displayNameFilter.js
new file mode 100644
index 0000000..57d9250
--- /dev/null
+++ b/imports/ui/filters/displayNameFilter.js
@@ -0,0 +1,25 @@
+import angular from 'angular';
+
+const name = 'displayNameFilter';
+
+function DisplayNameFilter(user) {
+  if (!user) {
+    return '';
+  }
+
+  if (user.profile && user.profile.name) {
+    return user.profile.name;
+  }
+
+  if (user.emails) {
+    return user.emails[0].address;
+  }
+
+  return user;
+}
+
+// create a module
+export default angular.module(name, [])
+  .filter(name, () => {
+    return DisplayNameFilter;
+  });
-- 
2.7.4


From e6f83041312a7d4d0d27c20726b91efccba5974e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:41:15 +0200
Subject: [PATCH 145/414] Step 13.11: Add as a dependency

---
 imports/ui/components/partyUninvited/partyUninvited.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.js b/imports/ui/components/partyUninvited/partyUninvited.js
index 2489fc2..ca195d5 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.js
+++ b/imports/ui/components/partyUninvited/partyUninvited.js
@@ -5,6 +5,7 @@ import { Meteor } from 'meteor/meteor';
 
 import template from './partyUninvited.html';
 import { name as UninvitedFilter } from '../../filters/uninvitedFilter';
+import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
 
 class PartyUninvited {
   constructor($scope) {
@@ -25,7 +26,8 @@ const name = 'partyUninvited';
 // create a module
 export default angular.module(name, [
   angularMeteor,
-  UninvitedFilter
+  UninvitedFilter,
+  DisplayNameFilter
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 901438aeef5bb9b7b000f46def9131a6b223ffb8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:41:54 +0200
Subject: [PATCH 146/414] Step 13.12: Use filter

---
 imports/ui/components/partyUninvited/partyUninvited.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index c1ccda5..9603f3a 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -1,6 +1,6 @@
 <ul>
   Users to invite:
   <li ng-repeat="user in partyUninvited.users | uninvitedFilter:partyUninvited.party">
-    <div>{{ user.emails[0].address }}</div>
+    <div>{{ user | displayNameFilter }}</div>
   </li>
 </ul>
-- 
2.7.4


From 6ef52aa8bbdba74acdfd961627758b00750deb0d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:45:34 +0200
Subject: [PATCH 147/414] Step 13.13: Create template for PartyCreator
 component

---
 imports/ui/components/partyCreator/partyCreator.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 imports/ui/components/partyCreator/partyCreator.html

diff --git a/imports/ui/components/partyCreator/partyCreator.html b/imports/ui/components/partyCreator/partyCreator.html
new file mode 100644
index 0000000..de986fb
--- /dev/null
+++ b/imports/ui/components/partyCreator/partyCreator.html
@@ -0,0 +1,5 @@
+<p>
+  <small>
+    Posted by {{ partyCreator.creator | displayNameFilter }}
+  </small>
+</p>
-- 
2.7.4


From eb5fe7ce960981ffffd9a1f028467eb4e0543551 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:45:54 +0200
Subject: [PATCH 148/414] Step 13.14: Create PartyCreator component

---
 imports/ui/components/partyCreator/partyCreator.js | 51 ++++++++++++++++++++++
 1 file changed, 51 insertions(+)
 create mode 100644 imports/ui/components/partyCreator/partyCreator.js

diff --git a/imports/ui/components/partyCreator/partyCreator.js b/imports/ui/components/partyCreator/partyCreator.js
new file mode 100644
index 0000000..b6911db
--- /dev/null
+++ b/imports/ui/components/partyCreator/partyCreator.js
@@ -0,0 +1,51 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyCreator.html';
+import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
+
+/**
+ * PartyCreator component
+ */
+class PartyCreator {
+  constructor($scope) {
+    'ngInject';
+
+    $scope.viewModel(this);
+
+    this.subscribe('users');
+
+    this.helpers({
+      creator() {
+        if (!this.party) {
+          return '';
+        }
+
+        const owner = this.party.owner;
+
+        if (Meteor.userId() !== null && owner === Meteor.userId()) {
+          return 'me';
+        }
+
+        return Meteor.users.findOne(owner) || 'nobody';
+      }
+    });
+  }
+}
+
+const name = 'partyCreator';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  DisplayNameFilter
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    party: '<'
+  },
+  controller: PartyCreator
+});
-- 
2.7.4


From ab11f64daff492760c67bb96dc86402bf8bbdb55 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:46:14 +0200
Subject: [PATCH 149/414] Step 13.15: Implement component

---
 imports/ui/components/partiesList/partiesList.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 3c411fe..2b18723 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -11,6 +11,7 @@
     </a>
     <p>{{party.description}}</p>
     <party-remove party="party"></party-remove>
+    <party-creator party="party"></party-creator>
   </li>
 </ul>
 
-- 
2.7.4


From 5c35d508ad100c628c243094b88d5a1397ee9175 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 16:46:39 +0200
Subject: [PATCH 150/414] Step 13.16: Add as a dependency

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index c7221df..919bf88 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -10,6 +10,7 @@ import { Parties } from '../../../api/parties';
 import { name as PartiesSort } from '../partiesSort/partiesSort';
 import { name as PartyAdd } from '../partyAdd/partyAdd';
 import { name as PartyRemove } from '../partyRemove/partyRemove';
+import { name as PartyCreator } from '../partyCreator/partyCreator';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -61,7 +62,8 @@ export default angular.module(name, [
   utilsPagination,
   PartiesSort,
   PartyAdd,
-  PartyRemove
+  PartyRemove,
+  PartyCreator
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 81c04ad7dd47cf3fcff57643cc70135ad70de201 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:06:21 +0200
Subject: [PATCH 151/414] Step 13.17: Tests of PartyCreator

---
 .../partyCreator/client/partyCreator.tests.js      | 81 ++++++++++++++++++++++
 1 file changed, 81 insertions(+)
 create mode 100644 imports/ui/components/partyCreator/client/partyCreator.tests.js

diff --git a/imports/ui/components/partyCreator/client/partyCreator.tests.js b/imports/ui/components/partyCreator/client/partyCreator.tests.js
new file mode 100644
index 0000000..dabb0b5
--- /dev/null
+++ b/imports/ui/components/partyCreator/client/partyCreator.tests.js
@@ -0,0 +1,81 @@
+import { name as PartyCreator } from '../partyCreator';
+import { Meteor } from 'meteor/meteor';
+import 'angular-mocks';
+
+describe('PartyCreator', () => {
+  beforeEach(() => {
+    window.module(PartyCreator);
+  });
+
+  describe('controller', () => {
+    let $rootScope;
+    let $componentController;
+    const party = {
+      _id: 'partyId'
+    };
+
+    beforeEach(() => {
+      inject((_$rootScope_, _$componentController_) => {
+        $rootScope = _$rootScope_;
+        $componentController = _$componentController_;
+      });
+    });
+
+    function component(bindings) {
+      return $componentController(PartyCreator, {
+        $scope: $rootScope.$new(true)
+      }, bindings);
+    }
+
+    it('should return an empty string if there is no party', () => {
+      const controller = component({
+        party: undefined
+      });
+
+      expect(controller.creator).toEqual('');
+    });
+
+    it('should say `me` if logged in is the owner', () => {
+      const owner = 'userId';
+      // logged in
+      spyOn(Meteor, 'userId').and.returnValue(owner);
+      const controller = component({
+        party: {
+          owner
+        }
+      });
+
+      expect(controller.creator).toEqual('me');
+    });
+
+    it('should say `nobody` if user does not exist', () => {
+      const owner = 'userId';
+      // not logged in
+      spyOn(Meteor, 'userId').and.returnValue(null);
+      // no user found
+      spyOn(Meteor.users, 'findOne').and.returnValue(undefined);
+      const controller = component({
+        party: {
+          owner
+        }
+      });
+
+      expect(controller.creator).toEqual('nobody');
+    });
+
+    it('should return user data if user exists and it is not logged one', () => {
+      const owner = 'userId';
+      // not logged in
+      spyOn(Meteor, 'userId').and.returnValue(null);
+      // user found
+      spyOn(Meteor.users, 'findOne').and.returnValue('found');
+      const controller = component({
+        party: {
+          owner
+        }
+      });
+
+      expect(controller.creator).toEqual('found');
+    });
+  });
+});
-- 
2.7.4


From 9f2c69027e51465ca631d92c7c9a1a0c2c459474 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:18:32 +0200
Subject: [PATCH 152/414] Step 14.1: Add `check` package

---
 .meteor/packages | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.meteor/packages b/.meteor/packages
index f33cc77..054963d 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -25,3 +25,4 @@ dotansimha:accounts-ui-angular
 accounts-facebook
 accounts-twitter
 tmeasday:publish-counts
+check
-- 
2.7.4


From 8ea680a451a50886a0aa3e2912976fdf6e5ab3fd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:21:04 +0200
Subject: [PATCH 153/414] Step 14.2: Create invite method

---
 imports/api/parties/methods.js | 66 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 66 insertions(+)
 create mode 100644 imports/api/parties/methods.js

diff --git a/imports/api/parties/methods.js b/imports/api/parties/methods.js
new file mode 100644
index 0000000..dd75692
--- /dev/null
+++ b/imports/api/parties/methods.js
@@ -0,0 +1,66 @@
+import _ from 'underscore';
+import { Meteor } from 'meteor/meteor';
+import { check } from 'meteor/check';
+
+import { Parties } from './collection';
+
+function getContactEmail(user) {
+  if (user.emails && user.emails.length)
+    return user.emails[0].address;
+
+  if (user.services && user.services.facebook && user.services.facebook.email)
+    return user.services.facebook.email;
+
+  return null;
+}
+
+export function invite(partyId, userId) {
+  check(partyId, String);
+  check(userId, String);
+
+  if (!this.userId) {
+    throw new Meteor.Error(400, 'You have to be logged in!');
+  }
+
+  const party = Parties.findOne(partyId);
+
+  if (!party) {
+    throw new Meteor.Error(404, 'No such party!');
+  }
+
+  if (party.owner !== this.userId) {
+    throw new Meteor.Error(404, 'No permissions!');
+  }
+
+  if (party.public) {
+    throw new Meteor.Error(400, 'That party is public. No need to invite people.');
+  }
+
+  if (userId !== party.owner && ! _.contains(party.invited, userId)) {
+    Parties.update(partyId, {
+      $addToSet: {
+        invited: userId
+      }
+    });
+
+    const replyTo = getContactEmail(Meteor.users.findOne(this.userId));
+    const to = getContactEmail(Meteor.users.findOne(userId));
+
+    if (Meteor.isServer && to) {
+      Email.send({
+        to,
+        replyTo,
+        from: 'noreply@socially.com',
+        subject: `PARTY: ${party.title}`,
+        text: `
+          Hey, I just invited you to ${party.title} on Socially.
+          Come check it out: ${Meteor.absoluteUrl()}
+        `
+      });
+    }
+  }
+}
+
+Meteor.methods({
+  invite
+});
-- 
2.7.4


From 7ffc2bae2472ee9acefefa726d22f628e12dc83e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:21:28 +0200
Subject: [PATCH 154/414] Step 14.3: Import methods

---
 imports/api/parties/index.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/api/parties/index.js b/imports/api/parties/index.js
index 5f7ae00..96b72b2 100644
--- a/imports/api/parties/index.js
+++ b/imports/api/parties/index.js
@@ -1,3 +1,4 @@
 import './publish';
+import './methods';
 
 export * from './collection';
-- 
2.7.4


From 41462b1b58096296f6938bfa42c9aa54b3c8a7e2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:23:05 +0200
Subject: [PATCH 155/414] Step 14.4: Add `email` package

---
 .meteor/packages | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.meteor/packages b/.meteor/packages
index 054963d..27dfd39 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -26,3 +26,4 @@ accounts-facebook
 accounts-twitter
 tmeasday:publish-counts
 check
+email
-- 
2.7.4


From ad7363a85aafaf200a5d8a64be98f29850bae6f1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:23:49 +0200
Subject: [PATCH 156/414] Step 14.5: Import email from module

---
 imports/api/parties/methods.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/api/parties/methods.js b/imports/api/parties/methods.js
index dd75692..054b42a 100644
--- a/imports/api/parties/methods.js
+++ b/imports/api/parties/methods.js
@@ -1,6 +1,7 @@
 import _ from 'underscore';
 import { Meteor } from 'meteor/meteor';
 import { check } from 'meteor/check';
+import { Email } from 'meteor/email';
 
 import { Parties } from './collection';
 
-- 
2.7.4


From f0858e81192e4d1f989329ef031bfa9768b0538d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:25:59 +0200
Subject: [PATCH 157/414] Step 14.6: Add invite method to PartyUninvited

---
 imports/ui/components/partyUninvited/partyUninvited.js | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.js b/imports/ui/components/partyUninvited/partyUninvited.js
index ca195d5..7958f5a 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.js
+++ b/imports/ui/components/partyUninvited/partyUninvited.js
@@ -19,6 +19,18 @@ class PartyUninvited {
       }
     });
   }
+
+  invite(user) {
+    Meteor.call('invite', this.party._id, user._id,
+      (error) => {
+        if (error) {
+          console.log('Oops, unable to invite!');
+        } else {
+          console.log('Invited!');
+        }
+      }
+    );
+  }
 }
 
 const name = 'partyUninvited';
-- 
2.7.4


From e1470c2f17ac593af399c1caf2343083bfb58601 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:26:36 +0200
Subject: [PATCH 158/414] Step 14.7: Add invite button

---
 imports/ui/components/partyUninvited/partyUninvited.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index 9603f3a..0cbb435 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -2,5 +2,6 @@
   Users to invite:
   <li ng-repeat="user in partyUninvited.users | uninvitedFilter:partyUninvited.party">
     <div>{{ user | displayNameFilter }}</div>
+    <button ng-click="partyUninvited.invite(user)">Invite</button>
   </li>
 </ul>
-- 
2.7.4


From 3e5f51966100750ded783ffef00be91e4665cf83 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:28:47 +0200
Subject: [PATCH 159/414] Step 14.8: Update the parties subscription to include
 invited

---
 imports/api/parties/publish.js | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/imports/api/parties/publish.js b/imports/api/parties/publish.js
index 67c9bdb..0d4d340 100644
--- a/imports/api/parties/publish.js
+++ b/imports/api/parties/publish.js
@@ -24,6 +24,15 @@ if (Meteor.isServer) {
             $exists: true
           }
         }]
+      }, {
+        // when logged in user is one of invited
+        $and: [{
+          invited: this.userId
+        }, {
+          invited: {
+            $exists: true
+          }
+        }]
       }]
     };
 
-- 
2.7.4


From abab0ce319806fe7dc0ccb34f0fe52fac0e8efdb Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:42:35 +0200
Subject: [PATCH 160/414] Step 14.9: Add rsvp method

---
 imports/api/parties/methods.js | 79 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 78 insertions(+), 1 deletion(-)

diff --git a/imports/api/parties/methods.js b/imports/api/parties/methods.js
index 054b42a..e8aa1ad 100644
--- a/imports/api/parties/methods.js
+++ b/imports/api/parties/methods.js
@@ -62,6 +62,83 @@ export function invite(partyId, userId) {
   }
 }
 
+export function rsvp(partyId, rsvp) {
+  check(partyId, String);
+  check(rsvp, String);
+
+  if (!this.userId) {
+    throw new Meteor.Error(403, 'You must be logged in to RSVP');
+  }
+
+  if (!_.contains(['yes', 'no', 'maybe'], rsvp)) {
+    throw new Meteor.Error(400, 'Invalid RSVP');
+  }
+
+  const party = Parties.findOne({
+    _id: partyId,
+    $or: [{
+      // is public
+      $and: [{
+        public: true
+      }, {
+        public: {
+          $exists: true
+        }
+      }]
+    },{
+      // is owner
+      $and: [{
+        owner: this.userId
+      }, {
+        owner: {
+          $exists: true
+        }
+      }]
+    }, {
+      // is invited
+      $and: [{
+        invited: this.userId
+      }, {
+        invited: {
+          $exists: true
+        }
+      }]
+    }]
+  });
+
+  if (!party) {
+    throw new Meteor.Error(404, 'No such party');
+  }
+
+  const hasUserRsvp = _.findWhere(party.rsvps, {
+    user: this.userId
+  });
+
+  if (!hasUserRsvp) {
+    // add new rsvp entry
+    Parties.update(partyId, {
+      $push: {
+        rsvps: {
+          rsvp,
+          user: this.userId
+        }
+      }
+    });
+  } else {
+    // update rsvp entry
+    const userId = this.userId;
+    Parties.update({
+      _id: partyId,
+      'rsvps.user': userId
+    }, {
+      $set: {
+        'rsvps.$.rsvp': rsvp
+      }
+    });
+  }
+}
+
 Meteor.methods({
-  invite
+  invite,
+  rsvp
 });
-- 
2.7.4


From cc385f768c9eb47d300f7174c9395e487f91536a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:45:36 +0200
Subject: [PATCH 161/414] Step 14.10: Create PartyRsvp component

---
 imports/ui/components/partyRsvp/partyRsvp.js | 44 ++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)
 create mode 100644 imports/ui/components/partyRsvp/partyRsvp.js

diff --git a/imports/ui/components/partyRsvp/partyRsvp.js b/imports/ui/components/partyRsvp/partyRsvp.js
new file mode 100644
index 0000000..17aeb99
--- /dev/null
+++ b/imports/ui/components/partyRsvp/partyRsvp.js
@@ -0,0 +1,44 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyRsvp.html';
+
+class PartyRsvp {
+  yes() {
+    this.answer('yes');
+  }
+
+  maybe() {
+    this.answer('maybe');
+  }
+
+  no() {
+    this.answer('no');
+  }
+
+  answer(answer) {
+    Meteor.call('rsvp', this.party._id, answer, (error) => {
+      if (error) {
+        console.error('Oops, unable to rsvp!');
+      } else {
+        console.log('RSVP done!')
+      }
+    });
+  }
+}
+
+const name = 'partyRsvp';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    party: '<'
+  },
+  controller: PartyRsvp
+});
-- 
2.7.4


From 0e987c2682d2361b528a94436f836de988dd0651 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:46:38 +0200
Subject: [PATCH 162/414] Step 14.11: Create template

---
 imports/ui/components/partyRsvp/partyRsvp.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/partyRsvp/partyRsvp.html

diff --git a/imports/ui/components/partyRsvp/partyRsvp.html b/imports/ui/components/partyRsvp/partyRsvp.html
new file mode 100644
index 0000000..ca15260
--- /dev/null
+++ b/imports/ui/components/partyRsvp/partyRsvp.html
@@ -0,0 +1,3 @@
+<input type="button" value="I'm going!" ng-click="partyRsvp.yes()"/>
+<input type="button" value="Maybe" ng-click="partyRsvp.maybe()"/>
+<input type="button" value="No" ng-click="partyRsvp.no()"/>
-- 
2.7.4


From 9e11e2aee7d3d094dba19492f09508a97444fa19 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:48:22 +0200
Subject: [PATCH 163/414] Step 14.12: Add component to the view

---
 imports/ui/components/partiesList/partiesList.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 2b18723..bced521 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -11,6 +11,7 @@
     </a>
     <p>{{party.description}}</p>
     <party-remove party="party"></party-remove>
+    <party-rsvp party="party"></party-rsvp>
     <party-creator party="party"></party-creator>
   </li>
 </ul>
-- 
2.7.4


From 1c0a8c535e8ceb71a7fc88399bcd6e5cf18d08a2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:48:36 +0200
Subject: [PATCH 164/414] Step 14.13: Add as a dependency

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 919bf88..14efe13 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -11,6 +11,7 @@ import { name as PartiesSort } from '../partiesSort/partiesSort';
 import { name as PartyAdd } from '../partyAdd/partyAdd';
 import { name as PartyRemove } from '../partyRemove/partyRemove';
 import { name as PartyCreator } from '../partyCreator/partyCreator';
+import { name as PartyRsvp } from '../partyRsvp/partyRsvp';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -63,7 +64,8 @@ export default angular.module(name, [
   PartiesSort,
   PartyAdd,
   PartyRemove,
-  PartyCreator
+  PartyCreator,
+  PartyRsvp
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 11ac22907ef26600fcdd1ce5da2aee610d4a562c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:53:02 +0200
Subject: [PATCH 165/414] Step 14.14: Create view for PartyRsvpsList component

---
 imports/ui/components/partyRsvpsList/partyRsvpsList.html | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 imports/ui/components/partyRsvpsList/partyRsvpsList.html

diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.html b/imports/ui/components/partyRsvpsList/partyRsvpsList.html
new file mode 100644
index 0000000..efc38ed
--- /dev/null
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.html
@@ -0,0 +1,6 @@
+Who is coming: Yes -
+{{ (partyRsvpsList.rsvps | filter:{rsvp:'yes'}).length }}
+Maybe -
+{{ (partyRsvpsList.rsvps | filter:{rsvp:'maybe'}).length }}
+No -
+{{ (partyRsvpsList.rsvps | filter:{rsvp:'no'}).length }}
-- 
2.7.4


From 4e06f80c6abbeb6599729d5cd71fea45e1d21135 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:53:16 +0200
Subject: [PATCH 166/414] Step 14.15: Create component

---
 .../ui/components/partyRsvpsList/partyRsvpsList.js   | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)
 create mode 100644 imports/ui/components/partyRsvpsList/partyRsvpsList.js

diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.js b/imports/ui/components/partyRsvpsList/partyRsvpsList.js
new file mode 100644
index 0000000..755c9f9
--- /dev/null
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.js
@@ -0,0 +1,20 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import template from './partyRsvpsList.html';
+
+class PartyRsvpsList { }
+
+const name = 'partyRsvpsList';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    rsvps: '<'
+  },
+  controller: PartyRsvpsList
+});
-- 
2.7.4


From e2864ef54ffb3951cb769783d7faab2c656d7804 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:53:32 +0200
Subject: [PATCH 167/414] Step 14.16: Add to the view

---
 imports/ui/components/partiesList/partiesList.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index bced521..60dbea3 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -12,6 +12,7 @@
     <p>{{party.description}}</p>
     <party-remove party="party"></party-remove>
     <party-rsvp party="party"></party-rsvp>
+    <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
     <party-creator party="party"></party-creator>
   </li>
 </ul>
-- 
2.7.4


From 3d02a02a83fd52869ae611d59ea3c170545594fc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:53:47 +0200
Subject: [PATCH 168/414] Step 14.17: Also as a dependency

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 14efe13..42342ca 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -12,6 +12,7 @@ import { name as PartyAdd } from '../partyAdd/partyAdd';
 import { name as PartyRemove } from '../partyRemove/partyRemove';
 import { name as PartyCreator } from '../partyCreator/partyCreator';
 import { name as PartyRsvp } from '../partyRsvp/partyRsvp';
+import { name as PartyRsvpsList } from '../partyRsvpsList/partyRsvpsList';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -65,7 +66,8 @@ export default angular.module(name, [
   PartyAdd,
   PartyRemove,
   PartyCreator,
-  PartyRsvp
+  PartyRsvp,
+  PartyRsvpsList
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From d97b949830bd57081c81c8614c1d5836b6a404c9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:57:13 +0200
Subject: [PATCH 169/414] Step 14.18: Create view for PartyRsvpUsers component

---
 imports/ui/components/partyRsvpUsers/partyRsvpUsers.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 imports/ui/components/partyRsvpUsers/partyRsvpUsers.html

diff --git a/imports/ui/components/partyRsvpUsers/partyRsvpUsers.html b/imports/ui/components/partyRsvpUsers/partyRsvpUsers.html
new file mode 100644
index 0000000..445d426
--- /dev/null
+++ b/imports/ui/components/partyRsvpUsers/partyRsvpUsers.html
@@ -0,0 +1,5 @@
+<div ng-repeat="rsvp in partyRsvpUsers.rsvps | filter:{ rsvp: partyRsvpUsers.type }">
+  {{ partyRsvpUsers.getUserById(rsvp.user) | displayNameFilter }}
+  -
+  {{ partyRsvpUsers.type }}
+</div>
-- 
2.7.4


From a2611367222c2d19ac82b405ab58df9e926182d6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:57:30 +0200
Subject: [PATCH 170/414] Step 14.19: Create component

---
 .../ui/components/partyRsvpUsers/partyRsvpUsers.js | 29 ++++++++++++++++++++++
 1 file changed, 29 insertions(+)
 create mode 100644 imports/ui/components/partyRsvpUsers/partyRsvpUsers.js

diff --git a/imports/ui/components/partyRsvpUsers/partyRsvpUsers.js b/imports/ui/components/partyRsvpUsers/partyRsvpUsers.js
new file mode 100644
index 0000000..1b4f1fa
--- /dev/null
+++ b/imports/ui/components/partyRsvpUsers/partyRsvpUsers.js
@@ -0,0 +1,29 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyRsvpUsers.html';
+import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
+
+class PartyRsvpUsers {
+  getUserById(userId) {
+    return Meteor.users.findOne(userId);
+  }
+}
+
+const name = 'partyRsvpUsers';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  DisplayNameFilter
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    rsvps: '<',
+    type: '@'
+  },
+  controller: PartyRsvpUsers
+});
-- 
2.7.4


From 8d2a123133cd403abe303b92a5dd33dc6b452df2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:57:56 +0200
Subject: [PATCH 171/414] Step 14.20: Use recently created component

---
 imports/ui/components/partyRsvpsList/partyRsvpsList.html | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.html b/imports/ui/components/partyRsvpsList/partyRsvpsList.html
index efc38ed..2e1749d 100644
--- a/imports/ui/components/partyRsvpsList/partyRsvpsList.html
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.html
@@ -4,3 +4,7 @@ Maybe -
 {{ (partyRsvpsList.rsvps | filter:{rsvp:'maybe'}).length }}
 No -
 {{ (partyRsvpsList.rsvps | filter:{rsvp:'no'}).length }}
+
+<party-rsvp-users rsvps="partyRsvpsList.rsvps" type="yes"></party-rsvp-users>
+<party-rsvp-users rsvps="partyRsvpsList.rsvps" type="maybe"></party-rsvp-users>
+<party-rsvp-users rsvps="partyRsvpsList.rsvps" type="no"></party-rsvp-users>
-- 
2.7.4


From 5154929ed6e2694137bb79f9937cd4a04787caef Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:58:15 +0200
Subject: [PATCH 172/414] Step 14.21: Add as a dependency

---
 imports/ui/components/partyRsvpsList/partyRsvpsList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.js b/imports/ui/components/partyRsvpsList/partyRsvpsList.js
index 755c9f9..c1ebd92 100644
--- a/imports/ui/components/partyRsvpsList/partyRsvpsList.js
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.js
@@ -2,6 +2,7 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
 import template from './partyRsvpsList.html';
+import { name as PartyRsvpUsers } from '../partyRsvpUsers/partyRsvpUsers';
 
 class PartyRsvpsList { }
 
@@ -9,7 +10,8 @@ const name = 'partyRsvpsList';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor
+  angularMeteor,
+  PartyRsvpUsers
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From b5472def3a9e38e3d892a8f03580c104bebdc5d1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 17:59:25 +0200
Subject: [PATCH 173/414] Step 14.22: Create view for PartyUnanswered

---
 imports/ui/components/partyUnanswered/partyUnanswered.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 imports/ui/components/partyUnanswered/partyUnanswered.html

diff --git a/imports/ui/components/partyUnanswered/partyUnanswered.html b/imports/ui/components/partyUnanswered/partyUnanswered.html
new file mode 100644
index 0000000..ecc1b45
--- /dev/null
+++ b/imports/ui/components/partyUnanswered/partyUnanswered.html
@@ -0,0 +1,5 @@
+<ul>
+  <li ng-repeat="invitedUser in partyUnanswered.getUnanswered()">
+    {{ partyUnanswered.getUserById(invitedUser) | displayNameFilter }}
+  </li>
+</ul>
-- 
2.7.4


From d06ccbf1c8b501a7dd86404f074455858fe2a696 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 18:02:22 +0200
Subject: [PATCH 174/414] Step 14.23: Create component

---
 .../components/partyUnanswered/partyUnanswered.js  | 39 ++++++++++++++++++++++
 1 file changed, 39 insertions(+)
 create mode 100644 imports/ui/components/partyUnanswered/partyUnanswered.js

diff --git a/imports/ui/components/partyUnanswered/partyUnanswered.js b/imports/ui/components/partyUnanswered/partyUnanswered.js
new file mode 100644
index 0000000..39f2115
--- /dev/null
+++ b/imports/ui/components/partyUnanswered/partyUnanswered.js
@@ -0,0 +1,39 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+import _ from 'underscore';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyUnanswered.html';
+import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
+
+class PartyUnanswered {
+  getUnanswered() {
+    if (!this.party || !this.party.invited) {
+      return;
+    }
+
+    return this.party.invited.filter((user) => {
+      return !_.findWhere(this.party.rsvps, { user });
+    });
+  }
+
+  getUserById(userId) {
+    return Meteor.users.findOne(userId)
+  }
+}
+
+const name = 'partyUnanswered';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  DisplayNameFilter
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    party: '<'
+  },
+  controller: PartyUnanswered
+});
-- 
2.7.4


From b7922d2796850346490649feab3df869aa3d7533 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 18:02:52 +0200
Subject: [PATCH 175/414] Step 14.24: Use recently created component

---
 imports/ui/components/partiesList/partiesList.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 60dbea3..4881e5c 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -13,6 +13,7 @@
     <party-remove party="party"></party-remove>
     <party-rsvp party="party"></party-rsvp>
     <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
+    <party-unanswered party="party"></party-unanswered>
     <party-creator party="party"></party-creator>
   </li>
 </ul>
-- 
2.7.4


From 1dc2a39854420da627f850a38fd983a1e2fb9af2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 18:03:12 +0200
Subject: [PATCH 176/414] Step 14.25: Add as a dependency

---
 imports/ui/components/partiesList/partiesList.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 42342ca..a20e777 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -13,6 +13,7 @@ import { name as PartyRemove } from '../partyRemove/partyRemove';
 import { name as PartyCreator } from '../partyCreator/partyCreator';
 import { name as PartyRsvp } from '../partyRsvp/partyRsvp';
 import { name as PartyRsvpsList } from '../partyRsvpsList/partyRsvpsList';
+import { name as PartyUnanswered } from '../partyUnanswered/partyUnanswered';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -67,7 +68,8 @@ export default angular.module(name, [
   PartyRemove,
   PartyCreator,
   PartyRsvp,
-  PartyRsvpsList
+  PartyRsvpsList,
+  PartyUnanswered
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From c55ff873b4cd821db7b3e7c2c9584ac917a82e94 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 18:03:38 +0200
Subject: [PATCH 177/414] Step 14.26: Subscribe `users`

---
 imports/ui/components/partiesList/partiesList.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index a20e777..e745b39 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -35,6 +35,8 @@ class PartiesList {
       }, this.getReactively('searchText')
     ]);
 
+    this.subscribe('users');
+
     this.helpers({
       parties() {
         return Parties.find({}, {
-- 
2.7.4


From 1ac2e7967248ef323f10b8570caffb0ae0b38dc5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 19:50:23 +0200
Subject: [PATCH 178/414] Step 14.27: Tests of invite method

---
 imports/api/parties/methods.tests.js | 126 +++++++++++++++++++++++++++++++++++
 1 file changed, 126 insertions(+)
 create mode 100644 imports/api/parties/methods.tests.js

diff --git a/imports/api/parties/methods.tests.js b/imports/api/parties/methods.tests.js
new file mode 100644
index 0000000..56e770c
--- /dev/null
+++ b/imports/api/parties/methods.tests.js
@@ -0,0 +1,126 @@
+import { invite } from './methods';
+import { Parties } from './collection';
+
+import { Meteor } from 'meteor/meteor';
+
+if (Meteor.isServer) {
+  describe('Parties / Methods', () => {
+    describe('invite', () => {
+      function loggedIn(userId = 'userId') {
+        return {
+          userId
+        };
+      }
+
+      it('should be called from Method', () => {
+        spyOn(invite, 'apply');
+
+        try {
+          Meteor.call('invite');
+        } catch (e) {}
+
+        expect(invite.apply).toHaveBeenCalled();
+      });
+
+      it('should fail on missing partyId', () => {
+        expect(() => {
+          invite.call({});
+        }).toThrowError();
+      });
+
+      it('should fail on missing userId', () => {
+        expect(() => {
+          invite.call({}, 'partyId');
+        }).toThrowError();
+      });
+
+      it('should fail on not logged in', () => {
+        expect(() => {
+          invite.call({}, 'partyId', 'userId');
+        }).toThrowError(/logged in/i);
+      });
+
+      it('should look for a party', () => {
+        const partyId = 'partyId';
+        spyOn(Parties, 'findOne');
+
+        try {
+          invite.call(loggedIn(), partyId, 'userId');
+        } catch (e) {}
+
+        expect(Parties.findOne).toHaveBeenCalledWith(partyId);
+      });
+
+      it('should fail if party does not exist', () => {
+        spyOn(Parties, 'findOne').and.returnValue(undefined);
+
+        expect(() => {
+          invite.call(loggedIn(), 'partyId', 'userId');
+        }).toThrowError(/404/);
+      });
+
+      it('should fail if logged in user is not the owner', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'notUserId'
+        });
+
+        expect(() => {
+          invite.call(loggedIn(), 'partyId', 'userId');
+        }).toThrowError(/404/);
+      });
+
+      it('should fail on public party', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId',
+          public: true
+        });
+
+        expect(() => {
+          invite.call(loggedIn(), 'partyId', 'userId');
+        }).toThrowError(/400/);
+      });
+
+      it('should NOT invite user who is the owner', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId'
+        });
+        spyOn(Parties, 'update');
+
+        invite.call(loggedIn(), 'partyId', 'userId');
+
+        expect(Parties.update).not.toHaveBeenCalled();
+      });
+
+      it('should NOT invite user who has been already invited', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId',
+          invited: ['invitedId']
+        });
+        spyOn(Parties, 'update');
+
+        invite.call(loggedIn(), 'partyId', 'invitedId');
+
+        expect(Parties.update).not.toHaveBeenCalled();
+      });
+
+      it('should invite user who has not been invited and is not the owner', () => {
+        const partyId = 'partyId';
+        const userId = 'notInvitedId';
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId',
+          invited: ['invitedId']
+        });
+        spyOn(Parties, 'update');
+        spyOn(Meteor.users, 'findOne').and.returnValue({});
+
+        invite.call(loggedIn(), partyId, userId);
+
+        expect(Parties.update).toHaveBeenCalledWith(partyId, {
+          $addToSet: {
+            invited: userId
+          }
+        });
+      });
+    });
+  });
+}
-- 
2.7.4


From 619ad2cbe164f324eeeeab8f19cdfbe07fd42844 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:00:03 +0200
Subject: [PATCH 179/414] Step 14.28: Tests of rsvp Method

---
 imports/api/parties/methods.tests.js | 54 +++++++++++++++++++++++++++++++++++-
 1 file changed, 53 insertions(+), 1 deletion(-)

diff --git a/imports/api/parties/methods.tests.js b/imports/api/parties/methods.tests.js
index 56e770c..536a2b0 100644
--- a/imports/api/parties/methods.tests.js
+++ b/imports/api/parties/methods.tests.js
@@ -1,4 +1,4 @@
-import { invite } from './methods';
+import { invite, rsvp } from './methods';
 import { Parties } from './collection';
 
 import { Meteor } from 'meteor/meteor';
@@ -122,5 +122,57 @@ if (Meteor.isServer) {
         });
       });
     });
+
+    describe('rsvp', () => {
+      function loggedIn(userId = 'userId') {
+        return {
+          userId
+        };
+      }
+
+      it('should be called from Method', () => {
+        spyOn(rsvp, 'apply');
+
+        try {
+          Meteor.call('rsvp');
+        } catch (e) {}
+
+        expect(rsvp.apply).toHaveBeenCalled();
+      });
+
+      it('should fail on missing partyId', () => {
+        expect(() => {
+          rsvp.call({});
+        }).toThrowError();
+      });
+
+      it('should fail on missing rsvp', () => {
+        expect(() => {
+          rsvp.call({}, 'partyId');
+        }).toThrowError();
+      });
+
+      it('should fail if not logged in', () => {
+        expect(() => {
+          rsvp.call({}, 'partyId', 'rsvp');
+        }).toThrowError(/403/);
+      });
+
+      it('should fail on wrong answer', () => {
+        expect(() => {
+          rsvp.call(loggedIn(), 'partyId', 'wrong');
+        }).toThrowError(/400/);
+      });
+
+      ['yes', 'maybe', 'no'].forEach((answer) => {
+        it(`should pass on '${answer}'`, () => {
+          expect(() => {
+            rsvp.call(loggedIn(), 'partyId', answer);
+          }).not.toThrowError(/400/);
+        });
+      });
+
+      // TODO: more tests  
+    });
   });
 }
-- 
2.7.4


From a1da1b123fe82986b66e0a20b78ccd322e8c1369 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:07:36 +0200
Subject: [PATCH 180/414] Step 15.1: Add ngShow to PartyAdd

---
 imports/ui/components/partiesList/partiesList.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 4881e5c..d6d4c83 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,4 +1,4 @@
-<party-add></party-add>
+<party-add ng-show="partiesList.isLoggedIn"></party-add>
 
 <input type="search" ng-model="partiesList.searchText" placeholder="Search" />
 
-- 
2.7.4


From 5f809a347569cd30195b5ea165b5c4af720d4155 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:09:16 +0200
Subject: [PATCH 181/414] Step 15.2: Add isLoggedIn helper

---
 imports/ui/components/partiesList/partiesList.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index e745b39..fcf7bbf 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -45,6 +45,9 @@ class PartiesList {
       },
       partiesCount() {
         return Counts.get('numberOfParties');
+      },
+      isLoggedIn() {
+        return !!Meteor.userId();
       }
     });
   }
-- 
2.7.4


From 75c740bcc94761572ddd4067a20f28de1cccb958 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:09:45 +0200
Subject: [PATCH 182/414] Step 15.3: Add usage for ng-hide

---
 imports/ui/components/partiesList/partiesList.html | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index d6d4c83..c3006d3 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,4 +1,7 @@
 <party-add ng-show="partiesList.isLoggedIn"></party-add>
+<div ng-hide="partiesList.isLoggedIn">
+  Log in to create a party!
+</div>
 
 <input type="search" ng-model="partiesList.searchText" placeholder="Search" />
 
-- 
2.7.4


From e60f5b68b80c0e5f17c99924ae74261fb3b41e9e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:10:23 +0200
Subject: [PATCH 183/414] Step 15.4: Add ngShow to PartyRsvp

---
 imports/ui/components/partiesList/partiesList.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index c3006d3..07d331f 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -14,7 +14,7 @@
     </a>
     <p>{{party.description}}</p>
     <party-remove party="party"></party-remove>
-    <party-rsvp party="party"></party-rsvp>
+    <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
     <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
     <party-unanswered party="party"></party-unanswered>
     <party-creator party="party"></party-creator>
-- 
2.7.4


From b4eb691d1513dcaf17c4c8d5a5038559665c7cb4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:10:48 +0200
Subject: [PATCH 184/414] Step 15.5: Add message for not-logged in users on the
 RSVP buttons

---
 imports/ui/components/partiesList/partiesList.html | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 07d331f..3b4a085 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -15,6 +15,10 @@
     <p>{{party.description}}</p>
     <party-remove party="party"></party-remove>
     <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
+    <div ng-hide="partiesList.isLoggedIn">
+      <i>Sign in to RSVP for this party.</i>
+    </div>
+    
     <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
     <party-unanswered party="party"></party-unanswered>
     <party-creator party="party"></party-creator>
-- 
2.7.4


From 38455d48ba1fd47d56618f966bdba649df0184b5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:12:56 +0200
Subject: [PATCH 185/414] Step 15.6: Add isOwner method

---
 imports/ui/components/partiesList/partiesList.js | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index fcf7bbf..58dd939 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -48,10 +48,17 @@ class PartiesList {
       },
       isLoggedIn() {
         return !!Meteor.userId();
+      },
+      currentUserId() {
+        return Meteor.userId();
       }
     });
   }
 
+  isOwner(party) {
+    return this.isLoggedIn && party.owner === this.currentUserId;
+  }
+
   pageChanged(newPage) {
     this.page = newPage;
   }
-- 
2.7.4


From 2b2673b96dc5d880a6b93787d5bbc5797a140097 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:13:51 +0200
Subject: [PATCH 186/414] Step 15.7: Add ngShow to PartyRemove

---
 imports/ui/components/partiesList/partiesList.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 3b4a085..fbc61a9 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -13,12 +13,12 @@
       {{party.name}}
     </a>
     <p>{{party.description}}</p>
-    <party-remove party="party"></party-remove>
+    <party-remove party="party" ng-show="partiesList.isOwner(party)"></party-remove>
     <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
     <div ng-hide="partiesList.isLoggedIn">
       <i>Sign in to RSVP for this party.</i>
     </div>
-    
+
     <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
     <party-unanswered party="party"></party-unanswered>
     <party-creator party="party"></party-creator>
-- 
2.7.4


From 19559ad7bf68ebd75e9ba0630f73a01dbac7d6f9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:15:08 +0200
Subject: [PATCH 187/414] Step 15.8: Add ngIf to PartyUnanswered

---
 imports/ui/components/partiesList/partiesList.html | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index fbc61a9..c4cc2c1 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -20,7 +20,12 @@
     </div>
 
     <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
-    <party-unanswered party="party"></party-unanswered>
+
+    <party-unanswered party="party" ng-if="!party.public"></party-unanswered>
+    <div ng-if="party.public">
+      Everyone is invited
+    </div>
+
     <party-creator party="party"></party-creator>
   </li>
 </ul>
-- 
2.7.4


From ba707ee3def378728258ba077354583299bdf998 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:16:17 +0200
Subject: [PATCH 188/414] Step 15.9: Add canInvite method to the component

---
 imports/ui/components/partyDetails/partyDetails.js | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 5443915..aa4faf4 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -31,6 +31,14 @@ class PartyDetails {
     });
   }
 
+  canInvite() {
+    if (!this.party) {
+      return false;
+    }
+
+    return !this.party.public && this.party.owner === Meteor.userId();
+  }
+
   save() {
     Parties.update({
       _id: this.party._id
-- 
2.7.4


From 6f16a475e55a1815fce6fc1009a3317538ad30ac Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:18:07 +0200
Subject: [PATCH 189/414] Step 15.10: Add ngShow to PartyUninvited

---
 imports/ui/components/partyDetails/partyDetails.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index 0e46f30..4e1e63b 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -8,4 +8,4 @@ The party you selected is:
 
 <button ui-sref="parties">Back</button>
 
-<party-uninvited party="partyDetails.party"></party-uninvited>
+<party-uninvited party="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
-- 
2.7.4


From baf6a5572d0475914ebf605f4dee002b435d1c47 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:18:54 +0200
Subject: [PATCH 190/414] Step 15.11: Add info that everyone are already
 invited

---
 imports/ui/components/partyUninvited/partyUninvited.html | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index 0cbb435..86d2519 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -4,4 +4,7 @@
     <div>{{ user | displayNameFilter }}</div>
     <button ng-click="partyUninvited.invite(user)">Invite</button>
   </li>
+  <li ng-if="(partyUninvited.users | uninvitedFilter:partyUninvited.party).length <= 0">
+    Everyone are already invited.
+  </li>
 </ul>
-- 
2.7.4


From 43955515591ff7380b535b5a4f8e8fb227fbc279 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:19:54 +0200
Subject: [PATCH 191/414] Step 15.12: Add isOwner helper to the party details
 component

---
 imports/ui/components/partyDetails/partyDetails.js | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index aa4faf4..598221c 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -27,6 +27,16 @@ class PartyDetails {
       },
       users() {
         return Meteor.users.find({});
+      },
+      isLoggedIn() {
+        return !!Meteor.userId();
+      },
+      isOwner() {
+        if (!this.party) {
+          return false;
+        }
+
+        return this.party.owner === Meteor.userId();
       }
     });
   }
-- 
2.7.4


From b5abe5d5c818d75f7660cf6eda47585df8546114 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:20:39 +0200
Subject: [PATCH 192/414] Step 15.13: Add usage for ng-disabled

---
 imports/ui/components/partyDetails/partyDetails.html | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index 4e1e63b..ef087f2 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -1,8 +1,8 @@
 The party you selected is:
 <form>
-  Party name: <input type="text" ng-model="partyDetails.party.name" />
-  Description: <input type="text" ng-model="partyDetails.party.description" />
-  Public Party? <input type="checkbox" ng-model="partyDetails.party.public">
+  Party name: <input type="text" ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner"/>
+  Description: <input type="text" ng-model="partyDetails.party.description" ng-disabled="!partyDetails.isOwner"/>
+  Public Party? <input type="checkbox" ng-model="partyDetails.party.public" ng-disabled="!partyDetails.isOwner"/>
   <button ng-click="partyDetails.save()">Save</button>
 </form>
 
-- 
2.7.4


From c30dafe97abfac9061b66619ee5fc0b51a919a0b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:22:55 +0200
Subject: [PATCH 193/414] Step 16.1: Install `angular-google-maps`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 9e6806d..46fd0f7 100644
--- a/package.json
+++ b/package.json
@@ -7,6 +7,7 @@
   },
   "dependencies": {
     "angular": "^1.5.3",
+    "angular-google-maps": "^2.3.2",
     "angular-meteor": "^1.3.9",
     "angular-ui-router": "^0.2.18",
     "angular-utils-pagination": "^0.11.1",
-- 
2.7.4


From 04be03e5f38ae5f9a81ecd4dc9b3ec1eaec76ef2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:23:36 +0200
Subject: [PATCH 194/414] Step 16.2: Install `angular-simple-logger`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 46fd0f7..af5599d 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     "angular-google-maps": "^2.3.2",
     "angular-meteor": "^1.3.9",
     "angular-ui-router": "^0.2.18",
+    "angular-simple-logger": "^0.1.7",
     "angular-utils-pagination": "^0.11.1",
     "meteor-node-stubs": "~0.2.0",
     "underscore": "^1.8.3"
-- 
2.7.4


From 748cce4f6729a09e4fca7dc124cf30c87620a85e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:24:57 +0200
Subject: [PATCH 195/414] Step 16.3: Create template for PartyMap

---
 imports/ui/components/partyMap/partyMap.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 imports/ui/components/partyMap/partyMap.html

diff --git a/imports/ui/components/partyMap/partyMap.html b/imports/ui/components/partyMap/partyMap.html
new file mode 100644
index 0000000..e590420
--- /dev/null
+++ b/imports/ui/components/partyMap/partyMap.html
@@ -0,0 +1,5 @@
+<div class="angular-google-map-container">
+  <ui-gmap-google-map center="partyMap.location || partyMap.map.center" events="partyMap.map.events" zoom="partyMap.map.zoom">
+    <ui-gmap-marker coords="partyMap.location" options="partyMap.marker.options" events="partyMapmarker.events" idKey="party-location"></ui-gmap-marker>
+  </ui-gmap-google-map>
+</div>
-- 
2.7.4


From e5719d24c1c7f6316bafcb8ebe629a61abfae1c1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:25:56 +0200
Subject: [PATCH 196/414] Step 16.4: Create component

---
 imports/ui/components/partyMap/partyMap.js | 44 ++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)
 create mode 100644 imports/ui/components/partyMap/partyMap.js

diff --git a/imports/ui/components/partyMap/partyMap.js b/imports/ui/components/partyMap/partyMap.js
new file mode 100644
index 0000000..824df5c
--- /dev/null
+++ b/imports/ui/components/partyMap/partyMap.js
@@ -0,0 +1,44 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+import 'angular-simple-logger';
+import 'angular-google-maps';
+
+import template from './partyMap.html';
+
+class PartyMap {
+  constructor($scope) {
+    'ngInject';
+
+    this.map = {
+      center: {
+        latitude: 45,
+        longitude: -73
+      },
+      zoom: 8,
+      events: {}
+    };
+
+    this.marker = {
+      options: {
+        draggable: true
+      },
+      events: {}
+    };
+  }
+}
+
+const name = 'partyMap';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  'nemLogging', // https://github.com/angular-ui/angular-google-maps/issues/1633
+  'uiGmapgoogle-maps'
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    location: '='
+  },
+  controller: PartyMap
+});
-- 
2.7.4


From 1e7cad616c660787753938615db8757b79bb380c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:27:32 +0200
Subject: [PATCH 197/414] Step 16.5: Add some class

---
 imports/ui/components/partyMap/partyMap.css | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 imports/ui/components/partyMap/partyMap.css

diff --git a/imports/ui/components/partyMap/partyMap.css b/imports/ui/components/partyMap/partyMap.css
new file mode 100644
index 0000000..f4b49f5
--- /dev/null
+++ b/imports/ui/components/partyMap/partyMap.css
@@ -0,0 +1,4 @@
+.angular-google-map-container {
+  height: 400px;
+  width: 400px;
+}
-- 
2.7.4


From 3ea99320ef60563d66e9e285a186e64eca4faeb5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:28:08 +0200
Subject: [PATCH 198/414] Step 16.6: Import styles

---
 imports/ui/components/partyMap/partyMap.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partyMap/partyMap.js b/imports/ui/components/partyMap/partyMap.js
index 824df5c..d240c5b 100644
--- a/imports/ui/components/partyMap/partyMap.js
+++ b/imports/ui/components/partyMap/partyMap.js
@@ -3,6 +3,7 @@ import angularMeteor from 'angular-meteor';
 import 'angular-simple-logger';
 import 'angular-google-maps';
 
+import './partyMap.css';
 import template from './partyMap.html';
 
 class PartyMap {
-- 
2.7.4


From 5f2d8ab625a00706aa62e7a8a07be578a7305b4e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:29:34 +0200
Subject: [PATCH 199/414] Step 16.7: Add as a dependency to PartyDetails

---
 imports/ui/components/partyDetails/partyDetails.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index 598221c..d3c75ee 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -7,6 +7,7 @@ import { Meteor } from 'meteor/meteor';
 import template from './partyDetails.html';
 import { Parties } from '../../../api/parties';
 import { name as PartyUninvited } from '../partyUninvited/partyUninvited';
+import { name as PartyMap } from '../partyMap/partyMap';
 
 class PartyDetails {
   constructor($stateParams, $scope, $reactive) {
@@ -74,7 +75,8 @@ const name = 'partyDetails';
 export default angular.module(name, [
   angularMeteor,
   uiRouter,
-  PartyUninvited
+  PartyUninvited,
+  PartyMap
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From d7a78c97603a8daafaa5ae8418499becf1ff1cf6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:42:54 +0200
Subject: [PATCH 200/414] Step 16.8: Use in the view

---
 imports/ui/components/partyDetails/partyDetails.html | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index ef087f2..6cb2534 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -9,3 +9,5 @@ The party you selected is:
 <button ui-sref="parties">Back</button>
 
 <party-uninvited party="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
+
+<party-map location="partyDetails.party.location"></party-map>
-- 
2.7.4


From bf18c760a5ec1db7dfa12e16604aaefcfa31c578 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:44:36 +0200
Subject: [PATCH 201/414] Step 16.9: Add actions

---
 imports/ui/components/partyMap/partyMap.js | 21 +++++++++++++++++++--
 1 file changed, 19 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partyMap/partyMap.js b/imports/ui/components/partyMap/partyMap.js
index d240c5b..9db5069 100644
--- a/imports/ui/components/partyMap/partyMap.js
+++ b/imports/ui/components/partyMap/partyMap.js
@@ -16,14 +16,31 @@ class PartyMap {
         longitude: -73
       },
       zoom: 8,
-      events: {}
+      events: {
+        click: (mapModel, eventName, originalEventArgs) => {
+          this.setLocation(originalEventArgs[0].latLng.lat(), originalEventArgs[0].latLng.lng());
+          $scope.$apply();
+        }
+      }
     };
 
     this.marker = {
       options: {
         draggable: true
       },
-      events: {}
+      events: {
+        dragend: (marker, eventName, args) => {
+          this.setLocation(marker.getPosition().lat(), marker.getPosition().lng());
+          $scope.$apply();
+        }
+      }
+    };
+  }
+
+  setLocation(latitude, longitude) {
+    this.location = {
+      latitude,
+      longitude
     };
   }
 }
-- 
2.7.4


From 3b573d623cf35d20b62bdb653ca63d4fa73fdeaa Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:45:34 +0200
Subject: [PATCH 202/414] Step 16.10: Add location to be updated with a party

---
 imports/ui/components/partyDetails/partyDetails.js | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
index d3c75ee..86adc67 100644
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ b/imports/ui/components/partyDetails/partyDetails.js
@@ -57,7 +57,8 @@ class PartyDetails {
       $set: {
         name: this.party.name,
         description: this.party.description,
-        public: this.party.public
+        public: this.party.public,
+        location: this.party.location
       }
     }, (error) => {
       if (error) {
-- 
2.7.4


From afdca8d95cb0610eadd1119d957184bbf75d71b8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:49:27 +0200
Subject: [PATCH 203/414] Step 16.11: Create view for PartiesMap

---
 imports/ui/components/partiesMap/partiesMap.html | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 imports/ui/components/partiesMap/partiesMap.html

diff --git a/imports/ui/components/partiesMap/partiesMap.html b/imports/ui/components/partiesMap/partiesMap.html
new file mode 100644
index 0000000..a488738
--- /dev/null
+++ b/imports/ui/components/partiesMap/partiesMap.html
@@ -0,0 +1,5 @@
+<div class="angular-google-map-container">
+  <ui-gmap-google-map center="partiesMap.map.center" zoom="partiesMap.map.zoom">
+    <ui-gmap-markers models="partiesMap.parties" coords="'location'" fit="true" idkey="'_id'" doRebuildAll="true"></ui-gmap-markers>
+  </ui-gmap-google-map>
+</div>
-- 
2.7.4


From 15f685ccb16cf3cffb659a9855bbc14c449fea3b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:49:42 +0200
Subject: [PATCH 204/414] Step 16.12: Create component

---
 imports/ui/components/partiesMap/partiesMap.js | 37 ++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)
 create mode 100644 imports/ui/components/partiesMap/partiesMap.js

diff --git a/imports/ui/components/partiesMap/partiesMap.js b/imports/ui/components/partiesMap/partiesMap.js
new file mode 100644
index 0000000..1c94faf
--- /dev/null
+++ b/imports/ui/components/partiesMap/partiesMap.js
@@ -0,0 +1,37 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+import 'angular-simple-logger';
+import 'angular-google-maps';
+
+import template from './partiesMap.html';
+
+/**
+ * PartiesMap component
+ */
+class PartiesMap {
+  constructor() {
+    this.map = {
+      center: {
+        latitude: 45,
+        longitude: -73
+      },
+      zoom: 8
+    };
+  }
+}
+
+const name = 'partiesMap';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  'nemLogging', // https://github.com/angular-ui/angular-google-maps/issues/1633
+  'uiGmapgoogle-maps'
+]).component(name, {
+  template,
+  controllerAs: name,
+  bindings: {
+    parties: '='
+  },
+  controller: PartiesMap
+});
-- 
2.7.4


From 052047f1cedbf4925ce4f260596facdad7f9be68 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:49:56 +0200
Subject: [PATCH 205/414] Step 16.13: Add as a dependency

---
 imports/ui/components/partiesList/partiesList.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 58dd939..a8e8e0f 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -8,6 +8,7 @@ import { Counts } from 'meteor/tmeasday:publish-counts';
 import template from './partiesList.html';
 import { Parties } from '../../../api/parties';
 import { name as PartiesSort } from '../partiesSort/partiesSort';
+import { name as PartiesMap } from '../partiesMap/partiesMap';
 import { name as PartyAdd } from '../partyAdd/partyAdd';
 import { name as PartyRemove } from '../partyRemove/partyRemove';
 import { name as PartyCreator } from '../partyCreator/partyCreator';
@@ -76,6 +77,7 @@ export default angular.module(name, [
   uiRouter,
   utilsPagination,
   PartiesSort,
+  PartiesMap,
   PartyAdd,
   PartyRemove,
   PartyCreator,
-- 
2.7.4


From 1c0bc38af40af4f06f87895a7368d1f9db31b1d7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 7 Apr 2016 20:50:10 +0200
Subject: [PATCH 206/414] Step 16.14: Implement in the view

---
 imports/ui/components/partiesList/partiesList.html | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index c4cc2c1..a7984f6 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -31,3 +31,6 @@
 </ul>
 
 <dir-pagination-controls on-page-change="partiesList.pageChanged(newPageNumber)"></dir-pagination-controls>
+
+
+<parties-map parties="partiesList.parties"></parties-map>
-- 
2.7.4


From e6326c5251785c25df5cc43b284927c2af8f5c3a Mon Sep 17 00:00:00 2001
From: DAB0mB <emanor6@gmail.com>
Date: Wed, 19 Oct 2016 12:06:02 -0200
Subject: [PATCH 207/414] Step 16.15: Add Google Maps API key

---
 client/index.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/index.html b/client/index.html
index 0a26426..3497cde 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,5 +1,6 @@
 <head>
   <base href="/">
+  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbphq9crcdpecbseKX3Yx2LPxMRqWK-rc"></script>
 </head>
 <body>
   <socially></socially>
-- 
2.7.4


From cf1f1a81a1aca3b316b067c5e6bb510fb50d9d14 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 00:31:49 +0200
Subject: [PATCH 208/414] Step 17.1: Install `bootstrap`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index af5599d..158bf82 100644
--- a/package.json
+++ b/package.json
@@ -12,6 +12,7 @@
     "angular-ui-router": "^0.2.18",
     "angular-simple-logger": "^0.1.7",
     "angular-utils-pagination": "^0.11.1",
+    "bootstrap": "^4.0.0-alpha.2",
     "meteor-node-stubs": "~0.2.0",
     "underscore": "^1.8.3"
   },
-- 
2.7.4


From d05e942865d774a83f09559b976556b32f8d46ee Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 00:32:37 +0200
Subject: [PATCH 209/414] Step 17.2: Add `less` package

---
 .meteor/packages | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.meteor/packages b/.meteor/packages
index 27dfd39..4e35175 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -27,3 +27,4 @@ accounts-twitter
 tmeasday:publish-counts
 check
 email
+less
-- 
2.7.4


From bf7819da4e8ac175324ead078c34f3735246b7e7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 00:34:27 +0200
Subject: [PATCH 210/414] Step 17.3: Add main.less

---
 client/main.less | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 client/main.less

diff --git a/client/main.less b/client/main.less
new file mode 100644
index 0000000..1c1bc90
--- /dev/null
+++ b/client/main.less
@@ -0,0 +1,3 @@
+body {
+  background-color: #f9f9f9;
+}
-- 
2.7.4


From bd22f1f5b51acc681f3d1650f4ae75a30d8a3bb7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:03:30 +0200
Subject: [PATCH 211/414] Step 17.4: Import bootstrap

---
 client/main.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/main.js b/client/main.js
index 06731e1..52cb827 100644
--- a/client/main.js
+++ b/client/main.js
@@ -1,4 +1,5 @@
 import angular from 'angular';
+import 'bootstrap/dist/css/bootstrap.css';
 
 import { Meteor } from 'meteor/meteor';
 
-- 
2.7.4


From ee94c16cb2abd72cfa2f256aa8e7346eb015c55e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:04:28 +0200
Subject: [PATCH 212/414] Step 17.5: Import future Socially less file

---
 client/main.less | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/main.less b/client/main.less
index 1c1bc90..4368004 100644
--- a/client/main.less
+++ b/client/main.less
@@ -1,3 +1,5 @@
 body {
   background-color: #f9f9f9;
 }
+
+@import "../imports/ui/components/socially/socially.less";
-- 
2.7.4


From 09f1d35304340f7664ff63f4d5cbefa596b52378 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:05:42 +0200
Subject: [PATCH 213/414] Step 17.6: Refactor Socially

---
 imports/ui/components/socially/socially.html | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/imports/ui/components/socially/socially.html b/imports/ui/components/socially/socially.html
index 83c40e7..2e91050 100644
--- a/imports/ui/components/socially/socially.html
+++ b/imports/ui/components/socially/socially.html
@@ -1,5 +1,3 @@
-<login-buttons></login-buttons>
+<navigation class="navbar navbar-static-top navbar-dark bg-inverse"></navigation>
 
-<navigation></navigation>
-
-<div ui-view=""></div>
+<div ui-view="" class="container-fluid"></div>
-- 
2.7.4


From a4eb9cd672813726a8ea5f695fb862609d05acb8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:06:24 +0200
Subject: [PATCH 214/414] Step 17.7: Styles for Socially

---
 imports/ui/components/socially/socially.less | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/socially/socially.less

diff --git a/imports/ui/components/socially/socially.less b/imports/ui/components/socially/socially.less
new file mode 100644
index 0000000..eec0480
--- /dev/null
+++ b/imports/ui/components/socially/socially.less
@@ -0,0 +1,3 @@
+socially {
+  display: block;
+}
-- 
2.7.4


From 1ac81be4dbb7743a372d9772ad28510d22069bdf Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:06:51 +0200
Subject: [PATCH 215/414] Step 17.8: Refactor index.html

---
 client/index.html | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/client/index.html b/client/index.html
index 3497cde..937c41a 100644
--- a/client/index.html
+++ b/client/index.html
@@ -1,6 +1,11 @@
 <head>
+  <meta charset="utf-8">
+  <meta http-equiv="X-UA-Compatible" content="IE=edge">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
   <base href="/">
+  <title>Socially</title>
   <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbphq9crcdpecbseKX3Yx2LPxMRqWK-rc"></script>
+  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
 </head>
 <body>
   <socially></socially>
-- 
2.7.4


From a93d697f09db35aac241f19caac1f744d6fb8e58 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:07:16 +0200
Subject: [PATCH 216/414] Step 17.9: Refactor Navigation

---
 imports/ui/components/navigation/navigation.html | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/navigation/navigation.html b/imports/ui/components/navigation/navigation.html
index def2640..2bcae64 100644
--- a/imports/ui/components/navigation/navigation.html
+++ b/imports/ui/components/navigation/navigation.html
@@ -1,3 +1,6 @@
-<h1>
-  <a href="/parties">Home</a>
-</h1>
+<div class="fluid-container">
+  <div class="navbar-header">
+    <a href="/parties" class="navbar-brand">Socially</a>
+    <login-buttons class="navbar-brand"></login-buttons>
+  </div>
+</div>
-- 
2.7.4


From d48d4e44be45df0d57ca1f470b235d61cbc726a8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:08:18 +0200
Subject: [PATCH 217/414] Step 17.10: Styles for Navigation

---
 imports/ui/components/navigation/navigation.less | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/navigation/navigation.less

diff --git a/imports/ui/components/navigation/navigation.less b/imports/ui/components/navigation/navigation.less
new file mode 100644
index 0000000..4035b7b
--- /dev/null
+++ b/imports/ui/components/navigation/navigation.less
@@ -0,0 +1,3 @@
+navigation {
+  display: block;
+}
-- 
2.7.4


From a18366707001f97632e97215dcd3547648925b25 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:08:50 +0200
Subject: [PATCH 218/414] Step 17.11: Refactor PartiesList

---
 imports/ui/components/partiesList/partiesList.html | 94 ++++++++++++++--------
 1 file changed, 62 insertions(+), 32 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index a7984f6..29c4c69 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,36 +1,66 @@
-<party-add ng-show="partiesList.isLoggedIn"></party-add>
-<div ng-hide="partiesList.isLoggedIn">
-  Log in to create a party!
-</div>
-
-<input type="search" ng-model="partiesList.searchText" placeholder="Search" />
-
-<parties-sort on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
+<div class="container-fluid">
+  <div class="row">
+    <div class="col-md-12">
+      <party-add ng-show="partiesList.isLoggedIn"></party-add>
 
-<ul>
-  <li dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
-    <a ui-sref="partyDetails({ partyId: party._id })">
-      {{party.name}}
-    </a>
-    <p>{{party.description}}</p>
-    <party-remove party="party" ng-show="partiesList.isOwner(party)"></party-remove>
-    <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
-    <div ng-hide="partiesList.isLoggedIn">
-      <i>Sign in to RSVP for this party.</i>
+      <div class="alert alert-warning" role="alert" ng-hide="partiesList.isLoggedIn">
+        <strong>Warning!</strong>
+        Log in to create a party!
+      </div>
     </div>
-
-    <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
-
-    <party-unanswered party="party" ng-if="!party.public"></party-unanswered>
-    <div ng-if="party.public">
-      Everyone is invited
+  </div>
+  <div class="row">
+    <div class="col-md-12">
+      <h2>List of parties:</h2>
+      <form class="form-inline">
+        <div class="form-group">
+          <input type="search" ng-model="partiesList.searchText" placeholder="Search" class="form-control"/>
+        </div>
+        <parties-sort class="form-group" on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
+      </form>
     </div>
+  </div>
+  <div class="row">
+    <div class="col-md-6">
+      <ul class="parties">
+        <li dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
+          <div class="row">
+            <div class="col-sm-8">
+              <h3 class="party-name">
+                <a ui-sref="partyDetails({ partyId: party._id })">{{party.name}}</a>
+              </h3>
+              <p class="party-description">
+                {{party.description}}
+              </p>
+            </div>
+            <div class="col-sm-4">
+              <party-remove party="party" ng-show="partiesList.isOwner(party)"></party-remove>
+            </div>
+          </div>
+          <div class="row">
+            <div class="col-md-12">
+              <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
+              <div class="alert alert-warning" role="alert" ng-hide="partiesList.isLoggedIn">
+                <strong>Warning!</strong>
+                <i>Sign in to RSVP for this party.</i>
+              </div>
+            </div>
+          </div>
+          <div class="row">
+            <div class="col-md-4">
+              <party-creator party="party"></party-creator>
+            </div>
+            <div class="col-md-8">
+              <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
+            </div>
+          </div>
+        </li>
+      </ul>
 
-    <party-creator party="party"></party-creator>
-  </li>
-</ul>
-
-<dir-pagination-controls on-page-change="partiesList.pageChanged(newPageNumber)"></dir-pagination-controls>
-
-
-<parties-map parties="partiesList.parties"></parties-map>
+      <dir-pagination-controls on-page-change="partiesList.pageChanged(newPageNumber)"></dir-pagination-controls>
+    </div>
+    <div class="col-md-6">
+      <parties-map parties="partiesList.parties"></parties-map>
+    </div>
+  </div>
+</div>
-- 
2.7.4


From ceea3b7b79d2388e7432cb40604fe07a0648ed78 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:09:21 +0200
Subject: [PATCH 219/414] Step 17.12: Styles for PartiesList

---
 imports/ui/components/partiesList/partiesList.less | 30 ++++++++++++++++++++++
 1 file changed, 30 insertions(+)
 create mode 100644 imports/ui/components/partiesList/partiesList.less

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
new file mode 100644
index 0000000..6cd14df
--- /dev/null
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -0,0 +1,30 @@
+parties-list {
+  display: block;
+  padding: 25px 0;
+
+  ul.parties {
+    padding-left: 0;
+    list-style-type: none;
+
+    > li {
+      padding: 15px;
+      background-color: #fff;
+      margin: 15px 0;
+      border: 3px solid #eaeaea;
+
+     .party-name {
+       margin-top: 0px;
+       margin-bottom: 20px;
+       a {
+         text-decoration: none !important;
+         font-weight: 400;
+       }
+     }
+     .party-description {
+       font-weight: 300;
+       padding-left: 18px;
+       font-size: 14px;
+     }
+    }
+  }
+}
-- 
2.7.4


From c86fcadab39fca808785bde612d7b441fd1100ee Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:09:54 +0200
Subject: [PATCH 220/414] Step 17.13: Refactor PartyAdd

---
 imports/ui/components/partyAdd/partyAdd.html | 31 ++++++++++++++++------------
 1 file changed, 18 insertions(+), 13 deletions(-)

diff --git a/imports/ui/components/partyAdd/partyAdd.html b/imports/ui/components/partyAdd/partyAdd.html
index 4db1888..7c4d284 100644
--- a/imports/ui/components/partyAdd/partyAdd.html
+++ b/imports/ui/components/partyAdd/partyAdd.html
@@ -1,15 +1,20 @@
 <form>
-  <label>
-    Party Name:
-  </label>
-  <input type="text" ng-model="partyAdd.party.name" />
-  <label>
-    Description:
-  </label>
-  <input type="text" ng-model="partyAdd.party.description" />
-  <label>
-    Public Party?
-  </label>
-  <input type="checkbox" ng-model="partyAdd.party.public">
-  <button ng-click="partyAdd.submit()">Add Party!</button>
+  <div class="form-group">
+    <label>
+      Party Name:
+    </label>
+    <input type="text" ng-model="partyAdd.party.name" class="form-control"/>
+  </div>
+  <div class="form-group">
+    <label>
+      Description:
+    </label>
+    <input type="text" ng-model="partyAdd.party.description" class="form-control"/>
+  </div>
+  <div class="checkbox">
+    <label>
+      <input type="checkbox" ng-model="partyAdd.party.public"/> Public Party?
+    </label>
+  </div>
+  <button ng-click="partyAdd.submit()" class="btn btn-success">Add Party!</button>
 </form>
-- 
2.7.4


From 1a2a576891daf21a703e0ee26ff660f849d5397d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:10:22 +0200
Subject: [PATCH 221/414] Step 17.14: Styles for PartyAdd

---
 imports/ui/components/partyAdd/partyAdd.less | 10 ++++++++++
 1 file changed, 10 insertions(+)
 create mode 100644 imports/ui/components/partyAdd/partyAdd.less

diff --git a/imports/ui/components/partyAdd/partyAdd.less b/imports/ui/components/partyAdd/partyAdd.less
new file mode 100644
index 0000000..90b24c1
--- /dev/null
+++ b/imports/ui/components/partyAdd/partyAdd.less
@@ -0,0 +1,10 @@
+party-add {
+  display: block;
+}
+
+party-add > form {
+  padding: 15px;
+  margin-bottom: 25px;
+  background-color: #fff;
+  border: 3px solid #EAEAEC;
+}
-- 
2.7.4


From 113d3d9d5a51b34be6d957cbe9a0751532d3a620 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:11:05 +0200
Subject: [PATCH 222/414] Step 17.15: Import PartyAdd

---
 imports/ui/components/partiesList/partiesList.less | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index 6cd14df..645d165 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -28,3 +28,5 @@ parties-list {
     }
   }
 }
+
+@import "../partyAdd/partyAdd.less";
-- 
2.7.4


From 37add34f016be06beb287c150ce0019cd4f35e17 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:11:45 +0200
Subject: [PATCH 223/414] Step 17.16: Refactor PartiesMap

---
 imports/ui/components/partiesMap/partiesMap.html | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partiesMap/partiesMap.html b/imports/ui/components/partiesMap/partiesMap.html
index a488738..870b2f7 100644
--- a/imports/ui/components/partiesMap/partiesMap.html
+++ b/imports/ui/components/partiesMap/partiesMap.html
@@ -1,3 +1,6 @@
+<h4>
+  See all the parties:
+</h4>
 <div class="angular-google-map-container">
   <ui-gmap-google-map center="partiesMap.map.center" zoom="partiesMap.map.zoom">
     <ui-gmap-markers models="partiesMap.parties" coords="'location'" fit="true" idkey="'_id'" doRebuildAll="true"></ui-gmap-markers>
-- 
2.7.4


From 385095a7c2e844c1a357c38f71d637bf98de44c3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:12:13 +0200
Subject: [PATCH 224/414] Step 17.17: Styles for PartiesMap

---
 imports/ui/components/partiesMap/partiesMap.less | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 imports/ui/components/partiesMap/partiesMap.less

diff --git a/imports/ui/components/partiesMap/partiesMap.less b/imports/ui/components/partiesMap/partiesMap.less
new file mode 100644
index 0000000..020e970
--- /dev/null
+++ b/imports/ui/components/partiesMap/partiesMap.less
@@ -0,0 +1,9 @@
+parties-map {
+  display: block;
+  margin: 15px 5px;
+
+  .angular-google-map-container {
+    width: 100%;
+    height: 400px;
+  }
+}
-- 
2.7.4


From dbfc9e7eccc8f12c21e699407d3ab3059094a069 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:12:38 +0200
Subject: [PATCH 225/414] Step 17.18: Import PartiesMap

---
 imports/ui/components/partiesList/partiesList.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index 645d165..374d741 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -30,3 +30,4 @@ parties-list {
 }
 
 @import "../partyAdd/partyAdd.less";
+@import "../partiesMap/partiesMap.less";
-- 
2.7.4


From 62d3a615cdce0f88dba6cac514beb5458b6e702a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:13:05 +0200
Subject: [PATCH 226/414] Step 17.19: Refactor PartiesSort

---
 imports/ui/components/partiesSort/partiesSort.html | 10 ++++------
 1 file changed, 4 insertions(+), 6 deletions(-)

diff --git a/imports/ui/components/partiesSort/partiesSort.html b/imports/ui/components/partiesSort/partiesSort.html
index cf2102b..b2a52b3 100644
--- a/imports/ui/components/partiesSort/partiesSort.html
+++ b/imports/ui/components/partiesSort/partiesSort.html
@@ -1,6 +1,4 @@
-<div>
-  <select ng-model="partiesSort.order" ng-change="partiesSort.changed()">
-    <option value="1">Ascending</option>
-    <option value="-1">Descending</option>
-  </select>
-</div>
+<select ng-model="partiesSort.order" ng-change="partiesSort.changed()" class="form-control">
+  <option value="1">Ascending</option>
+  <option value="-1">Descending</option>
+</select>
-- 
2.7.4


From de0c83b2d915446b194a3c7153e7ca9031a3fb96 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:13:38 +0200
Subject: [PATCH 227/414] Step 17.20: Refactor PartyCreator

---
 imports/ui/components/partyCreator/partyCreator.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyCreator/partyCreator.html b/imports/ui/components/partyCreator/partyCreator.html
index de986fb..077739d 100644
--- a/imports/ui/components/partyCreator/partyCreator.html
+++ b/imports/ui/components/partyCreator/partyCreator.html
@@ -1,5 +1,5 @@
 <p>
   <small>
-    Posted by {{ partyCreator.creator | displayNameFilter }}
+    <i class="fa fa-user fa-lg"></i> {{ partyCreator.creator | displayNameFilter }}
   </small>
 </p>
-- 
2.7.4


From 1b48d5400d5dfd48e0a20ee4c409631630ce66a3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:14:04 +0200
Subject: [PATCH 228/414] Step 17.21: Styles for PartyCreator

---
 imports/ui/components/partyCreator/partyCreator.less | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 imports/ui/components/partyCreator/partyCreator.less

diff --git a/imports/ui/components/partyCreator/partyCreator.less b/imports/ui/components/partyCreator/partyCreator.less
new file mode 100644
index 0000000..4679f1f
--- /dev/null
+++ b/imports/ui/components/partyCreator/partyCreator.less
@@ -0,0 +1,6 @@
+party-creator {
+  i.fa {
+    margin-left: 5px;
+    margin-right: 10px;
+  }
+}
-- 
2.7.4


From d8b1b94b0d3eb5cfc2eee4c6be579462d43a6542 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:14:40 +0200
Subject: [PATCH 229/414] Step 17.22: Import PartyCreator

---
 imports/ui/components/partiesList/partiesList.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index 374d741..e73e928 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -31,3 +31,4 @@ parties-list {
 
 @import "../partyAdd/partyAdd.less";
 @import "../partiesMap/partiesMap.less";
+@import "../partyCreator/partyCreator.less";
-- 
2.7.4


From a4e7b8faa6825bbe3af0039fa80d38c70e7627b5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:15:08 +0200
Subject: [PATCH 230/414] Step 17.23: Refactor PartyRemove

---
 imports/ui/components/partyRemove/partyRemove.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyRemove/partyRemove.html b/imports/ui/components/partyRemove/partyRemove.html
index 1295105..ebe46ea 100644
--- a/imports/ui/components/partyRemove/partyRemove.html
+++ b/imports/ui/components/partyRemove/partyRemove.html
@@ -1 +1 @@
-<button ng-click="partyRemove.remove()">X</button>
+<button type="button" class="close" aria-label="Close" ng-click="partyRemove.remove()"><span aria-hidden="true">&times;</span></button>
-- 
2.7.4


From b7fcd6f7a5bcf44ea44b951bebd123b966e4e64a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:15:48 +0200
Subject: [PATCH 231/414] Step 17.24: Refactor PartyRsvp

---
 imports/ui/components/partyRsvp/partyRsvp.html | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/partyRsvp/partyRsvp.html b/imports/ui/components/partyRsvp/partyRsvp.html
index ca15260..e4c078c 100644
--- a/imports/ui/components/partyRsvp/partyRsvp.html
+++ b/imports/ui/components/partyRsvp/partyRsvp.html
@@ -1,3 +1,3 @@
-<input type="button" value="I'm going!" ng-click="partyRsvp.yes()"/>
-<input type="button" value="Maybe" ng-click="partyRsvp.maybe()"/>
-<input type="button" value="No" ng-click="partyRsvp.no()"/>
+<input type="button" value="I'm going!" ng-click="partyRsvp.yes()" class="btn btn-default" ng-class="{'btn-primary' : partyRsvp.isYes()}"/>
+<input type="button" value="Maybe" ng-click="partyRsvp.maybe()" class="btn btn-default" ng-class="{'btn-primary' : partyRsvp.isMaybe()}"/>
+<input type="button" value="No" ng-click="partyRsvp.no()" class="btn btn-default" ng-class="{'btn-primary' : partyRsvp.isNo()}"/>
-- 
2.7.4


From ec807f676fb497a07bd3c7fb27ed31b52b6d6883 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:16:13 +0200
Subject: [PATCH 232/414] Step 17.25: Styles for PartyRsvp

---
 imports/ui/components/partyRsvp/partyRsvp.less | 4 ++++
 1 file changed, 4 insertions(+)
 create mode 100644 imports/ui/components/partyRsvp/partyRsvp.less

diff --git a/imports/ui/components/partyRsvp/partyRsvp.less b/imports/ui/components/partyRsvp/partyRsvp.less
new file mode 100644
index 0000000..be52d51
--- /dev/null
+++ b/imports/ui/components/partyRsvp/partyRsvp.less
@@ -0,0 +1,4 @@
+party-rsvp {
+  display: block;
+  margin: 15px 0;
+}
-- 
2.7.4


From 3e20fbd45d9276ad6e9213c06881cdb518c77202 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:17:04 +0200
Subject: [PATCH 233/414] Step 17.26: Import PartyRsvp

---
 imports/ui/components/partiesList/partiesList.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index e73e928..be384ba 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -32,3 +32,4 @@ parties-list {
 @import "../partyAdd/partyAdd.less";
 @import "../partiesMap/partiesMap.less";
 @import "../partyCreator/partyCreator.less";
+@import "../partyRsvp/partyRsvp.less";
-- 
2.7.4


From 530c27811cdbed3804c511492210fb89d402d9b1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:17:32 +0200
Subject: [PATCH 234/414] Step 17.27: Refactor PartyRsvpsList

---
 .../components/partyRsvpsList/partyRsvpsList.html  | 36 ++++++++++++++++------
 1 file changed, 26 insertions(+), 10 deletions(-)

diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.html b/imports/ui/components/partyRsvpsList/partyRsvpsList.html
index 2e1749d..5c24b02 100644
--- a/imports/ui/components/partyRsvpsList/partyRsvpsList.html
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.html
@@ -1,10 +1,26 @@
-Who is coming: Yes -
-{{ (partyRsvpsList.rsvps | filter:{rsvp:'yes'}).length }}
-Maybe -
-{{ (partyRsvpsList.rsvps | filter:{rsvp:'maybe'}).length }}
-No -
-{{ (partyRsvpsList.rsvps | filter:{rsvp:'no'}).length }}
-
-<party-rsvp-users rsvps="partyRsvpsList.rsvps" type="yes"></party-rsvp-users>
-<party-rsvp-users rsvps="partyRsvpsList.rsvps" type="maybe"></party-rsvp-users>
-<party-rsvp-users rsvps="partyRsvpsList.rsvps" type="no"></party-rsvp-users>
+<div class="rsvp-sum">
+  <div class="rsvp-amount">
+    <div class="amount">
+      {{ (partyRsvpsList.rsvps | filter:{rsvp:'yes'}).length || 0 }}
+    </div>
+    <div class="rsvp-title">
+      YES
+    </div>
+  </div>
+  <div class="rsvp-amount">
+    <div class="amount">
+      {{ (partyRsvpsList.rsvps | filter:{rsvp:'maybe'}).length || 0 }}
+    </div>
+    <div class="rsvp-title">
+      MAYBE
+    </div>
+  </div>
+  <div class="rsvp-amount">
+    <div class="amount">
+      {{ (partyRsvpsList.rsvps | filter:{rsvp:'no'}).length || 0 }}
+    </div>
+    <div class="rsvp-title">
+      NO
+    </div>
+  </div>
+</div>
-- 
2.7.4


From fdcfa35b33cd556c941df67eb68c5b388d4e290c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:17:59 +0200
Subject: [PATCH 235/414] Step 17.28: Styles for PartyRsvpsList

---
 .../components/partyRsvpsList/partyRsvpsList.less  | 24 ++++++++++++++++++++++
 1 file changed, 24 insertions(+)
 create mode 100644 imports/ui/components/partyRsvpsList/partyRsvpsList.less

diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.less b/imports/ui/components/partyRsvpsList/partyRsvpsList.less
new file mode 100644
index 0000000..ca24446
--- /dev/null
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.less
@@ -0,0 +1,24 @@
+.rsvp-sum {
+  width: 160px;
+  @media (min-width: 400px) {
+    float: right;
+  }
+  @media (max-width: 400px) {
+    margin: 0 auto;
+  }
+  > .rsvp-amount {
+    display: inline-block;
+    text-align: center;
+    width: 50px;
+
+    > .amount {
+      font-weight: bold;
+      font-size: 20px;
+    }
+    > .rsvp-title {
+      font-size: 11px;
+      color: #aaa;
+      text-transform: uppercase;
+    }
+  }
+}
-- 
2.7.4


From ad1c63771daf037d4e8ccd867d159a2dc1784f0e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:18:30 +0200
Subject: [PATCH 236/414] Step 17.29: Import PartyRsvpsList

---
 imports/ui/components/partiesList/partiesList.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index be384ba..a1eac5c 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -33,3 +33,4 @@ parties-list {
 @import "../partiesMap/partiesMap.less";
 @import "../partyCreator/partyCreator.less";
 @import "../partyRsvp/partyRsvp.less";
+@import "../partyRsvpsList/partyRsvpsList.less";
-- 
2.7.4


From 75bedae57bad920c62e2c574ea528b61d88bba15 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:19:03 +0200
Subject: [PATCH 237/414] Step 17.30: Refactor PartyUninvited

---
 imports/ui/components/partyUninvited/partyUninvited.html | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index 86d2519..e9f9e1c 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -1,10 +1,10 @@
+<h4>Users to invite:</h4>
 <ul>
-  Users to invite:
   <li ng-repeat="user in partyUninvited.users | uninvitedFilter:partyUninvited.party">
-    <div>{{ user | displayNameFilter }}</div>
-    <button ng-click="partyUninvited.invite(user)">Invite</button>
-  </li>
-  <li ng-if="(partyUninvited.users | uninvitedFilter:partyUninvited.party).length <= 0">
-    Everyone are already invited.
+    <button ng-click="partyUninvited.invite(user)" class="btn btn-primary-outline">Invite</button>
+    {{ user | displayNameFilter }}
   </li>
 </ul>
+<div class="alert alert-success" role="alert" ng-if="(partyUninvited.users | uninvitedFilter:partyUninvited.party).length <= 0">
+  Everyone are already invited.
+</div>
-- 
2.7.4


From ba1e6ff5b0bede55d0e6aa743e2d50032e7f8c36 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:26:22 +0200
Subject: [PATCH 238/414] Step 17.31: Styles for PartyUninvited

---
 imports/ui/components/partyUninvited/partyUninvited.less | 8 ++++++++
 1 file changed, 8 insertions(+)
 create mode 100644 imports/ui/components/partyUninvited/partyUninvited.less

diff --git a/imports/ui/components/partyUninvited/partyUninvited.less b/imports/ui/components/partyUninvited/partyUninvited.less
new file mode 100644
index 0000000..52b27fe
--- /dev/null
+++ b/imports/ui/components/partyUninvited/partyUninvited.less
@@ -0,0 +1,8 @@
+party-uninvited {
+  display: block;
+
+  ul {
+    padding-left: 0;
+    list-style-type: none;
+  }
+}
-- 
2.7.4


From eb402ebb90908c8f35652b050ab9b4a729f1ef80 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:19:41 +0200
Subject: [PATCH 239/414] Step 17.32: Refactor PartyDetails

---
 .../ui/components/partyDetails/partyDetails.html   | 42 ++++++++++++++++------
 1 file changed, 32 insertions(+), 10 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index 6cb2534..58724af 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -1,13 +1,35 @@
-The party you selected is:
-<form>
-  Party name: <input type="text" ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner"/>
-  Description: <input type="text" ng-model="partyDetails.party.description" ng-disabled="!partyDetails.isOwner"/>
-  Public Party? <input type="checkbox" ng-model="partyDetails.party.public" ng-disabled="!partyDetails.isOwner"/>
-  <button ng-click="partyDetails.save()">Save</button>
-</form>
+<div class="container-fluid">
+  <div class="row">
+    <div class="col-md-6">
+      <form>
+        <fieldset class="form-group">
+          <label>Party name</label>
+          <input type="text" ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner" class="form-control"/>
+        </fieldset>
 
-<button ui-sref="parties">Back</button>
+        <fieldset class="form-group">
+          <label>Description</label>
+          <input type="text" ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner" class="form-control"/>
+        </fieldset>
 
-<party-uninvited party="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
+        <div class="checkbox">
+          <label>
+            <input type="checkbox" ng-model="partyDetails.party.public" ng-disabled="!partyDetails.isOwner"/>
+            Public Party?
+          </label>
+        </div>
 
-<party-map location="partyDetails.party.location"></party-map>
+        <button ng-click="partyDetails.save()" type="submit" class="btn btn-primary">Save</button>
+      </form>
+    </div>
+    <div class="col-md-6">
+      <party-map location="partyDetails.party.location"></party-map>
+    </div>
+  </div>
+
+  <div class="row">
+    <div class="col-md-6">
+      <party-uninvited party="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
+    </div>
+  </div>
+</div>
-- 
2.7.4


From cc39a4f2da5c2d93a39471f877911903516b9917 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:20:17 +0200
Subject: [PATCH 240/414] Step 17.33: Styles for PartyDetails

---
 imports/ui/components/partyDetails/partyDetails.less | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 imports/ui/components/partyDetails/partyDetails.less

diff --git a/imports/ui/components/partyDetails/partyDetails.less b/imports/ui/components/partyDetails/partyDetails.less
new file mode 100644
index 0000000..bfea863
--- /dev/null
+++ b/imports/ui/components/partyDetails/partyDetails.less
@@ -0,0 +1,9 @@
+party-details {
+  display: block;
+
+  form {
+    margin: 25px 0;
+  }
+}
+
+@import "../partyUninvited/partyUninvited.less";
-- 
2.7.4


From f63e78167084ae921520d4391aa78a43fcfc7d79 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:21:01 +0200
Subject: [PATCH 241/414] Step 17.34: Styles for PartyMap

---
 imports/ui/components/partyMap/partyMap.less | 10 ++++++++++
 1 file changed, 10 insertions(+)
 create mode 100644 imports/ui/components/partyMap/partyMap.less

diff --git a/imports/ui/components/partyMap/partyMap.less b/imports/ui/components/partyMap/partyMap.less
new file mode 100644
index 0000000..3b4bed1
--- /dev/null
+++ b/imports/ui/components/partyMap/partyMap.less
@@ -0,0 +1,10 @@
+party-map {
+  display: block;
+  width: 100%;
+  margin: 25px 0;
+
+  .angular-google-map-container {
+    width: 100%;
+    height: 400px;
+  }
+}
-- 
2.7.4


From 1dc4b066f66d7ae4b249b363b329dcfd326b56e5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:21:22 +0200
Subject: [PATCH 242/414] Step 17.35: Remove old css

---
 imports/ui/components/partyMap/partyMap.js | 1 -
 1 file changed, 1 deletion(-)

diff --git a/imports/ui/components/partyMap/partyMap.js b/imports/ui/components/partyMap/partyMap.js
index 9db5069..c062d30 100644
--- a/imports/ui/components/partyMap/partyMap.js
+++ b/imports/ui/components/partyMap/partyMap.js
@@ -3,7 +3,6 @@ import angularMeteor from 'angular-meteor';
 import 'angular-simple-logger';
 import 'angular-google-maps';
 
-import './partyMap.css';
 import template from './partyMap.html';
 
 class PartyMap {
-- 
2.7.4


From 8f96449953a748b580714517a00ea97f78e6096f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:21:43 +0200
Subject: [PATCH 243/414] Step 17.36: Delete old file

---
 imports/ui/components/partyMap/partyMap.css | 4 ----
 1 file changed, 4 deletions(-)
 delete mode 100644 imports/ui/components/partyMap/partyMap.css

diff --git a/imports/ui/components/partyMap/partyMap.css b/imports/ui/components/partyMap/partyMap.css
deleted file mode 100644
index f4b49f5..0000000
--- a/imports/ui/components/partyMap/partyMap.css
+++ /dev/null
@@ -1,4 +0,0 @@
-.angular-google-map-container {
-  height: 400px;
-  width: 400px;
-}
-- 
2.7.4


From 55158609f4439b047ddb656690c089804a706e49 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:22:35 +0200
Subject: [PATCH 244/414] Step 17.37: Import PartyMap

---
 imports/ui/components/partyDetails/partyDetails.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partyDetails/partyDetails.less b/imports/ui/components/partyDetails/partyDetails.less
index bfea863..a42c467 100644
--- a/imports/ui/components/partyDetails/partyDetails.less
+++ b/imports/ui/components/partyDetails/partyDetails.less
@@ -7,3 +7,4 @@ party-details {
 }
 
 @import "../partyUninvited/partyUninvited.less";
+@import "../partyMap/partyMap.less";
-- 
2.7.4


From 57b8cf637b843dd9aa4ddfb4e9fd84b97050dce8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:23:50 +0200
Subject: [PATCH 245/414] Step 17.38: Import missing files

---
 imports/ui/components/socially/socially.less | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/imports/ui/components/socially/socially.less b/imports/ui/components/socially/socially.less
index eec0480..3eabc12 100644
--- a/imports/ui/components/socially/socially.less
+++ b/imports/ui/components/socially/socially.less
@@ -1,3 +1,8 @@
 socially {
   display: block;
 }
+
+
+@import "../navigation/navigation.less";
+@import "../partiesList/partiesList.less";
+@import "../partyDetails/partyDetails.less";
-- 
2.7.4


From cbfc3df77f393f2a8ebe649e9c130e8b8e9576e7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 01:32:24 +0200
Subject: [PATCH 246/414] Step 17.39: Add checking methods

---
 imports/ui/components/partyRsvp/partyRsvp.js | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/imports/ui/components/partyRsvp/partyRsvp.js b/imports/ui/components/partyRsvp/partyRsvp.js
index 17aeb99..522cc38 100644
--- a/imports/ui/components/partyRsvp/partyRsvp.js
+++ b/imports/ui/components/partyRsvp/partyRsvp.js
@@ -1,5 +1,6 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
+import _ from 'underscore';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -9,14 +10,23 @@ class PartyRsvp {
   yes() {
     this.answer('yes');
   }
+  isYes() {
+    return this.isAnswer('yes');
+  }
 
   maybe() {
     this.answer('maybe');
   }
+  isMaybe() {
+    return this.isAnswer('maybe');
+  }
 
   no() {
     this.answer('no');
   }
+  isNo() {
+    return this.isAnswer('no');
+  }
 
   answer(answer) {
     Meteor.call('rsvp', this.party._id, answer, (error) => {
@@ -27,6 +37,14 @@ class PartyRsvp {
       }
     });
   }
+  isAnswer(answer) {
+    if(this.party) {
+      return !!_.findWhere(this.party.rsvps, {
+        user: Meteor.userId(),
+        rsvp: answer
+      });
+    }
+  }
 }
 
 const name = 'partyRsvp';
-- 
2.7.4


From 76415815f0c8685eb88c3628289262b41dde066a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:26:23 +0200
Subject: [PATCH 247/414] Step 17.40: Remove unused partyRsvpUsers

---
 .../components/partyRsvpUsers/partyRsvpUsers.html  |  5 ----
 .../ui/components/partyRsvpUsers/partyRsvpUsers.js | 29 ----------------------
 2 files changed, 34 deletions(-)
 delete mode 100644 imports/ui/components/partyRsvpUsers/partyRsvpUsers.html
 delete mode 100644 imports/ui/components/partyRsvpUsers/partyRsvpUsers.js

diff --git a/imports/ui/components/partyRsvpUsers/partyRsvpUsers.html b/imports/ui/components/partyRsvpUsers/partyRsvpUsers.html
deleted file mode 100644
index 445d426..0000000
--- a/imports/ui/components/partyRsvpUsers/partyRsvpUsers.html
+++ /dev/null
@@ -1,5 +0,0 @@
-<div ng-repeat="rsvp in partyRsvpUsers.rsvps | filter:{ rsvp: partyRsvpUsers.type }">
-  {{ partyRsvpUsers.getUserById(rsvp.user) | displayNameFilter }}
-  -
-  {{ partyRsvpUsers.type }}
-</div>
diff --git a/imports/ui/components/partyRsvpUsers/partyRsvpUsers.js b/imports/ui/components/partyRsvpUsers/partyRsvpUsers.js
deleted file mode 100644
index 1b4f1fa..0000000
--- a/imports/ui/components/partyRsvpUsers/partyRsvpUsers.js
+++ /dev/null
@@ -1,29 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyRsvpUsers.html';
-import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
-
-class PartyRsvpUsers {
-  getUserById(userId) {
-    return Meteor.users.findOne(userId);
-  }
-}
-
-const name = 'partyRsvpUsers';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  DisplayNameFilter
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    rsvps: '<',
-    type: '@'
-  },
-  controller: PartyRsvpUsers
-});
-- 
2.7.4


From b8ae431a8bed57af9c0e7361fec10143eb127752 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:26:40 +0200
Subject: [PATCH 248/414] Step 17.41: Remove unused partyUnanswered

---
 .../partyUnanswered/partyUnanswered.html           |  5 ---
 .../components/partyUnanswered/partyUnanswered.js  | 39 ----------------------
 2 files changed, 44 deletions(-)
 delete mode 100644 imports/ui/components/partyUnanswered/partyUnanswered.html
 delete mode 100644 imports/ui/components/partyUnanswered/partyUnanswered.js

diff --git a/imports/ui/components/partyUnanswered/partyUnanswered.html b/imports/ui/components/partyUnanswered/partyUnanswered.html
deleted file mode 100644
index ecc1b45..0000000
--- a/imports/ui/components/partyUnanswered/partyUnanswered.html
+++ /dev/null
@@ -1,5 +0,0 @@
-<ul>
-  <li ng-repeat="invitedUser in partyUnanswered.getUnanswered()">
-    {{ partyUnanswered.getUserById(invitedUser) | displayNameFilter }}
-  </li>
-</ul>
diff --git a/imports/ui/components/partyUnanswered/partyUnanswered.js b/imports/ui/components/partyUnanswered/partyUnanswered.js
deleted file mode 100644
index 39f2115..0000000
--- a/imports/ui/components/partyUnanswered/partyUnanswered.js
+++ /dev/null
@@ -1,39 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import _ from 'underscore';
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyUnanswered.html';
-import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
-
-class PartyUnanswered {
-  getUnanswered() {
-    if (!this.party || !this.party.invited) {
-      return;
-    }
-
-    return this.party.invited.filter((user) => {
-      return !_.findWhere(this.party.rsvps, { user });
-    });
-  }
-
-  getUserById(userId) {
-    return Meteor.users.findOne(userId)
-  }
-}
-
-const name = 'partyUnanswered';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  DisplayNameFilter
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    party: '<'
-  },
-  controller: PartyUnanswered
-});
-- 
2.7.4


From ac29dd62afe7eb983af09f690c38cb58d18a00fc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:27:20 +0200
Subject: [PATCH 249/414] Step 17.42: Remove PartyUnanswered

---
 imports/ui/components/partiesList/partiesList.js | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index a8e8e0f..ec99584 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -14,7 +14,6 @@ import { name as PartyRemove } from '../partyRemove/partyRemove';
 import { name as PartyCreator } from '../partyCreator/partyCreator';
 import { name as PartyRsvp } from '../partyRsvp/partyRsvp';
 import { name as PartyRsvpsList } from '../partyRsvpsList/partyRsvpsList';
-import { name as PartyUnanswered } from '../partyUnanswered/partyUnanswered';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -82,8 +81,7 @@ export default angular.module(name, [
   PartyRemove,
   PartyCreator,
   PartyRsvp,
-  PartyRsvpsList,
-  PartyUnanswered
+  PartyRsvpsList
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 12ce03f9c0473f8a37b9c601f7194a2462192c4c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:27:38 +0200
Subject: [PATCH 250/414] Step 17.43: Remove PartyRsvpUsers

---
 imports/ui/components/partyRsvpsList/partyRsvpsList.js | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.js b/imports/ui/components/partyRsvpsList/partyRsvpsList.js
index c1ebd92..755c9f9 100644
--- a/imports/ui/components/partyRsvpsList/partyRsvpsList.js
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.js
@@ -2,7 +2,6 @@ import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 
 import template from './partyRsvpsList.html';
-import { name as PartyRsvpUsers } from '../partyRsvpUsers/partyRsvpUsers';
 
 class PartyRsvpsList { }
 
@@ -10,8 +9,7 @@ const name = 'partyRsvpsList';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor,
-  PartyRsvpUsers
+  angularMeteor
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From e8e2ea39c8159ee5e95f68b0937cb29864154ded Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:37:40 +0200
Subject: [PATCH 251/414] Step 18.1: Uninstall `bootstrap`

---
 package.json | 1 -
 1 file changed, 1 deletion(-)

diff --git a/package.json b/package.json
index 158bf82..af5599d 100644
--- a/package.json
+++ b/package.json
@@ -12,7 +12,6 @@
     "angular-ui-router": "^0.2.18",
     "angular-simple-logger": "^0.1.7",
     "angular-utils-pagination": "^0.11.1",
-    "bootstrap": "^4.0.0-alpha.2",
     "meteor-node-stubs": "~0.2.0",
     "underscore": "^1.8.3"
   },
-- 
2.7.4


From 966d1c7f244a873e35ef5b23a577e28c5fbb3366 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:38:13 +0200
Subject: [PATCH 252/414] Step 18.2: Install `angular-material`

---
 package.json | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/package.json b/package.json
index af5599d..8971ed8 100644
--- a/package.json
+++ b/package.json
@@ -7,7 +7,11 @@
   },
   "dependencies": {
     "angular": "^1.5.3",
+    "angular-animate": "^1.5.3",
+    "angular-aria": "^1.5.3",
     "angular-google-maps": "^2.3.2",
+    "angular-material": "^1.0.7",
+    "angular-messages": "^1.5.3",
     "angular-meteor": "^1.3.9",
     "angular-ui-router": "^0.2.18",
     "angular-simple-logger": "^0.1.7",
-- 
2.7.4


From cae62f875366b3d404b69ff0905c443f07ac41bf Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:38:56 +0200
Subject: [PATCH 253/414] Step 18.3: Add css

---
 client/index.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/client/index.html b/client/index.html
index 937c41a..0b002e3 100644
--- a/client/index.html
+++ b/client/index.html
@@ -6,6 +6,7 @@
   <title>Socially</title>
   <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDbphq9crcdpecbseKX3Yx2LPxMRqWK-rc"></script>
   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
+  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/angular-material/1.0.7/angular-material.min.css">
 </head>
 <body>
   <socially></socially>
-- 
2.7.4


From e401ac6799384b9e7fff5ce5b7b5125428e85fdf Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:31:01 +0200
Subject: [PATCH 254/414] Step 18.4: Remove bootstrap from main.js

---
 client/main.js | 1 -
 1 file changed, 1 deletion(-)

diff --git a/client/main.js b/client/main.js
index 52cb827..06731e1 100644
--- a/client/main.js
+++ b/client/main.js
@@ -1,5 +1,4 @@
 import angular from 'angular';
-import 'bootstrap/dist/css/bootstrap.css';
 
 import { Meteor } from 'meteor/meteor';
 
-- 
2.7.4


From b3f28f6a621454ea6ab56bdb43effe01626f9f19 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:39:53 +0200
Subject: [PATCH 255/414] Step 18.5: Add ngMaterial to Socially

---
 imports/ui/components/socially/socially.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index dec6060..e692001 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -1,5 +1,6 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
+import ngMaterial from 'angular-material';
 import uiRouter from 'angular-ui-router';
 
 import template from './socially.html';
@@ -14,6 +15,7 @@ const name = 'socially';
 // create a module
 export default angular.module(name, [
   angularMeteor,
+  ngMaterial,
   uiRouter,
   PartiesList,
   PartyDetails,
-- 
2.7.4


From 936b27ae1d00101610aa4b0a9a09e9852377be54 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:41:34 +0200
Subject: [PATCH 256/414] Step 18.6: Clean up Socially template

---
 imports/ui/components/socially/socially.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/socially/socially.html b/imports/ui/components/socially/socially.html
index 2e91050..7fdb2de 100644
--- a/imports/ui/components/socially/socially.html
+++ b/imports/ui/components/socially/socially.html
@@ -1,3 +1,3 @@
-<navigation class="navbar navbar-static-top navbar-dark bg-inverse"></navigation>
+<navigation></navigation>
 
-<div ui-view="" class="container-fluid"></div>
+<div ui-view=""></div>
-- 
2.7.4


From 140e8aa5cff997e142547bb7671a3682aee27219 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:43:06 +0200
Subject: [PATCH 257/414] Step 18.7: Refactor Navigation

---
 imports/ui/components/navigation/navigation.html | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

diff --git a/imports/ui/components/navigation/navigation.html b/imports/ui/components/navigation/navigation.html
index 2bcae64..0b1d8a6 100644
--- a/imports/ui/components/navigation/navigation.html
+++ b/imports/ui/components/navigation/navigation.html
@@ -1,6 +1,10 @@
-<div class="fluid-container">
-  <div class="navbar-header">
-    <a href="/parties" class="navbar-brand">Socially</a>
-    <login-buttons class="navbar-brand"></login-buttons>
+<md-toolbar>
+  <div class="md-toolbar-tools">
+    <h2>
+      <span ui-sref="parties">
+        Socially
+      </span>
+    </h2>
+    <login-buttons></login-buttons>
   </div>
-</div>
+</md-toolbar>
-- 
2.7.4


From 69c72febef4de824caa483b2023a69f9f6889b41 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:43:40 +0200
Subject: [PATCH 258/414] Step 18.8: Add space before loginButtons

---
 imports/ui/components/navigation/navigation.less | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/navigation/navigation.less b/imports/ui/components/navigation/navigation.less
index 4035b7b..87b8777 100644
--- a/imports/ui/components/navigation/navigation.less
+++ b/imports/ui/components/navigation/navigation.less
@@ -1,3 +1,5 @@
 navigation {
-  display: block;
+  login-buttons {
+    margin-left: 15px;
+  }
 }
-- 
2.7.4


From 84095088f84f108cce40eb4d58529036f15cfc4f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:44:33 +0200
Subject: [PATCH 259/414] Step 18.9: Refactor PartiesList

---
 imports/ui/components/partiesList/partiesList.html | 99 ++++++++++------------
 1 file changed, 44 insertions(+), 55 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 29c4c69..b6772eb 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,65 +1,54 @@
-<div class="container-fluid">
-  <div class="row">
-    <div class="col-md-12">
-      <party-add ng-show="partiesList.isLoggedIn"></party-add>
+<div layout="column" layout-padding>
+  <party-add ng-show="partiesList.isLoggedIn"></party-add>
+  <div ng-hide="partiesList.isLoggedIn">
+    <i>Log in to create a party!</i>
+  </div>
 
-      <div class="alert alert-warning" role="alert" ng-hide="partiesList.isLoggedIn">
-        <strong>Warning!</strong>
-        Log in to create a party!
-      </div>
-    </div>
+  <div flex>
+    <h2 class="md-display-1">List of the parties:</h2>
   </div>
-  <div class="row">
-    <div class="col-md-12">
-      <h2>List of parties:</h2>
-      <form class="form-inline">
-        <div class="form-group">
-          <input type="search" ng-model="partiesList.searchText" placeholder="Search" class="form-control"/>
-        </div>
-        <parties-sort class="form-group" on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
-      </form>
-    </div>
+
+  <div flex layout="row" layout-padding>
+    <md-input-container>
+      <label>Search</label>
+      <input ng-model="partiesList.searchText">
+    </md-input-container>
+
+    <parties-sort on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
   </div>
-  <div class="row">
-    <div class="col-md-6">
-      <ul class="parties">
-        <li dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
-          <div class="row">
-            <div class="col-sm-8">
-              <h3 class="party-name">
-                <a ui-sref="partyDetails({ partyId: party._id })">{{party.name}}</a>
-              </h3>
-              <p class="party-description">
-                {{party.description}}
-              </p>
-            </div>
-            <div class="col-sm-4">
-              <party-remove party="party" ng-show="partiesList.isOwner(party)"></party-remove>
-            </div>
-          </div>
-          <div class="row">
-            <div class="col-md-12">
-              <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
-              <div class="alert alert-warning" role="alert" ng-hide="partiesList.isLoggedIn">
-                <strong>Warning!</strong>
-                <i>Sign in to RSVP for this party.</i>
-              </div>
-            </div>
-          </div>
-          <div class="row">
-            <div class="col-md-4">
-              <party-creator party="party"></party-creator>
-            </div>
-            <div class="col-md-8">
-              <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
-            </div>
+
+  <div layout="column" layout-gt-sm="row">
+    <div flex="50">
+      <md-card dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
+        <md-card-title>
+          <md-card-title-text>
+            <span class="md-headline" ui-sref="partyDetails({ partyId: party._id })">
+              {{party.name}}
+              <party-remove party="party"></party-remove>
+            </span>
+            <span class="md-subhead">{{party.description}}</span>
+          </md-card-title-text>
+        </md-card-title>
+        <md-card-content>
+          <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
+
+          <party-unanswered party="party" ng-if="!party.public"></party-unanswered>
+          <div ng-if="party.public">
+            Everyone is invited
           </div>
-        </li>
-      </ul>
 
+          <party-creator party="party"></party-creator>
+        </md-card-content>
+        <md-card-actions>
+          <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
+          <div ng-hide="partiesList.isLoggedIn">
+            <i>Sign in to RSVP for this party.</i>
+          </div>
+        </md-card-actions>
+      </md-card>
       <dir-pagination-controls on-page-change="partiesList.pageChanged(newPageNumber)"></dir-pagination-controls>
     </div>
-    <div class="col-md-6">
+    <div flex="50">
       <parties-map parties="partiesList.parties"></parties-map>
     </div>
   </div>
-- 
2.7.4


From 0ad912fc5f494b40444be7177c8919e22ae20e04 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:45:55 +0200
Subject: [PATCH 260/414] Step 18.10: Leave only one definition

---
 imports/ui/components/partiesList/partiesList.less | 35 ++--------------------
 1 file changed, 2 insertions(+), 33 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index a1eac5c..ba0839b 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -1,36 +1,5 @@
 parties-list {
-  display: block;
-  padding: 25px 0;
-
-  ul.parties {
-    padding-left: 0;
-    list-style-type: none;
-
-    > li {
-      padding: 15px;
-      background-color: #fff;
-      margin: 15px 0;
-      border: 3px solid #eaeaea;
-
-     .party-name {
-       margin-top: 0px;
-       margin-bottom: 20px;
-       a {
-         text-decoration: none !important;
-         font-weight: 400;
-       }
-     }
-     .party-description {
-       font-weight: 300;
-       padding-left: 18px;
-       font-size: 14px;
-     }
-    }
+  [ui-sref] {
+    cursor: pointer;
   }
 }
-
-@import "../partyAdd/partyAdd.less";
-@import "../partiesMap/partiesMap.less";
-@import "../partyCreator/partyCreator.less";
-@import "../partyRsvp/partyRsvp.less";
-@import "../partyRsvpsList/partyRsvpsList.less";
-- 
2.7.4


From 49b0658118eebee5c26bc9ac1d7a03a2c877006b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:46:45 +0200
Subject: [PATCH 261/414] Step 18.11: Refactor PartiesMap

---
 imports/ui/components/partiesMap/partiesMap.html | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/imports/ui/components/partiesMap/partiesMap.html b/imports/ui/components/partiesMap/partiesMap.html
index 870b2f7..a488738 100644
--- a/imports/ui/components/partiesMap/partiesMap.html
+++ b/imports/ui/components/partiesMap/partiesMap.html
@@ -1,6 +1,3 @@
-<h4>
-  See all the parties:
-</h4>
 <div class="angular-google-map-container">
   <ui-gmap-google-map center="partiesMap.map.center" zoom="partiesMap.map.zoom">
     <ui-gmap-markers models="partiesMap.parties" coords="'location'" fit="true" idkey="'_id'" doRebuildAll="true"></ui-gmap-markers>
-- 
2.7.4


From 1628597bd011ceec3a238ce5c3177666b053b91a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:47:31 +0200
Subject: [PATCH 262/414] Step 18.12: Styles for PartiesMap

---
 imports/ui/components/partiesMap/partiesMap.less | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesMap/partiesMap.less b/imports/ui/components/partiesMap/partiesMap.less
index 020e970..b69b834 100644
--- a/imports/ui/components/partiesMap/partiesMap.less
+++ b/imports/ui/components/partiesMap/partiesMap.less
@@ -1,6 +1,6 @@
 parties-map {
   display: block;
-  margin: 15px 5px;
+  padding: 10px;
 
   .angular-google-map-container {
     width: 100%;
-- 
2.7.4


From b58bd3f26d65dd7cab098d50fde3f054a0113809 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:13:36 +0200
Subject: [PATCH 263/414] Step 18.13: Import in PartiesList

---
 imports/ui/components/partiesList/partiesList.less | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index ba0839b..d3f7da4 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -3,3 +3,5 @@ parties-list {
     cursor: pointer;
   }
 }
+
+@import "../partiesMap/partiesMap.less";
-- 
2.7.4


From a57159ef7313bbfb35d627f35bb03a37f6420b51 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:48:05 +0200
Subject: [PATCH 264/414] Step 18.14: Refactor PartiesSort

---
 imports/ui/components/partiesSort/partiesSort.html | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/imports/ui/components/partiesSort/partiesSort.html b/imports/ui/components/partiesSort/partiesSort.html
index b2a52b3..0b7a94e 100644
--- a/imports/ui/components/partiesSort/partiesSort.html
+++ b/imports/ui/components/partiesSort/partiesSort.html
@@ -1,4 +1,10 @@
-<select ng-model="partiesSort.order" ng-change="partiesSort.changed()" class="form-control">
-  <option value="1">Ascending</option>
-  <option value="-1">Descending</option>
-</select>
+<md-input-container>
+  <md-select ng-model="partiesSort.order" ng-change="partiesSort.changed()">
+    <md-option value="1">
+      Ascending
+    </md-option>
+    <md-option value="-1">
+      Descending
+    </md-option>
+  </md-select>
+</md-input-container>
-- 
2.7.4


From 3a02b81b0da1182a2a86c17bde244e36ab730a4f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:48:41 +0200
Subject: [PATCH 265/414] Step 18.15: Refactor PartyAdd

---
 imports/ui/components/partyAdd/partyAdd.html | 26 ++++++++++++++------------
 1 file changed, 14 insertions(+), 12 deletions(-)

diff --git a/imports/ui/components/partyAdd/partyAdd.html b/imports/ui/components/partyAdd/partyAdd.html
index 7c4d284..6e504f0 100644
--- a/imports/ui/components/partyAdd/partyAdd.html
+++ b/imports/ui/components/partyAdd/partyAdd.html
@@ -1,20 +1,22 @@
-<form>
-  <div class="form-group">
+<div layout="column" layout-padding>
+  <md-input-container>
     <label>
       Party Name:
     </label>
-    <input type="text" ng-model="partyAdd.party.name" class="form-control"/>
-  </div>
-  <div class="form-group">
+    <input type="text" ng-model="partyAdd.party.name"/>
+  </md-input-container>
+  <md-input-container>
     <label>
       Description:
     </label>
-    <input type="text" ng-model="partyAdd.party.description" class="form-control"/>
+    <input type="text" ng-model="partyAdd.party.description"/>
+  </md-input-container>
+  <div flex>
+    <md-checkbox ng-model="partyAdd.party.public" aria-label="Public Party?">
+      Public Party?
+    </md-checkbox>
   </div>
-  <div class="checkbox">
-    <label>
-      <input type="checkbox" ng-model="partyAdd.party.public"/> Public Party?
-    </label>
+  <div flex>
+    <md-button ng-click="partyAdd.submit()" class="md-raised">Add Party!</md-button>
   </div>
-  <button ng-click="partyAdd.submit()" class="btn btn-success">Add Party!</button>
-</form>
+</div>
-- 
2.7.4


From f7f12ded4493bbcaca1ac8d962b370cd3d98bb67 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:49:18 +0200
Subject: [PATCH 266/414] Step 18.16: Remove styles for PartyAdd

---
 imports/ui/components/partyAdd/partyAdd.less | 10 ----------
 1 file changed, 10 deletions(-)
 delete mode 100644 imports/ui/components/partyAdd/partyAdd.less

diff --git a/imports/ui/components/partyAdd/partyAdd.less b/imports/ui/components/partyAdd/partyAdd.less
deleted file mode 100644
index 90b24c1..0000000
--- a/imports/ui/components/partyAdd/partyAdd.less
+++ /dev/null
@@ -1,10 +0,0 @@
-party-add {
-  display: block;
-}
-
-party-add > form {
-  padding: 15px;
-  margin-bottom: 25px;
-  background-color: #fff;
-  border: 3px solid #EAEAEC;
-}
-- 
2.7.4


From c5a12c7e2025a292930a71676dc3887e6023595a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:50:00 +0200
Subject: [PATCH 267/414] Step 18.17: Refactor PartyCreator

---
 imports/ui/components/partyCreator/partyCreator.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyCreator/partyCreator.html b/imports/ui/components/partyCreator/partyCreator.html
index 077739d..de986fb 100644
--- a/imports/ui/components/partyCreator/partyCreator.html
+++ b/imports/ui/components/partyCreator/partyCreator.html
@@ -1,5 +1,5 @@
 <p>
   <small>
-    <i class="fa fa-user fa-lg"></i> {{ partyCreator.creator | displayNameFilter }}
+    Posted by {{ partyCreator.creator | displayNameFilter }}
   </small>
 </p>
-- 
2.7.4


From 132d934383b9d63530bb9da4be5aca82d496ccff Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 02:50:35 +0200
Subject: [PATCH 268/414] Step 18.18: Remove partyCreator.less

---
 imports/ui/components/partyCreator/partyCreator.less | 6 ------
 1 file changed, 6 deletions(-)
 delete mode 100644 imports/ui/components/partyCreator/partyCreator.less

diff --git a/imports/ui/components/partyCreator/partyCreator.less b/imports/ui/components/partyCreator/partyCreator.less
deleted file mode 100644
index 4679f1f..0000000
--- a/imports/ui/components/partyCreator/partyCreator.less
+++ /dev/null
@@ -1,6 +0,0 @@
-party-creator {
-  i.fa {
-    margin-left: 5px;
-    margin-right: 10px;
-  }
-}
-- 
2.7.4


From fe362fbc420d45b913ebc6da13907700f51363c1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:08:43 +0200
Subject: [PATCH 269/414] Step 18.19: Add `material-design-icons`

---
 .meteor/packages |  2 ++
 .meteor/versions | 18 +++++++++++-------
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 4e35175..1116bb7 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -28,3 +28,5 @@ tmeasday:publish-counts
 check
 email
 less
+planettraining:material-design-icons
+pagebakers:ionicons
diff --git a/.meteor/versions b/.meteor/versions
index d6f5bc3..bef3e68 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -3,8 +3,8 @@ accounts-facebook@1.0.10
 accounts-oauth@1.1.13
 accounts-password@1.3.0
 accounts-twitter@1.1.11
-accounts-ui@1.1.8
-accounts-ui-unstyled@1.1.11
+accounts-ui@1.1.9
+accounts-ui-unstyled@1.1.12
 allow-deny@1.0.5
 amplify@1.0.0
 autoupdate@1.2.11
@@ -13,11 +13,11 @@ babel-runtime@0.1.11_1
 base64@1.0.9
 binary-heap@1.0.9
 blaze@2.1.9
-blaze-html-templates@1.0.4
+blaze-html-templates@1.0.5
 blaze-tools@1.0.10
 boilerplate-generator@1.0.10
-caching-compiler@1.0.6
-caching-html-compiler@1.0.6
+caching-compiler@1.1.7_1
+caching-html-compiler@1.0.7
 callback-hook@1.0.9
 check@1.2.3
 ddp@1.2.5
@@ -43,7 +43,7 @@ http@1.2.9_1
 id-map@1.0.8
 jquery@1.11.9
 launch-screen@1.0.12
-less@2.5.7
+less@2.7.5_1
 livedata@1.0.18
 localstorage@1.0.11
 logging@1.1.15_1
@@ -65,7 +65,9 @@ oauth1@1.1.10
 oauth2@1.1.10
 observe-sequence@1.0.13
 ordered-dict@1.0.8
+pagebakers:ionicons@2.0.1_1
 pbastowski:angular-babel@1.3.6
+planettraining:material-design-icons@2.2.3
 promise@0.8.7
 random@1.0.10
 rate-limit@1.0.5
@@ -83,7 +85,9 @@ spacebars-compiler@1.0.13
 srp@1.0.9
 standard-minifier-css@1.2.1
 standard-minifier-js@1.2.0_1
-templating@1.2.14_1
+templating@1.2.15
+templating-compiler@1.2.15
+templating-runtime@1.2.15
 templating-tools@1.0.5
 tmeasday:check-npm-versions@0.1.1
 tmeasday:publish-counts@0.8.0
-- 
2.7.4


From 9edab096a1b3cd13b432af4773b5f1611726b6ce Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:10:01 +0200
Subject: [PATCH 270/414] Step 18.20: Set icons

---
 imports/ui/components/socially/socially.js | 20 +++++++++++++++++++-
 1 file changed, 19 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index e692001..cad243b 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -29,12 +29,30 @@ export default angular.module(name, [
   .config(config)
   .run(run);
 
-function config($locationProvider, $urlRouterProvider) {
+function config($locationProvider, $urlRouterProvider, $mdIconProvider) {
   'ngInject';
 
   $locationProvider.html5Mode(true);
 
   $urlRouterProvider.otherwise('/parties');
+
+  const iconPath =  '/packages/planettraining_material-design-icons/bower_components/material-design-icons/sprites/svg-sprite/';
+
+  $mdIconProvider
+    .iconSet('social',
+      iconPath + 'svg-sprite-social.svg')
+    .iconSet('action',
+      iconPath + 'svg-sprite-action.svg')
+    .iconSet('communication',
+      iconPath + 'svg-sprite-communication.svg')
+    .iconSet('content',
+      iconPath + 'svg-sprite-content.svg')
+    .iconSet('toggle',
+      iconPath + 'svg-sprite-toggle.svg')
+    .iconSet('navigation',
+      iconPath + 'svg-sprite-navigation.svg')
+    .iconSet('image',
+      iconPath + 'svg-sprite-image.svg');
 }
 
 function run($rootScope, $state) {
-- 
2.7.4


From 3ddb9bead293bb301ca0f50d5ff38c18b306bcab Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:10:41 +0200
Subject: [PATCH 271/414] Step 18.21: Refactor PartyRemove

---
 imports/ui/components/partyRemove/partyRemove.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyRemove/partyRemove.html b/imports/ui/components/partyRemove/partyRemove.html
index ebe46ea..fc1206c 100644
--- a/imports/ui/components/partyRemove/partyRemove.html
+++ b/imports/ui/components/partyRemove/partyRemove.html
@@ -1 +1 @@
-<button type="button" class="close" aria-label="Close" ng-click="partyRemove.remove()"><span aria-hidden="true">&times;</span></button>
+<md-icon md-svg-icon="content:ic_clear_24px" ng-click="partyRemove.remove()"></md-icon>
-- 
2.7.4


From e49906787f4bcfb48ad5f0bbfecc880edb72a4e4 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:11:20 +0200
Subject: [PATCH 272/414] Step 18.22: Styles for PartyRemove

---
 imports/ui/components/partyRemove/partyRemove.less | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/partyRemove/partyRemove.less

diff --git a/imports/ui/components/partyRemove/partyRemove.less b/imports/ui/components/partyRemove/partyRemove.less
new file mode 100644
index 0000000..d7ad1f1
--- /dev/null
+++ b/imports/ui/components/partyRemove/partyRemove.less
@@ -0,0 +1,3 @@
+party-remove {
+  float: right;
+}
-- 
2.7.4


From 6cc6179e18760b656cc4337b1415dc35426dea10 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:12:08 +0200
Subject: [PATCH 273/414] Step 18.23: Import to PartiesList

---
 imports/ui/components/partiesList/partiesList.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index d3f7da4..26a3d6b 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -5,3 +5,4 @@ parties-list {
 }
 
 @import "../partiesMap/partiesMap.less";
+@import "../partyRemove/partyRemove.less";
-- 
2.7.4


From f7e739f05984afe1f06fb9656d15de5901fc6b4e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:17:34 +0200
Subject: [PATCH 274/414] Step 18.24: Refactor PartyRsvp

---
 imports/ui/components/partyRsvp/partyRsvp.html | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/partyRsvp/partyRsvp.html b/imports/ui/components/partyRsvp/partyRsvp.html
index e4c078c..ec6302b 100644
--- a/imports/ui/components/partyRsvp/partyRsvp.html
+++ b/imports/ui/components/partyRsvp/partyRsvp.html
@@ -1,3 +1,5 @@
-<input type="button" value="I'm going!" ng-click="partyRsvp.yes()" class="btn btn-default" ng-class="{'btn-primary' : partyRsvp.isYes()}"/>
-<input type="button" value="Maybe" ng-click="partyRsvp.maybe()" class="btn btn-default" ng-class="{'btn-primary' : partyRsvp.isMaybe()}"/>
-<input type="button" value="No" ng-click="partyRsvp.no()" class="btn btn-default" ng-class="{'btn-primary' : partyRsvp.isNo()}"/>
+<div layout="row" layout-align="end center">
+  <md-button ng-click="partyRsvp.yes()" ng-class="{'md-primary' : partyRsvp.isYes()}">I'm going!</md-button>
+  <md-button ng-click="partyRsvp.maybe()" ng-class="{'md-primary' : partyRsvp.isMaybe()}">Maybe</md-button>
+  <md-button ng-click="partyRsvp.no()" ng-class="{'md-primary' : partyRsvp.isNo()}">No</md-button>
+</div>
-- 
2.7.4


From ce2c266d685068528651177c6d3269a4b70e8d67 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:18:08 +0200
Subject: [PATCH 275/414] Step 18.25: Remove styles

---
 imports/ui/components/partyRsvp/partyRsvp.less | 4 ----
 1 file changed, 4 deletions(-)
 delete mode 100644 imports/ui/components/partyRsvp/partyRsvp.less

diff --git a/imports/ui/components/partyRsvp/partyRsvp.less b/imports/ui/components/partyRsvp/partyRsvp.less
deleted file mode 100644
index be52d51..0000000
--- a/imports/ui/components/partyRsvp/partyRsvp.less
+++ /dev/null
@@ -1,4 +0,0 @@
-party-rsvp {
-  display: block;
-  margin: 15px 0;
-}
-- 
2.7.4


From c588c905b1a79da5795833e54688682a2aa55fb8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:19:01 +0200
Subject: [PATCH 276/414] Step 18.26: Refactor PartyUninvited

---
 .../components/partyUninvited/partyUninvited.html  | 22 ++++++++++++----------
 1 file changed, 12 insertions(+), 10 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index e9f9e1c..84b3eaf 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -1,10 +1,12 @@
-<h4>Users to invite:</h4>
-<ul>
-  <li ng-repeat="user in partyUninvited.users | uninvitedFilter:partyUninvited.party">
-    <button ng-click="partyUninvited.invite(user)" class="btn btn-primary-outline">Invite</button>
-    {{ user | displayNameFilter }}
-  </li>
-</ul>
-<div class="alert alert-success" role="alert" ng-if="(partyUninvited.users | uninvitedFilter:partyUninvited.party).length <= 0">
-  Everyone are already invited.
-</div>
+<h4 class="md-headline">
+  Users to invite:
+</h4>
+
+<md-list>
+  <md-list-item ng-repeat="user in partyUninvited.users | uninvitedFilter:partyUninvited.party" ng-click="partyUninvited.invite(user)">
+    <p>{{ user | displayNameFilter }}</p>
+  </md-list-item>
+  <md-list-item ng-if="(partyUninvited.users | uninvitedFilter:partyUninvited.party).length <= 0">
+    Everyone are already invited.
+  </md-list-item>
+</md-list>
-- 
2.7.4


From cc1035fa7e507e908b19a5c041f3a12d3f9227d6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:19:24 +0200
Subject: [PATCH 277/414] Step 18.27: Remove unused styles

---
 imports/ui/components/partyUninvited/partyUninvited.less | 8 --------
 1 file changed, 8 deletions(-)
 delete mode 100644 imports/ui/components/partyUninvited/partyUninvited.less

diff --git a/imports/ui/components/partyUninvited/partyUninvited.less b/imports/ui/components/partyUninvited/partyUninvited.less
deleted file mode 100644
index 52b27fe..0000000
--- a/imports/ui/components/partyUninvited/partyUninvited.less
+++ /dev/null
@@ -1,8 +0,0 @@
-party-uninvited {
-  display: block;
-
-  ul {
-    padding-left: 0;
-    list-style-type: none;
-  }
-}
-- 
2.7.4


From 5d33876ccafce286ac4349a44065074a6e177562 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:20:28 +0200
Subject: [PATCH 278/414] Step 18.28: Add PartyRsvpsList less to PartiesList

---
 imports/ui/components/partiesList/partiesList.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index 26a3d6b..6ac87dc 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -6,3 +6,4 @@ parties-list {
 
 @import "../partiesMap/partiesMap.less";
 @import "../partyRemove/partyRemove.less";
+@import "../partyRsvpsList/partyRsvpsList.less";
-- 
2.7.4


From 8913a38005969c5d7d2c94a0a75afd43c4b36664 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:21:23 +0200
Subject: [PATCH 279/414] Step 18.29: Update styles of PartyMap

---
 imports/ui/components/partyMap/partyMap.less | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/imports/ui/components/partyMap/partyMap.less b/imports/ui/components/partyMap/partyMap.less
index 3b4bed1..62f1643 100644
--- a/imports/ui/components/partyMap/partyMap.less
+++ b/imports/ui/components/partyMap/partyMap.less
@@ -1,7 +1,6 @@
 party-map {
   display: block;
-  width: 100%;
-  margin: 25px 0;
+  padding: 10px;
 
   .angular-google-map-container {
     width: 100%;
-- 
2.7.4


From b750db9237064e5b2f9f651fdd11384e9610421b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:23:22 +0200
Subject: [PATCH 280/414] Step 18.30: Refactor PartyDetails

---
 .../ui/components/partyDetails/partyDetails.html   | 51 ++++++++++------------
 1 file changed, 22 insertions(+), 29 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index 58724af..e913815 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -1,35 +1,28 @@
-<div class="container-fluid">
-  <div class="row">
-    <div class="col-md-6">
-      <form>
-        <fieldset class="form-group">
-          <label>Party name</label>
-          <input type="text" ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner" class="form-control"/>
-        </fieldset>
+<div layout="column" layout-padding>
+  <div layout="column" layout-gt-sm="row"  layout-padding>
+    <form flex="50" layout="column">
+      <md-input-container>
+        <label>Party name</label>
+        <input ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner">
+      </md-input-container>
 
-        <fieldset class="form-group">
-          <label>Description</label>
-          <input type="text" ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner" class="form-control"/>
-        </fieldset>
+      <md-input-container>
+        <label>Description</label>
+        <input ng-model="partyDetails.party.description" ng-disabled="!partyDetails.isOwner">
+      </md-input-container>
 
-        <div class="checkbox">
-          <label>
-            <input type="checkbox" ng-model="partyDetails.party.public" ng-disabled="!partyDetails.isOwner"/>
-            Public Party?
-          </label>
-        </div>
+      <div>
+        <md-checkbox ng-model="partyDetails.party.public" ng-disabled="!partyDetails.isOwner" aria-label="Public Party?">
+          Public Party?
+        </md-checkbox>
+      </div>
 
-        <button ng-click="partyDetails.save()" type="submit" class="btn btn-primary">Save</button>
-      </form>
-    </div>
-    <div class="col-md-6">
-      <party-map location="partyDetails.party.location"></party-map>
-    </div>
+      <div>
+        <md-button ng-click="partyDetails.save()" class="md-primary md-raised">Save</md-button>
+      </div>
+    </form>
+    <party-map flex="50" location="partyDetails.party.location"></party-map>
   </div>
 
-  <div class="row">
-    <div class="col-md-6">
-      <party-uninvited party="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
-    </div>
-  </div>
+  <party-uninvited flex party="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
 </div>
-- 
2.7.4


From c85c7fc0a0a531909d7d171fc62653d90992f088 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:24:01 +0200
Subject: [PATCH 281/414] Step 18.31: Leave only PartyMap inside PartyDetails
 less

---
 imports/ui/components/partyDetails/partyDetails.less | 9 ---------
 1 file changed, 9 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.less b/imports/ui/components/partyDetails/partyDetails.less
index a42c467..bb42a69 100644
--- a/imports/ui/components/partyDetails/partyDetails.less
+++ b/imports/ui/components/partyDetails/partyDetails.less
@@ -1,10 +1 @@
-party-details {
-  display: block;
-
-  form {
-    margin: 25px 0;
-  }
-}
-
-@import "../partyUninvited/partyUninvited.less";
 @import "../partyMap/partyMap.less";
-- 
2.7.4


From 1a5c4fb2e4b9762f6d77037f4af1a09b9762579e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:43:44 +0200
Subject: [PATCH 282/414] Step 18.32: Create view for PartyAddButton

---
 imports/ui/components/partyAddButton/partyAddButton.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/partyAddButton/partyAddButton.html

diff --git a/imports/ui/components/partyAddButton/partyAddButton.html b/imports/ui/components/partyAddButton/partyAddButton.html
new file mode 100644
index 0000000..6e37857
--- /dev/null
+++ b/imports/ui/components/partyAddButton/partyAddButton.html
@@ -0,0 +1,3 @@
+<md-button class="md-fab" aria-label="Add new party" ng-click="partyAddButton.open($event)">
+  <md-icon md-svg-icon="content:ic_add_24px"></md-icon>
+</md-button>
-- 
2.7.4


From 586629b6fe901b6c7ff32cdac8f26940a7306cce Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:45:15 +0200
Subject: [PATCH 283/414] Step 18.33: Create PartyAddButton component

---
 .../ui/components/partyAddButton/partyAddButton.js | 45 ++++++++++++++++++++++
 1 file changed, 45 insertions(+)
 create mode 100644 imports/ui/components/partyAddButton/partyAddButton.js

diff --git a/imports/ui/components/partyAddButton/partyAddButton.js b/imports/ui/components/partyAddButton/partyAddButton.js
new file mode 100644
index 0000000..cadd70c
--- /dev/null
+++ b/imports/ui/components/partyAddButton/partyAddButton.js
@@ -0,0 +1,45 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import buttonTemplate from './partyAddButton.html';
+import modalTemplate from './partyAddModal.html';
+import { name as PartyAdd } from '../partyAdd/partyAdd';
+
+class PartyAddButton {
+  constructor($mdDialog, $mdMedia) {
+    'ngInject';
+
+    this.$mdDialog = $mdDialog;
+    this.$mdMedia = $mdMedia
+  }
+
+  open(event) {
+    this.$mdDialog.show({
+      controller($mdDialog) {
+        'ngInject';
+
+        this.close = () => {
+          $mdDialog.hide();
+        }
+      },
+      controllerAs: 'partyAddModal',
+      template: modalTemplate,
+      targetEvent: event,
+      parent: angular.element(document.body),
+      clickOutsideToClose: true,
+      fullscreen: this.$mdMedia('sm') || this.$mdMedia('xs')
+    });
+  }
+}
+
+const name = 'partyAddButton';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  PartyAdd
+]).component(name, {
+  template: buttonTemplate,
+  controllerAs: name,
+  controller: PartyAddButton
+});
-- 
2.7.4


From c4f124fad7b46251390ae56d6fa0b93bd58b49d8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:46:03 +0200
Subject: [PATCH 284/414] Step 18.34: Add view for modal window

---
 imports/ui/components/partyAddButton/partyAddModal.html | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)
 create mode 100644 imports/ui/components/partyAddButton/partyAddModal.html

diff --git a/imports/ui/components/partyAddButton/partyAddModal.html b/imports/ui/components/partyAddButton/partyAddModal.html
new file mode 100644
index 0000000..3b490ec
--- /dev/null
+++ b/imports/ui/components/partyAddButton/partyAddModal.html
@@ -0,0 +1,16 @@
+<md-dialog aria-label="New party" ng-cloak>
+  <md-toolbar>
+    <div class="md-toolbar-tools">
+      <h2>New party</h2>
+      <span flex></span>
+      <md-button ng-click="partyAddModal.close()">
+        Close
+      </md-button>
+    </div>
+  </md-toolbar>
+  <md-dialog-content>
+    <div class="md-dialog-content">
+      <party-add done="partyAddModal.close()"></party-add>
+    </div>
+  </md-dialog-content>
+</md-dialog>
-- 
2.7.4


From ba31209b9ed9e5f1d78f56288f4f096ac6cfad6b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:46:27 +0200
Subject: [PATCH 285/414] Step 18.35: Add some style

---
 imports/ui/components/partyAddButton/partyAddButton.less | 5 +++++
 1 file changed, 5 insertions(+)
 create mode 100644 imports/ui/components/partyAddButton/partyAddButton.less

diff --git a/imports/ui/components/partyAddButton/partyAddButton.less b/imports/ui/components/partyAddButton/partyAddButton.less
new file mode 100644
index 0000000..b765a6c
--- /dev/null
+++ b/imports/ui/components/partyAddButton/partyAddButton.less
@@ -0,0 +1,5 @@
+party-add-button {
+  position: fixed;
+  right: 15px;
+  bottom: 15px;
+}
-- 
2.7.4


From ae8182ea0c71cd7c6a524e3ba4d955ce6962c1cc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:47:55 +0200
Subject: [PATCH 286/414] Step 18.36: Implement `done` expression to PartyAdd

---
 imports/ui/components/partyAdd/partyAdd.js | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/imports/ui/components/partyAdd/partyAdd.js b/imports/ui/components/partyAdd/partyAdd.js
index 528d938..97d9b98 100644
--- a/imports/ui/components/partyAdd/partyAdd.js
+++ b/imports/ui/components/partyAdd/partyAdd.js
@@ -14,6 +14,11 @@ class PartyAdd {
   submit() {
     this.party.owner = Meteor.userId();
     Parties.insert(this.party);
+
+    if(this.done) {
+      this.done();
+    }
+
     this.reset();
   }
 
@@ -29,6 +34,9 @@ export default angular.module(name, [
   angularMeteor
 ]).component(name, {
   template,
+  bindings: {
+    done: '&?'
+  },
   controllerAs: name,
   controller: PartyAdd
 });
-- 
2.7.4


From 9b58537f3d3c75938ce4c1f626034d322561f16b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:48:44 +0200
Subject: [PATCH 287/414] Step 18.37: Add PartyAddButton to PartiesList

---
 imports/ui/components/partiesList/partiesList.js | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index ec99584..17996c3 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -9,7 +9,7 @@ import template from './partiesList.html';
 import { Parties } from '../../../api/parties';
 import { name as PartiesSort } from '../partiesSort/partiesSort';
 import { name as PartiesMap } from '../partiesMap/partiesMap';
-import { name as PartyAdd } from '../partyAdd/partyAdd';
+import { name as PartyAddButton } from '../partyAddButton/partyAddButton';
 import { name as PartyRemove } from '../partyRemove/partyRemove';
 import { name as PartyCreator } from '../partyCreator/partyCreator';
 import { name as PartyRsvp } from '../partyRsvp/partyRsvp';
@@ -77,7 +77,7 @@ export default angular.module(name, [
   utilsPagination,
   PartiesSort,
   PartiesMap,
-  PartyAdd,
+  PartyAddButton,
   PartyRemove,
   PartyCreator,
   PartyRsvp,
-- 
2.7.4


From 8394bcb80f220d1d987c5de6f224f1605f396571 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:51:45 +0200
Subject: [PATCH 288/414] Step 18.38: Implement PartyAddButton

---
 imports/ui/components/partiesList/partiesList.html | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index b6772eb..12987b3 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -1,8 +1,5 @@
 <div layout="column" layout-padding>
-  <party-add ng-show="partiesList.isLoggedIn"></party-add>
-  <div ng-hide="partiesList.isLoggedIn">
-    <i>Log in to create a party!</i>
-  </div>
+  <party-add-button ng-show="partiesList.isLoggedIn"></party-add-button>
 
   <div flex>
     <h2 class="md-display-1">List of the parties:</h2>
-- 
2.7.4


From 39326b3790ac43294b185ec0eca42ad81e98bea8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 11:51:59 +0200
Subject: [PATCH 289/414] Step 18.39: Import styles

---
 imports/ui/components/partiesList/partiesList.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index 6ac87dc..b0bc5dc 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -6,4 +6,5 @@ parties-list {
 
 @import "../partiesMap/partiesMap.less";
 @import "../partyRemove/partyRemove.less";
+@import "../partyAddButton/partyAddButton.less";
 @import "../partyRsvpsList/partyRsvpsList.less";
-- 
2.7.4


From 4918685182f826cdbae8f8ead056cbf7e127c861 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:25:09 +0200
Subject: [PATCH 290/414] Step 18.40: Create view for Auth

---
 imports/ui/components/auth/auth.html | 6 ++++++
 1 file changed, 6 insertions(+)
 create mode 100644 imports/ui/components/auth/auth.html

diff --git a/imports/ui/components/auth/auth.html b/imports/ui/components/auth/auth.html
new file mode 100644
index 0000000..28f7a45
--- /dev/null
+++ b/imports/ui/components/auth/auth.html
@@ -0,0 +1,6 @@
+<div layout="row">
+  <md-button flex ui-sref="login" ng-hide="auth.isLoggedIn">Login</md-button>
+  <md-button flex ui-sref="register" ng-hide="auth.isLoggedIn">Sign up</md-button>
+  <md-button flex ng-click="auth.logout()" ng-show="auth.isLoggedIn">Logout</md-button>
+  <div ng-show="auth.isLoggedIn">{{ auth.currentUser | displayNameFilter }}</div>
+</div>
-- 
2.7.4


From 64882cbcbe20792c4ca56cc56a3a389ee69cdbe5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:25:49 +0200
Subject: [PATCH 291/414] Step 18.41: Create Auth component

---
 imports/ui/components/auth/auth.js | 41 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 41 insertions(+)
 create mode 100644 imports/ui/components/auth/auth.js

diff --git a/imports/ui/components/auth/auth.js b/imports/ui/components/auth/auth.js
new file mode 100644
index 0000000..faffdb3
--- /dev/null
+++ b/imports/ui/components/auth/auth.js
@@ -0,0 +1,41 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+import { Accounts } from 'meteor/accounts-base';
+
+import template from './auth.html';
+import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
+
+const name = 'auth';
+
+class Auth {
+  constructor($scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+
+    this.helpers({
+      isLoggedIn() {
+        return !!Meteor.userId();
+      },
+      currentUser() {
+        return Meteor.user();
+      }
+    });
+  }
+
+  logout() {
+    Accounts.logout();
+  }
+}
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  DisplayNameFilter
+]).component(name, {
+  template,
+  controllerAs: name,
+  controller: Auth
+});
-- 
2.7.4


From ee8b8bd27c12a74232ae3a61d13bc2cb04d825bc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:42:53 +0200
Subject: [PATCH 292/414] Step 18.42: View for Login

---
 imports/ui/components/login/login.html | 72 ++++++++++++++++++++++++++++++++++
 1 file changed, 72 insertions(+)
 create mode 100644 imports/ui/components/login/login.html

diff --git a/imports/ui/components/login/login.html b/imports/ui/components/login/login.html
new file mode 100644
index 0000000..feb3443
--- /dev/null
+++ b/imports/ui/components/login/login.html
@@ -0,0 +1,72 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+
+  <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+
+    <md-toolbar class="md-primary md-tall" layout="column" layout-align="end" layout-fill>
+      <div layout="row" class="md-toolbar-tools md-toolbar-tools-bottom">
+        <h3 class="md-display-1">
+          Sign in
+        </h3>
+      </div>
+    </md-toolbar>
+
+    <div layout="column" layout-fill layout-margin layout-padding>
+      <div layout="row" layout-fill layout-margin>
+        <p class="md-body-2">
+          Use existing account</p>
+      </div>
+      <div layout="row" layout-fill layout-margin layout-padding layout-wrap>
+        <md-button class="md-raised">
+          <i class="icon ion-social-google" style="color: #DC4A38; font-size: 24px;"></i>
+          <span>
+            Google</span>
+        </md-button>
+        <md-button class="md-raised">
+          <i class="icon ion-social-facebook" style="color: #3F62B4; font-size: 24px;"></i>
+          <span>Facebook
+          </span>
+        </md-button>
+        <md-button class="md-raised">
+          <i class="icon ion-social-twitter" style="color: #27AAE2; font-size: 24px;"></i>
+          <span>Twitter
+          </span>
+        </md-button>
+      </div>
+      <md-divider class="inset"></md-divider>
+
+      <div layout="row" layout-fill layout-margin>
+        <p class="md-body-2">
+          Sign in with your email</p>
+      </div>
+
+      <form name="loginForm" layout="column" layout-fill layout-padding layout-margin>
+        <md-input-container>
+          <label>
+            Email
+          </label>
+          <input type="text" ng-model="login.credentials.email" aria-label="email" required/>
+        </md-input-container>
+        <md-input-container>
+          <label>
+            Password
+          </label>
+          <input type="password" ng-model="login.credentials.password" aria-label="password" required/>
+        </md-input-container>
+        <div layout="row" layout-align="space-between center">
+          <a class="md-button" href="/password">Forgot password?</a>
+          <md-button class="md-raised md-primary" ng-click="login.login()" aria-label="login" ng-disabled="login.loginForm.$invalid()">Sign In
+          </md-button>
+        </div>
+      </form>
+      <md-toolbar ng-show="login.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+        <p class="md-body-1">{{ login.error }}</p>
+      </md-toolbar>
+      <md-divider></md-divider>
+      <div layout="row" layout-align="center">
+        <a class="md-button" href="/register">Need an account?</a>
+      </div>
+
+    </div>
+
+  </md-whiteframe>
+</md-content>
-- 
2.7.4


From cf231560a7d0f36df0c8518870e1747b021fb505 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:44:02 +0200
Subject: [PATCH 293/414] Step 18.43: Create Login

---
 imports/ui/components/login/login.js | 61 ++++++++++++++++++++++++++++++++++++
 1 file changed, 61 insertions(+)
 create mode 100644 imports/ui/components/login/login.js

diff --git a/imports/ui/components/login/login.js b/imports/ui/components/login/login.js
new file mode 100644
index 0000000..4ae9c9e
--- /dev/null
+++ b/imports/ui/components/login/login.js
@@ -0,0 +1,61 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+import uiRouter from 'angular-ui-router';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './login.html';
+
+import { name as Register } from '../register/register';
+
+class Login {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.credentials = {
+      email: '',
+      password: ''
+    };
+
+    this.error = '';
+  }
+
+  login() {
+    Meteor.loginWithPassword(this.credentials.email, this.credentials.password,
+      this.$bindToContext((err) => {
+        if (err) {
+          this.error = err;
+        } else {
+          this.$state.go('parties');
+        }
+      })
+    );
+  }
+}
+
+const name = 'login';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  uiRouter
+])
+  .component(name, {
+    template,
+    controllerAs: name,
+    controller: Login
+  })
+  .config(config);
+
+function config($stateProvider) {
+  'ngInject';
+
+  $stateProvider.state('login', {
+    url: '/login',
+    template: '<login></login>'
+  });
+}
-- 
2.7.4


From a9fca252d299022b920a5bc55a0cfb0419b3ba5a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:44:39 +0200
Subject: [PATCH 294/414] Step 18.44: Add Login to Auth

---
 imports/ui/components/auth/auth.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/auth/auth.js b/imports/ui/components/auth/auth.js
index faffdb3..e3290b8 100644
--- a/imports/ui/components/auth/auth.js
+++ b/imports/ui/components/auth/auth.js
@@ -6,6 +6,7 @@ import { Accounts } from 'meteor/accounts-base';
 
 import template from './auth.html';
 import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
+import { name as Login } from '../login/login';
 
 const name = 'auth';
 
@@ -33,7 +34,8 @@ class Auth {
 // create a module
 export default angular.module(name, [
   angularMeteor,
-  DisplayNameFilter
+  DisplayNameFilter,
+  Login
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From afb3df67352ec7e621ce48d05de6e1db4fb63069 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:45:38 +0200
Subject: [PATCH 295/414] Step 18.45: View for Register

---
 imports/ui/components/register/register.html | 72 ++++++++++++++++++++++++++++
 1 file changed, 72 insertions(+)
 create mode 100644 imports/ui/components/register/register.html

diff --git a/imports/ui/components/register/register.html b/imports/ui/components/register/register.html
new file mode 100644
index 0000000..37b42c6
--- /dev/null
+++ b/imports/ui/components/register/register.html
@@ -0,0 +1,72 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+  <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+
+    <md-toolbar class="md-primary md-tall" layout="column" layout-align="end" layout-fill>
+      <div layout="row" class="md-toolbar-tools md-toolbar-tools-bottom">
+        <h3 class="md-display-1">
+          Register a new account</h3>
+      </div>
+    </md-toolbar>
+
+    <div layout="column" layout-fill layout-margin layout-padding>
+
+      <div layout="row" layout-fill layout-margin>
+        <p class="md-body-2">Use your email?</p>
+      </div>
+
+      <form name="registerForm" layout="column" layout-fill layout-padding layout-margin>
+        <md-input-container >
+          <label>
+            Email
+          </label>
+          <input type="text" ng-model="register.credentials.email" placeholder="email" aria-label="email" required/>
+        </md-input-container>
+        <md-input-container >
+          <label>
+            Password
+          </label>
+          <input type="password" ng-model="register.credentials.password" placeholder="password" aria-label="password" required/>
+        </md-input-container>
+        <div layout="row" layout-align="end center">
+          <md-button class="md-raised md-primary" ng-click="register.register()" aria-label="login" ng-disabled="register.registerForm.$invalid()">Register</md-button>
+        </div>
+      </form>
+
+      <md-divider class="inset"></md-divider>
+
+      <div layout="row" layout-fill layout-margin>
+        <p class="md-body-2">
+          Want to use an existing account?
+        </p>
+      </div>
+
+      <div layout="row" layout-fill layout-margin layout-padding layout-wrap>
+        <md-button class="md-raised">
+          <md-icon md-svg-icon="social:ic_google_24px" style="color: #DC4A38;"></md-icon>
+          <span>
+            Google</span>
+        </md-button>
+        <md-button class="md-raised">
+          <md-icon md-svg-icon="social:ic_facebook_24px" style="color: #3F62B4;"></md-icon>
+          <span>Facebook
+          </span>
+        </md-button>
+        <md-button class="md-raised">
+          <md-icon md-svg-icon="social:ic_twitter_24px" style="color: #27AAE2;"></md-icon>
+          <span>Twitter
+          </span>
+        </md-button>
+      </div>
+      <md-toolbar ng-show="register.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+        <p class="md-body-1">{{ register.error }}</p>
+      </md-toolbar>
+
+      <md-divider></md-divider>
+      <div layout="row" layout-align="center">
+        <a class="md-button" href="/login">Already a user?</a>
+      </div>
+
+    </div>
+
+  </md-whiteframe>
+</md-content>
-- 
2.7.4


From d573c6c802a6944de36093b9d67f4b725a3ef041 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:46:15 +0200
Subject: [PATCH 296/414] Step 18.46: Create Register

---
 imports/ui/components/register/register.js | 58 ++++++++++++++++++++++++++++++
 1 file changed, 58 insertions(+)
 create mode 100644 imports/ui/components/register/register.js

diff --git a/imports/ui/components/register/register.js b/imports/ui/components/register/register.js
new file mode 100644
index 0000000..ab4ae94
--- /dev/null
+++ b/imports/ui/components/register/register.js
@@ -0,0 +1,58 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+import uiRouter from 'angular-ui-router';
+
+import { Accounts } from 'meteor/accounts-base';
+
+import template from './register.html';
+
+class Register {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.credentials = {
+      email: '',
+      password: ''
+    };
+
+    this.error = '';
+  }
+
+  register() {
+    Accounts.createUser(this.credentials,
+      this.$bindToContext((err) => {
+        if (err) {
+          this.error = err;
+        } else {
+          this.$state.go('parties');
+        }
+      })
+    );
+  }
+}
+
+const name = 'register';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  uiRouter
+])
+  .component(name, {
+    template,
+    controllerAs: name,
+    controller: Register
+  })
+  .config(config);
+
+function config($stateProvider) {
+  'ngInject';
+  $stateProvider.state('register', {
+    url: '/register',
+    template: '<register></register>'
+  });
+}
-- 
2.7.4


From 9f125b1c88c92b28aae6a5197ec13ac4c4f83f87 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:46:55 +0200
Subject: [PATCH 297/414] Step 18.47: Add Register to Auth

---
 imports/ui/components/auth/auth.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/auth/auth.js b/imports/ui/components/auth/auth.js
index e3290b8..871e2fd 100644
--- a/imports/ui/components/auth/auth.js
+++ b/imports/ui/components/auth/auth.js
@@ -7,6 +7,7 @@ import { Accounts } from 'meteor/accounts-base';
 import template from './auth.html';
 import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
 import { name as Login } from '../login/login';
+import { name as Register } from '../register/register';
 
 const name = 'auth';
 
@@ -35,7 +36,8 @@ class Auth {
 export default angular.module(name, [
   angularMeteor,
   DisplayNameFilter,
-  Login
+  Login,
+  Register
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 6346d5a43a20c07bfe73f4a8b00f9ac29733f629 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:47:29 +0200
Subject: [PATCH 298/414] Step 18.48: View for Password

---
 imports/ui/components/password/password.html | 40 ++++++++++++++++++++++++++++
 1 file changed, 40 insertions(+)
 create mode 100644 imports/ui/components/password/password.html

diff --git a/imports/ui/components/password/password.html b/imports/ui/components/password/password.html
new file mode 100644
index 0000000..94df2b0
--- /dev/null
+++ b/imports/ui/components/password/password.html
@@ -0,0 +1,40 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+  <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+
+    <md-toolbar class="md-primary md-tall" layout="column" layout-align="end" layout-fill>
+      <div layout="row" class="md-toolbar-tools md-toolbar-tools-bottom">
+        <h3 class="md-display-1"> Reset Password</h3>
+      </div>
+    </md-toolbar>
+
+    <div layout="column" layout-fill layout-margin layout-padding>
+
+      <div layout="row" layout-fill layout-margin>
+        <p class="md-body-2">Enter your email so we can send you a reset link</p>
+      </div>
+
+      <form name="resetForm" layout="column" layout-fill layout-padding layout-margin>
+        <md-input-container>
+          <label> Email </label>
+          <input type="text" ng-model="password.credentials.email" placeholder="email" aria-label="email" required/>
+        </md-input-container>
+        <div layout="row" layout-align="end center">
+          <md-button class="md-raised md-primary" ng-click="password.reset()" aria-label="reset"
+                     ng-disabled="password.resetForm.$invalid()">Send Email
+          </md-button>
+        </div>
+      </form>
+
+      <md-toolbar ng-show="password.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+        <p class="md-body-1">{{ password.error }}</p>
+      </md-toolbar>
+
+      <md-divider></md-divider>
+      <div layout="row" layout-align="center">
+        <a class="md-button" href="/login">Sign in</a>
+      </div>
+
+    </div>
+
+  </md-whiteframe>
+</md-content>
-- 
2.7.4


From f8707dad9acb713a38c63bba8fe9a0a50200f9f3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:48:03 +0200
Subject: [PATCH 299/414] Step 18.49: Create Password

---
 imports/ui/components/password/password.js | 56 ++++++++++++++++++++++++++++++
 1 file changed, 56 insertions(+)
 create mode 100644 imports/ui/components/password/password.js

diff --git a/imports/ui/components/password/password.js b/imports/ui/components/password/password.js
new file mode 100644
index 0000000..c417f95
--- /dev/null
+++ b/imports/ui/components/password/password.js
@@ -0,0 +1,56 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+import uiRouter from 'angular-ui-router';
+
+import { Accounts } from 'meteor/accounts-base';
+
+import template from './password.html';
+
+class Register {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.credentials = {
+      email: ''
+    };
+
+    this.error = '';
+  }
+
+  reset() {
+    Accounts.forgotPassword(this.credentials, this.$bindToContext((err) => {
+      if (err) {
+        this.error = err;
+      } else {
+        this.$state.go('parties');
+      }
+    }));
+  }
+}
+
+const name = 'password';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  uiRouter
+])
+  .component(name, {
+    template,
+    controllerAs: name,
+    controller: Register
+  })
+  .config(config);
+
+function config($stateProvider) {
+  'ngInject';
+
+  $stateProvider.state('password', {
+    url: '/password',
+    template: '<password></password>'
+  });
+}
-- 
2.7.4


From c323bff316262b2321f7a7acaf1ecc12349fca08 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:48:33 +0200
Subject: [PATCH 300/414] Step 18.50: Add Password to Auth

---
 imports/ui/components/auth/auth.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/auth/auth.js b/imports/ui/components/auth/auth.js
index 871e2fd..a87dd5e 100644
--- a/imports/ui/components/auth/auth.js
+++ b/imports/ui/components/auth/auth.js
@@ -8,6 +8,7 @@ import template from './auth.html';
 import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
 import { name as Login } from '../login/login';
 import { name as Register } from '../register/register';
+import { name as Password } from '../password/password';
 
 const name = 'auth';
 
@@ -37,7 +38,8 @@ export default angular.module(name, [
   angularMeteor,
   DisplayNameFilter,
   Login,
-  Register
+  Register,
+  Password
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 547cf833803dbf39071464f37fe702cca86437ce Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:50:12 +0200
Subject: [PATCH 301/414] Step 18.51: Add Auth to Socially

---
 imports/ui/components/socially/socially.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index cad243b..21940eb 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -7,6 +7,7 @@ import template from './socially.html';
 import { name as PartiesList } from '../partiesList/partiesList';
 import { name as PartyDetails } from '../partyDetails/partyDetails';
 import { name as Navigation } from '../navigation/navigation';
+import { name as Auth } from '../auth/auth';
 
 class Socially {}
 
@@ -20,6 +21,7 @@ export default angular.module(name, [
   PartiesList,
   PartyDetails,
   Navigation,
+  Auth,
   'accounts.ui'
 ]).component(name, {
   template,
-- 
2.7.4


From 79edde5c2ff522707960f0300e710d23fe913095 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:50:46 +0200
Subject: [PATCH 302/414] Step 18.52: Implement Auth

---
 imports/ui/components/navigation/navigation.html | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/navigation/navigation.html b/imports/ui/components/navigation/navigation.html
index 0b1d8a6..2d81bc4 100644
--- a/imports/ui/components/navigation/navigation.html
+++ b/imports/ui/components/navigation/navigation.html
@@ -5,6 +5,7 @@
         Socially
       </span>
     </h2>
-    <login-buttons></login-buttons>
+    <span flex></span>
+    <auth></auth>
   </div>
 </md-toolbar>
-- 
2.7.4


From 1217479a037240f6e1c62eb45276f476d2209a40 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:51:45 +0200
Subject: [PATCH 303/414] Step 18.53: Remove .less of Navigation

---
 imports/ui/components/navigation/navigation.less | 5 -----
 1 file changed, 5 deletions(-)
 delete mode 100644 imports/ui/components/navigation/navigation.less

diff --git a/imports/ui/components/navigation/navigation.less b/imports/ui/components/navigation/navigation.less
deleted file mode 100644
index 87b8777..0000000
--- a/imports/ui/components/navigation/navigation.less
+++ /dev/null
@@ -1,5 +0,0 @@
-navigation {
-  login-buttons {
-    margin-left: 15px;
-  }
-}
-- 
2.7.4


From 4ad73eaba189cdcd75b03e8b41d0c8a704c48738 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 03:52:12 +0200
Subject: [PATCH 304/414] Step 18.54: Remove import statement

---
 imports/ui/components/socially/socially.less | 2 --
 1 file changed, 2 deletions(-)

diff --git a/imports/ui/components/socially/socially.less b/imports/ui/components/socially/socially.less
index 3eabc12..742f92d 100644
--- a/imports/ui/components/socially/socially.less
+++ b/imports/ui/components/socially/socially.less
@@ -2,7 +2,5 @@ socially {
   display: block;
 }
 
-
-@import "../navigation/navigation.less";
 @import "../partiesList/partiesList.less";
 @import "../partyDetails/partyDetails.less";
-- 
2.7.4


From bcede579b3f329603d8f05009fc84213afd5a278 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:38:56 +0200
Subject: [PATCH 305/414] Step 20.1: Add `jalik:ufs`

---
 .meteor/packages | 1 +
 .meteor/versions | 2 ++
 2 files changed, 3 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 1116bb7..59856e0 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -30,3 +30,4 @@ email
 less
 planettraining:material-design-icons
 pagebakers:ionicons
+jalik:ufs
diff --git a/.meteor/versions b/.meteor/versions
index bef3e68..dbae4b0 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -41,12 +41,14 @@ html-tools@1.0.11
 htmljs@1.0.11
 http@1.2.9_1
 id-map@1.0.8
+jalik:ufs@0.7.1_1
 jquery@1.11.9
 launch-screen@1.0.12
 less@2.7.5_1
 livedata@1.0.18
 localstorage@1.0.11
 logging@1.1.15_1
+matb33:collection-hooks@0.8.4
 meteor@1.2.17_1
 meteor-base@1.0.4
 minifier-css@1.2.14_1
-- 
2.7.4


From d6b313ab3702e1b4d30fdb3c58b58b6ea3684340 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:40:52 +0200
Subject: [PATCH 306/414] Step 20.2: Add `jalik:ufs-gridfs`

---
 .meteor/packages | 1 +
 .meteor/versions | 1 +
 2 files changed, 2 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index 59856e0..dab7905 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -31,3 +31,4 @@ less
 planettraining:material-design-icons
 pagebakers:ionicons
 jalik:ufs
+jalik:ufs-gridfs
diff --git a/.meteor/versions b/.meteor/versions
index dbae4b0..a60ade0 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -42,6 +42,7 @@ htmljs@1.0.11
 http@1.2.9_1
 id-map@1.0.8
 jalik:ufs@0.7.1_1
+jalik:ufs-gridfs@0.1.4
 jquery@1.11.9
 launch-screen@1.0.12
 less@2.7.5_1
-- 
2.7.4


From 01cac6c7d1ec99ed14e1a1caa4044d1d77a84226 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:48:58 +0200
Subject: [PATCH 307/414] Step 20.3: Create Images and Thumbs collections

---
 imports/api/images/collection.js | 21 +++++++++++++++++++++
 1 file changed, 21 insertions(+)
 create mode 100644 imports/api/images/collection.js

diff --git a/imports/api/images/collection.js b/imports/api/images/collection.js
new file mode 100644
index 0000000..a522111
--- /dev/null
+++ b/imports/api/images/collection.js
@@ -0,0 +1,21 @@
+import { Meteor } from 'meteor/meteor';
+import { Mongo } from 'meteor/mongo';
+
+export const Images = new Mongo.Collection('images');
+export const Thumbs = new Mongo.Collection('thumbs');
+
+function loggedIn(userId) {
+  return !!userId;
+}
+
+Thumbs.allow({
+  insert: loggedIn,
+  update: loggedIn,
+  remove: loggedIn
+});
+
+Images.allow({
+  insert: loggedIn,
+  update: loggedIn,
+  remove: loggedIn
+});
-- 
2.7.4


From abd0e4dfcd607d3eec19fd8df37378b263df493d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:50:11 +0200
Subject: [PATCH 308/414] Step 20.4: Create ThumbsStore and ImagesStore

---
 imports/api/images/store.js | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)
 create mode 100644 imports/api/images/store.js

diff --git a/imports/api/images/store.js b/imports/api/images/store.js
new file mode 100644
index 0000000..58462c1
--- /dev/null
+++ b/imports/api/images/store.js
@@ -0,0 +1,18 @@
+import { UploadFS } from 'meteor/jalik:ufs';
+import { Images, Thumbs } from './collection';
+
+export const ThumbsStore = new UploadFS.store.GridFS({
+  collection: Thumbs,
+  name: 'thumbs'
+});
+
+export const ImagesStore = new UploadFS.store.GridFS({
+  collection: Images,
+  name: 'images',
+  filter: new UploadFS.Filter({
+    contentTypes: ['image/*']
+  }),
+  copyTo: [
+    ThumbsStore
+  ]
+});
-- 
2.7.4


From 9eed3090d599cc16705fe95b1736fd974609b0a7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:50:57 +0200
Subject: [PATCH 309/414] Step 20.5: Create main export file of Images and
 Thumbs

---
 imports/api/images/index.js | 2 ++
 1 file changed, 2 insertions(+)
 create mode 100644 imports/api/images/index.js

diff --git a/imports/api/images/index.js b/imports/api/images/index.js
new file mode 100644
index 0000000..9c18361
--- /dev/null
+++ b/imports/api/images/index.js
@@ -0,0 +1,2 @@
+export * from './collection';
+export * from './store';
-- 
2.7.4


From 68140759fa09028b46f3d64502e660ad53944536 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:52:30 +0200
Subject: [PATCH 310/414] Step 20.6: Resize images

---
 imports/api/images/store.js | 14 +++++++++++++-
 1 file changed, 13 insertions(+), 1 deletion(-)

diff --git a/imports/api/images/store.js b/imports/api/images/store.js
index 58462c1..a0fa6d6 100644
--- a/imports/api/images/store.js
+++ b/imports/api/images/store.js
@@ -3,7 +3,19 @@ import { Images, Thumbs } from './collection';
 
 export const ThumbsStore = new UploadFS.store.GridFS({
   collection: Thumbs,
-  name: 'thumbs'
+  name: 'thumbs',
+  transformWrite(from, to, fileId, file) {
+    // Resize to 32x32
+    const gm = require('gm');
+
+    gm(from, file.name)
+      .resize(32, 32)
+      .gravity('Center')
+      .extent(32, 32)
+      .quality(75)
+      .stream()
+      .pipe(to);
+  }
 });
 
 export const ImagesStore = new UploadFS.store.GridFS({
-- 
2.7.4


From e335123053fd37741d495a6fb6f598af1ef9ea1f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:54:06 +0200
Subject: [PATCH 311/414] Step 20.7: Install `gm`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 8971ed8..459c03c 100644
--- a/package.json
+++ b/package.json
@@ -16,6 +16,7 @@
     "angular-ui-router": "^0.2.18",
     "angular-simple-logger": "^0.1.7",
     "angular-utils-pagination": "^0.11.1",
+    "gm": "^1.22.0",
     "meteor-node-stubs": "~0.2.0",
     "underscore": "^1.8.3"
   },
-- 
2.7.4


From d340d890c372e96b2bdfdd95294dbd39b6ea4455 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:58:21 +0200
Subject: [PATCH 312/414] Step 20.8: Create view for PartyUpload

---
 imports/ui/components/partyUpload/partyUpload.html | 9 +++++++++
 1 file changed, 9 insertions(+)
 create mode 100644 imports/ui/components/partyUpload/partyUpload.html

diff --git a/imports/ui/components/partyUpload/partyUpload.html b/imports/ui/components/partyUpload/partyUpload.html
new file mode 100644
index 0000000..d53d6c7
--- /dev/null
+++ b/imports/ui/components/partyUpload/partyUpload.html
@@ -0,0 +1,9 @@
+<div layout="column">
+  <div>
+      <div>Click here to select image</div>
+      <div>
+        <strong>OR</strong>
+      </div>
+      <div>You can also drop image to here</div>
+  </div>
+</div>
-- 
2.7.4


From 4cbe3c7227a7dbb987f13d65a1ad02a8deab6849 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 12:59:42 +0200
Subject: [PATCH 313/414] Step 20.9: Create PartyUpload component

---
 imports/ui/components/partyUpload/partyUpload.js | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)
 create mode 100644 imports/ui/components/partyUpload/partyUpload.js

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
new file mode 100644
index 0000000..571b3c1
--- /dev/null
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -0,0 +1,19 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyUpload.html';
+
+class PartyUpload {}
+
+const name = 'partyUpload';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  controllerAs: name,
+  controller: PartyUpload
+});
-- 
2.7.4


From 199240b0a7576e2edb82ed32e0b2ad450564c41a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:01:32 +0200
Subject: [PATCH 314/414] Step 20.10: Add to PartyAdd

---
 imports/ui/components/partyAdd/partyAdd.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyAdd/partyAdd.js b/imports/ui/components/partyAdd/partyAdd.js
index 97d9b98..0ac9f9c 100644
--- a/imports/ui/components/partyAdd/partyAdd.js
+++ b/imports/ui/components/partyAdd/partyAdd.js
@@ -5,6 +5,7 @@ import { Meteor } from 'meteor/meteor';
 
 import template from './partyAdd.html';
 import { Parties } from '../../../api/parties';
+import { name as PartyUpload } from '../partyUpload/partyUpload';
 
 class PartyAdd {
   constructor() {
@@ -31,7 +32,8 @@ const name = 'partyAdd';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor
+  angularMeteor,
+  PartyUpload
 ]).component(name, {
   template,
   bindings: {
-- 
2.7.4


From 679630665166c5338e864cb36084b5aebcbb6cec Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:03:51 +0200
Subject: [PATCH 315/414] Step 20.11: Implement to the view

---
 imports/ui/components/partyAdd/partyAdd.html | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partyAdd/partyAdd.html b/imports/ui/components/partyAdd/partyAdd.html
index 6e504f0..8946e6d 100644
--- a/imports/ui/components/partyAdd/partyAdd.html
+++ b/imports/ui/components/partyAdd/partyAdd.html
@@ -19,4 +19,5 @@
   <div flex>
     <md-button ng-click="partyAdd.submit()" class="md-raised">Add Party!</md-button>
   </div>
+  <party-upload files="partyAdd.party.images"></party-upload>
 </div>
-- 
2.7.4


From 929f04766e23f54975ba3e4c021c5ea6163aff7c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:05:32 +0200
Subject: [PATCH 316/414] Step 20.12: install `ng-file-upload`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 459c03c..0484324 100644
--- a/package.json
+++ b/package.json
@@ -18,6 +18,7 @@
     "angular-utils-pagination": "^0.11.1",
     "gm": "^1.22.0",
     "meteor-node-stubs": "~0.2.0",
+    "ng-file-upload": "^12.0.4",
     "underscore": "^1.8.3"
   },
   "devDependencies": {
-- 
2.7.4


From ea8f5b5f96c8636ca9993eadf91616509c970796 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:08:06 +0200
Subject: [PATCH 317/414] Step 20.13: Add as a dependency

---
 imports/ui/components/partyUpload/partyUpload.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
index 571b3c1..d4b7c6e 100644
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -1,5 +1,6 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
+import ngFileUpload from 'ng-file-upload';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -11,7 +12,8 @@ const name = 'partyUpload';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor
+  angularMeteor,
+  ngFileUpload
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From 642024c5815eccda0219854cac46697135d156dc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:09:13 +0200
Subject: [PATCH 318/414] Step 20.14: Add ngf-drop to the view

---
 imports/ui/components/partyUpload/partyUpload.html | 21 +++++++++++++++------
 1 file changed, 15 insertions(+), 6 deletions(-)

diff --git a/imports/ui/components/partyUpload/partyUpload.html b/imports/ui/components/partyUpload/partyUpload.html
index d53d6c7..70e5af3 100644
--- a/imports/ui/components/partyUpload/partyUpload.html
+++ b/imports/ui/components/partyUpload/partyUpload.html
@@ -1,9 +1,18 @@
 <div layout="column">
-  <div>
-      <div>Click here to select image</div>
-      <div>
-        <strong>OR</strong>
-      </div>
-      <div>You can also drop image to here</div>
+  <div ngf-drop
+    ngf-select
+    ngf-change="partyUpload.addImages($files)"
+    ngf-drag-over-class="{accept:'dragover', reject:'dragover-err', delay:100}"
+    class="drop-box"
+    ngf-multiple="false"
+    ngf-allow-dir="false"
+    ngf-accept="'image/*'"
+    ngf-drop-available="true"
+    ng-hide="partyUpload.cropImgSrc">
+    <div>Click here to select image</div>
+    <div>
+      <strong>OR</strong>
+    </div>
+    <div>You can also drop image to here</div>
   </div>
 </div>
-- 
2.7.4


From 5631d5e8dd484d2731ede4621727439770f3d942 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:12:52 +0200
Subject: [PATCH 319/414] Step 20.15: Handle file selection

---
 imports/ui/components/partyUpload/partyUpload.js | 25 +++++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
index d4b7c6e..7ad01f9 100644
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -6,7 +6,30 @@ import { Meteor } from 'meteor/meteor';
 
 import template from './partyUpload.html';
 
-class PartyUpload {}
+class PartyUpload {
+  constructor($scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+  }
+
+  addImages(files) {
+    if (files.length) {
+      this.currentFile = files[0];
+
+      const reader = new FileReader;
+
+      reader.onload = this.$bindToContext((e) => {
+        this.cropImgSrc = e.target.result;
+        this.myCroppedImage = '';
+      });
+
+      reader.readAsDataURL(files[0]);
+    } else {
+      this.cropImgSrc = undefined;
+    }
+  }
+}
 
 const name = 'partyUpload';
 
-- 
2.7.4


From 18e2a154ea6d3487465ff3d30043bb1c1dd53a6c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:15:21 +0200
Subject: [PATCH 320/414] Step 20.16: Add style

---
 imports/ui/components/partyUpload/partyUpload.less | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)
 create mode 100644 imports/ui/components/partyUpload/partyUpload.less

diff --git a/imports/ui/components/partyUpload/partyUpload.less b/imports/ui/components/partyUpload/partyUpload.less
new file mode 100644
index 0000000..987a853
--- /dev/null
+++ b/imports/ui/components/partyUpload/partyUpload.less
@@ -0,0 +1,16 @@
+party-upload {
+  .drop-box {
+    background: #F8F8F8;
+    border: 5px dashed #DDD;
+    text-align: center;
+    padding: 25px;
+    margin-left: 10px;
+    margin-bottom: 20px;
+  }
+  .drop-box.dragover {
+    border: 5px dashed blue;
+  }
+  .drop-box.dragover-err {
+    border: 5px dashed red;
+  }
+}
-- 
2.7.4


From 28ca67e3e4aa80fc006bbc04b46112523595055e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:15:42 +0200
Subject: [PATCH 321/414] Step 20.17: Import in PartyAdd

---
 imports/ui/components/partyAdd/partyAdd.less | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 imports/ui/components/partyAdd/partyAdd.less

diff --git a/imports/ui/components/partyAdd/partyAdd.less b/imports/ui/components/partyAdd/partyAdd.less
new file mode 100644
index 0000000..18bfd78
--- /dev/null
+++ b/imports/ui/components/partyAdd/partyAdd.less
@@ -0,0 +1 @@
+@import "../partyUpload/partyUpload.less";
-- 
2.7.4


From 9fb35215f3aad0bc2358a77c15285ae3a33b510b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:16:18 +0200
Subject: [PATCH 322/414] Step 20.18: Import in PartyAddButton

---
 imports/ui/components/partyAddButton/partyAddButton.less | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/partyAddButton/partyAddButton.less b/imports/ui/components/partyAddButton/partyAddButton.less
index b765a6c..9f2f5e2 100644
--- a/imports/ui/components/partyAddButton/partyAddButton.less
+++ b/imports/ui/components/partyAddButton/partyAddButton.less
@@ -3,3 +3,4 @@ party-add-button {
   right: 15px;
   bottom: 15px;
 }
+@import "../partyAdd/partyAdd.less";
-- 
2.7.4


From b8993c9190ae6df4dadd152ddd427bdd52884572 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:17:27 +0200
Subject: [PATCH 323/414] Step 20.19: Install `ng-img-crop`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 0484324..1ebcbea 100644
--- a/package.json
+++ b/package.json
@@ -19,6 +19,7 @@
     "gm": "^1.22.0",
     "meteor-node-stubs": "~0.2.0",
     "ng-file-upload": "^12.0.4",
+    "ng-img-crop": "^0.2.0",
     "underscore": "^1.8.3"
   },
   "devDependencies": {
-- 
2.7.4


From b3c47363fed33a6f0eb679128e96705434d63900 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:27:50 +0200
Subject: [PATCH 324/414] Step 20.20: Add ngImgCrop

---
 imports/ui/components/partyUpload/partyUpload.js | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
index 7ad01f9..94f2de1 100644
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -1,6 +1,9 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 import ngFileUpload from 'ng-file-upload';
+import 'ng-img-crop/compile/minified/ng-img-crop';
+import 'ng-img-crop/compile/minified/ng-img-crop.css';
+
 
 import { Meteor } from 'meteor/meteor';
 
@@ -36,7 +39,8 @@ const name = 'partyUpload';
 // create a module
 export default angular.module(name, [
   angularMeteor,
-  ngFileUpload
+  ngFileUpload,
+  'ngImgCrop'
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From cbfea88f8171fc30e75f9a392276f41e10cb2b35 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:31:51 +0200
Subject: [PATCH 325/414] Step 20.21: Use ngImgCrop

---
 imports/ui/components/partyUpload/partyUpload.html | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/imports/ui/components/partyUpload/partyUpload.html b/imports/ui/components/partyUpload/partyUpload.html
index 70e5af3..2dd38e9 100644
--- a/imports/ui/components/partyUpload/partyUpload.html
+++ b/imports/ui/components/partyUpload/partyUpload.html
@@ -15,4 +15,18 @@
     </div>
     <div>You can also drop image to here</div>
   </div>
+  <div ng-show="partyUpload.cropImgSrc" layout="column" class="ng-crop">
+    <div>
+      <h3>Edit &amp; crop</h3>
+      <md-button ng-click="partyUpload.save()" class="md-primary">
+        Save Image
+      </md-button>
+      <md-button ng-click="partyUpload.reset()">
+        Cancel
+      </md-button>
+    </div>
+    <div class="ng-crop-container">
+      <img-crop image="partyUpload.cropImgSrc" result-image="partyUpload.myCroppedImage" area-type="square"></img-crop>
+    </div>
+  </div>
 </div>
-- 
2.7.4


From a93fd49e04c81315acc26dd375e0662c8230eea3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 13:32:11 +0200
Subject: [PATCH 326/414] Step 20.22: Add styles

---
 imports/ui/components/partyUpload/partyUpload.less | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/imports/ui/components/partyUpload/partyUpload.less b/imports/ui/components/partyUpload/partyUpload.less
index 987a853..645cee2 100644
--- a/imports/ui/components/partyUpload/partyUpload.less
+++ b/imports/ui/components/partyUpload/partyUpload.less
@@ -13,4 +13,13 @@ party-upload {
   .drop-box.dragover-err {
     border: 5px dashed red;
   }
+  .ng-crop {
+    h3 {
+      margin-top: 0;
+    }
+  }
+  .ng-crop-container {
+    width: 400px;
+    height: 225px;
+  }
 }
-- 
2.7.4


From 8e834cace0a30e19efb02489080e722a92168546 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:02:41 +0200
Subject: [PATCH 327/414] Step 20.23: Add dataURLToBlob helper

---
 imports/api/images/helpers.js | 31 +++++++++++++++++++++++++++++++
 1 file changed, 31 insertions(+)
 create mode 100644 imports/api/images/helpers.js

diff --git a/imports/api/images/helpers.js b/imports/api/images/helpers.js
new file mode 100644
index 0000000..23f1350
--- /dev/null
+++ b/imports/api/images/helpers.js
@@ -0,0 +1,31 @@
+/**
+ * Converts DataURL to Blob object
+ *
+ * https://github.com/ebidel/filer.js/blob/master/src/filer.js#L137
+ *
+ * @param  {String} dataURL
+ * @return {Blob}
+ */
+export function dataURLToBlob(dataURL) {
+    const BASE64_MARKER = ';base64,';
+
+    if (dataURL.indexOf(BASE64_MARKER) === -1) {
+      const parts = dataURL.split(',');
+      const contentType = parts[0].split(':')[1];
+      const raw = decodeURIComponent(parts[1]);
+
+      return new Blob([raw], {type: contentType});
+    }
+
+    const parts = dataURL.split(BASE64_MARKER);
+    const contentType = parts[0].split(':')[1];
+    const raw = window.atob(parts[1]);
+    const rawLength = raw.length;
+    const uInt8Array = new Uint8Array(rawLength);
+
+    for (let i = 0; i < rawLength; ++i) {
+      uInt8Array[i] = raw.charCodeAt(i);
+    }
+
+    return new Blob([uInt8Array], {type: contentType});
+}
-- 
2.7.4


From 8d96f1b91aa266805c830e7e85ebe9165eb0b6c8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:05:04 +0200
Subject: [PATCH 328/414] Step 20.24: Add blobToArrayBuffer helper

---
 imports/api/images/helpers.js | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

diff --git a/imports/api/images/helpers.js b/imports/api/images/helpers.js
index 23f1350..448f932 100644
--- a/imports/api/images/helpers.js
+++ b/imports/api/images/helpers.js
@@ -29,3 +29,26 @@ export function dataURLToBlob(dataURL) {
 
     return new Blob([uInt8Array], {type: contentType});
 }
+
+/**
+ * Converts Blob object to ArrayBuffer
+ *
+ * @param  {Blob}       blob          Source file
+ * @param  {Function}   callback      Success callback with converted object as a first argument
+ * @param  {Function}   errorCallback Error callback with error as a first argument
+ */
+export function blobToArrayBuffer(blob, callback, errorCallback) {
+  const reader = new FileReader();
+
+  reader.onload = (e) => {
+    callback(e.target.result);
+  };
+
+  reader.onerror = (e) => {
+    if (errorCallback) {
+      errorCallback(e);
+    }
+  };
+
+  reader.readAsArrayBuffer(blob);
+}
-- 
2.7.4


From 6eae76e9f659ebff88d3b9862b8f4a2ba3b840d8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:08:29 +0200
Subject: [PATCH 329/414] Step 20.25: Create `upload` method

---
 imports/api/images/methods.js | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)
 create mode 100644 imports/api/images/methods.js

diff --git a/imports/api/images/methods.js b/imports/api/images/methods.js
new file mode 100644
index 0000000..e634901
--- /dev/null
+++ b/imports/api/images/methods.js
@@ -0,0 +1,33 @@
+import { UploadFS } from 'meteor/jalik:ufs';
+import { ImagesStore } from './store';
+import { dataURLToBlob, blobToArrayBuffer } from './helpers';
+
+/**
+ * Uploads a new file
+ *
+ * @param  {String}   dataUrl [description]
+ * @param  {String}   name    [description]
+ * @param  {Function} resolve [description]
+ * @param  {Function} reject  [description]
+ */
+export function upload(dataUrl, name, resolve, reject) {
+  // convert to Blob
+  const blob = dataURLToBlob(dataUrl);
+  blob.name = name;
+
+  // pick from an object only: name, type and size
+  const file = _.pick(blob, 'name', 'type', 'size');
+
+  // convert to ArrayBuffer
+  blobToArrayBuffer(blob, (data) => {
+    const upload = new UploadFS.Uploader({
+      data,
+      file,
+      store: ImagesStore,
+      onError: reject,
+      onComplete: resolve
+    });
+
+    upload.start();
+  }, reject);
+}
-- 
2.7.4


From 4e8692331a2bd52209c816d13c074d2241274e5e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:08:56 +0200
Subject: [PATCH 330/414] Step 20.26: Export methods

---
 imports/api/images/index.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/api/images/index.js b/imports/api/images/index.js
index 9c18361..74293fe 100644
--- a/imports/api/images/index.js
+++ b/imports/api/images/index.js
@@ -1,2 +1,3 @@
 export * from './collection';
 export * from './store';
+export * from './methods';
-- 
2.7.4


From 1d6712fdc2073a6fc9a29064405c3e2c13fa1626 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:15:15 +0200
Subject: [PATCH 331/414] Step 20.27: Implement `save` and `reset` methods

---
 imports/ui/components/partyUpload/partyUpload.js | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
index 94f2de1..7dd2bd1 100644
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -8,12 +8,15 @@ import 'ng-img-crop/compile/minified/ng-img-crop.css';
 import { Meteor } from 'meteor/meteor';
 
 import template from './partyUpload.html';
+import { upload } from '../../../api/images';
 
 class PartyUpload {
   constructor($scope, $reactive) {
     'ngInject';
 
     $reactive(this).attach($scope);
+
+    this.uploaded = [];
   }
 
   addImages(files) {
@@ -32,6 +35,20 @@ class PartyUpload {
       this.cropImgSrc = undefined;
     }
   }
+
+  save() {
+    upload(this.myCroppedImage, this.currentFile.name, this.$bindToContext((file) => {
+      this.uploaded.push(file);
+      this.reset();
+    }), (e) => {
+      console.log('Oops, something went wrong', e);
+    });
+  }
+
+  reset() {
+    this.cropImgSrc = undefined;
+    this.myCroppedImage = '';
+  }
 }
 
 const name = 'partyUpload';
-- 
2.7.4


From 765f978bdfe5791304962121d7af5fc42f630dad Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:16:03 +0200
Subject: [PATCH 332/414] Step 20.28: Import Images on server side

---
 server/main.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/server/main.js b/server/main.js
index 1acdc6c..2b47936 100644
--- a/server/main.js
+++ b/server/main.js
@@ -1,3 +1,4 @@
 import '../imports/startup/fixtures';
 import '../imports/api/parties';
 import '../imports/api/users';
+import '../imports/api/images';
-- 
2.7.4


From 7481c432d2587c696d7fa665368abe6ca434f7b9 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:21:33 +0200
Subject: [PATCH 333/414] Step 20.29: Display uploaded images

---
 imports/ui/components/partyUpload/partyUpload.html | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/imports/ui/components/partyUpload/partyUpload.html b/imports/ui/components/partyUpload/partyUpload.html
index 2dd38e9..124bfdb 100644
--- a/imports/ui/components/partyUpload/partyUpload.html
+++ b/imports/ui/components/partyUpload/partyUpload.html
@@ -29,4 +29,9 @@
       <img-crop image="partyUpload.cropImgSrc" result-image="partyUpload.myCroppedImage" area-type="square"></img-crop>
     </div>
   </div>
+  <div layout="row" class="images-container-title">
+    <div class="party-image-container" ng-class="{'main-image': $index === 0}" ng-repeat="thumb in partyUpload.thumbs">
+      <img ng-src="{{ thumb.url }}"/>
+    </div>
+  </div>
 </div>
-- 
2.7.4


From abea6c72d841d810c02bf260de41f193cab728d7 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:22:36 +0200
Subject: [PATCH 334/414] Step 20.30: Add styles

---
 imports/ui/components/partyUpload/partyUpload.less | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/imports/ui/components/partyUpload/partyUpload.less b/imports/ui/components/partyUpload/partyUpload.less
index 645cee2..f781c1c 100644
--- a/imports/ui/components/partyUpload/partyUpload.less
+++ b/imports/ui/components/partyUpload/partyUpload.less
@@ -22,4 +22,20 @@ party-upload {
     width: 400px;
     height: 225px;
   }
+  .images-container-title {
+    padding-bottom: 30px;
+  }
+  .party-image-container {
+    position: relative;
+    margin-right: 10px;
+    max-height: 200px;
+    max-width: 200px;
+    img {
+      max-height: 100%;
+      max-width: 100%;
+    }
+  }
+  .main-image {
+    border: 2px solid #ddd;
+  }
 }
-- 
2.7.4


From 8a993a91b47d25c08e2f5653b647b64829412fd1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:24:09 +0200
Subject: [PATCH 335/414] Step 20.31: Add `thumbs` and `images` publications

---
 imports/api/images/publish.js | 17 +++++++++++++++++
 1 file changed, 17 insertions(+)
 create mode 100644 imports/api/images/publish.js

diff --git a/imports/api/images/publish.js b/imports/api/images/publish.js
new file mode 100644
index 0000000..5949c72
--- /dev/null
+++ b/imports/api/images/publish.js
@@ -0,0 +1,17 @@
+import { Meteor } from 'meteor/meteor';
+import { Thumbs, Images } from './collection';
+
+if (Meteor.isServer) {
+  Meteor.publish('thumbs', function(ids) {
+    return Thumbs.find({
+      originalStore: 'images',
+      originalId: {
+        $in: ids
+      }
+    });
+  });
+
+  Meteor.publish('images', function() {
+    return Images.find({});
+  });
+}
-- 
2.7.4


From dd9f4277efd4f4b17cd9e24976c230f77ea53572 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:24:36 +0200
Subject: [PATCH 336/414] Step 20.32: Import publications

---
 imports/api/images/index.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/api/images/index.js b/imports/api/images/index.js
index 74293fe..57692b3 100644
--- a/imports/api/images/index.js
+++ b/imports/api/images/index.js
@@ -1,3 +1,4 @@
+import './publish';
 export * from './collection';
 export * from './store';
 export * from './methods';
-- 
2.7.4


From 3e5670250fefe07fce1e784670a18d9863fd0e88 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:29:08 +0200
Subject: [PATCH 337/414] Step 20.33: Implement thumbnails

---
 imports/ui/components/partyUpload/partyUpload.js | 23 ++++++++++++++++++++++-
 1 file changed, 22 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
index 7dd2bd1..100b85a 100644
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -8,7 +8,7 @@ import 'ng-img-crop/compile/minified/ng-img-crop.css';
 import { Meteor } from 'meteor/meteor';
 
 import template from './partyUpload.html';
-import { upload } from '../../../api/images';
+import { Thumbs, upload } from '../../../api/images';
 
 class PartyUpload {
   constructor($scope, $reactive) {
@@ -17,6 +17,21 @@ class PartyUpload {
     $reactive(this).attach($scope);
 
     this.uploaded = [];
+
+    this.subscribe('thumbs', () => [
+      this.getReactively('files', true) || []
+    ]);
+
+    this.helpers({
+      thumbs() {
+        return Thumbs.find({
+          originalStore: 'images',
+          originalId: {
+            $in: this.getReactively('files', true) || []
+          }
+        });
+      }
+    });
   }
 
   addImages(files) {
@@ -39,6 +54,12 @@ class PartyUpload {
   save() {
     upload(this.myCroppedImage, this.currentFile.name, this.$bindToContext((file) => {
       this.uploaded.push(file);
+
+      if (!this.files || !this.files.length) {
+        this.files = [];
+      }
+      this.files.push(file._id);
+
       this.reset();
     }), (e) => {
       console.log('Oops, something went wrong', e);
-- 
2.7.4


From 49859dd4b903f0e417c647509543b4a218c56abb Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:32:41 +0200
Subject: [PATCH 338/414] Step 20.34: Install `angular-sortable-view`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 1ebcbea..ffe3f6d 100644
--- a/package.json
+++ b/package.json
@@ -15,6 +15,7 @@
     "angular-meteor": "^1.3.9",
     "angular-ui-router": "^0.2.18",
     "angular-simple-logger": "^0.1.7",
+    "angular-sortable-view": "0.0.15",
     "angular-utils-pagination": "^0.11.1",
     "gm": "^1.22.0",
     "meteor-node-stubs": "~0.2.0",
-- 
2.7.4


From e26f268fd2cbf756ab8b51e3cc90adeac2ec06ef Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:33:09 +0200
Subject: [PATCH 339/414] Step 20.35: Add as a dependency

---
 imports/ui/components/partyUpload/partyUpload.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
index 100b85a..237ac4d 100644
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -1,6 +1,7 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 import ngFileUpload from 'ng-file-upload';
+import 'angular-sortable-view';
 import 'ng-img-crop/compile/minified/ng-img-crop';
 import 'ng-img-crop/compile/minified/ng-img-crop.css';
 
@@ -78,7 +79,8 @@ const name = 'partyUpload';
 export default angular.module(name, [
   angularMeteor,
   ngFileUpload,
-  'ngImgCrop'
+  'ngImgCrop',
+  'angular-sortable-view'
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From eccb3fc49dd79139f6b1e46408e94493172b51fc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 14:33:31 +0200
Subject: [PATCH 340/414] Step 20.36: Use directives on thumbnails

---
 imports/ui/components/partyUpload/partyUpload.html | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/partyUpload/partyUpload.html b/imports/ui/components/partyUpload/partyUpload.html
index 124bfdb..14a3704 100644
--- a/imports/ui/components/partyUpload/partyUpload.html
+++ b/imports/ui/components/partyUpload/partyUpload.html
@@ -29,9 +29,9 @@
       <img-crop image="partyUpload.cropImgSrc" result-image="partyUpload.myCroppedImage" area-type="square"></img-crop>
     </div>
   </div>
-  <div layout="row" class="images-container-title">
-    <div class="party-image-container" ng-class="{'main-image': $index === 0}" ng-repeat="thumb in partyUpload.thumbs">
-      <img ng-src="{{ thumb.url }}"/>
+  <div layout="row" class="images-container-title" sv-root sv-part="partyUpload.thumbs">
+    <div sv-element class="party-image-container" ng-class="{'main-image': $index === 0}" ng-repeat="thumb in partyUpload.thumbs">
+      <img draggable="false" ng-src="{{ thumb.url }}"/>
     </div>
   </div>
 </div>
-- 
2.7.4


From 7c3bab2827aa1dee875392b03b707cfeeb99f6df Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 15:33:07 +0200
Subject: [PATCH 341/414] Step 20.37: Define two-way data binding `files`

---
 imports/ui/components/partyUpload/partyUpload.js | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
index 237ac4d..400368e 100644
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ b/imports/ui/components/partyUpload/partyUpload.js
@@ -83,6 +83,9 @@ export default angular.module(name, [
   'angular-sortable-view'
 ]).component(name, {
   template,
+  bindings: {
+    files: '=?'
+  },
   controllerAs: name,
   controller: PartyUpload
 });
-- 
2.7.4


From b2dad01f78dec9797714369d938f703d16d6d973 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 15:33:24 +0200
Subject: [PATCH 342/414] Step 20.38: Create view for PartyImage

---
 imports/ui/components/partyImage/partyImage.html | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 imports/ui/components/partyImage/partyImage.html

diff --git a/imports/ui/components/partyImage/partyImage.html b/imports/ui/components/partyImage/partyImage.html
new file mode 100644
index 0000000..719c4a3
--- /dev/null
+++ b/imports/ui/components/partyImage/partyImage.html
@@ -0,0 +1 @@
+<img ng-src="{{partyImage.mainImage.url}}"/>
-- 
2.7.4


From c22bcf71b640b2e1e29b7985d9d445bea81fdf5d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 15:33:39 +0200
Subject: [PATCH 343/414] Step 20.39: Create PartyImage component

---
 imports/ui/components/partyImage/partyImage.js | 37 ++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)
 create mode 100644 imports/ui/components/partyImage/partyImage.js

diff --git a/imports/ui/components/partyImage/partyImage.js b/imports/ui/components/partyImage/partyImage.js
new file mode 100644
index 0000000..5b636b8
--- /dev/null
+++ b/imports/ui/components/partyImage/partyImage.js
@@ -0,0 +1,37 @@
+import angular from 'angular';
+import angularMeteor from 'angular-meteor';
+
+import template from './partyImage.html';
+import { Images } from '../../../api/images';
+
+class PartyImage {
+  constructor($scope, $reactive) {
+    'ngInject';
+    $reactive(this).attach($scope);
+
+    this.helpers({
+      mainImage() {
+        const images = this.getReactively('images', true);
+        if (images) {
+          return Images.findOne({
+            _id: images[0]
+          });
+        }
+      }
+    });
+  }
+}
+
+const name = 'partyImage';
+
+// create a module
+export default angular.module(name, [
+  angularMeteor
+]).component(name, {
+  template,
+  bindings: {
+    images: '<'
+  },
+  controllerAs: name,
+  controller: PartyImage
+});
-- 
2.7.4


From b114aa568cf5fda46f609f21641d6086c26f8f9c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 15:33:58 +0200
Subject: [PATCH 344/414] Step 20.40: Implement PartyImage in PartiesList

---
 imports/ui/components/partiesList/partiesList.html | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
index 12987b3..de5d229 100644
--- a/imports/ui/components/partiesList/partiesList.html
+++ b/imports/ui/components/partiesList/partiesList.html
@@ -25,6 +25,11 @@
             </span>
             <span class="md-subhead">{{party.description}}</span>
           </md-card-title-text>
+          <md-card-title-media ng-if="party.images">
+            <div class="md-media-lg card-media">
+              <party-image images="party.images"></party-image>
+            </div>
+          </md-card-title-media>
         </md-card-title>
         <md-card-content>
           <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
-- 
2.7.4


From 877670c339d461a001c2dade128f7cc75738dda8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Wed, 13 Apr 2016 15:34:24 +0200
Subject: [PATCH 345/414] Step 20.41: Add PartyImage to PartiesList and
 subscribe to `images`

---
 imports/ui/components/partiesList/partiesList.js | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 17996c3..9e90e1f 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -14,6 +14,7 @@ import { name as PartyRemove } from '../partyRemove/partyRemove';
 import { name as PartyCreator } from '../partyCreator/partyCreator';
 import { name as PartyRsvp } from '../partyRsvp/partyRsvp';
 import { name as PartyRsvpsList } from '../partyRsvpsList/partyRsvpsList';
+import { name as PartyImage } from '../partyImage/partyImage';
 
 class PartiesList {
   constructor($scope, $reactive) {
@@ -36,6 +37,7 @@ class PartiesList {
     ]);
 
     this.subscribe('users');
+    this.subscribe('images');
 
     this.helpers({
       parties() {
@@ -81,7 +83,8 @@ export default angular.module(name, [
   PartyRemove,
   PartyCreator,
   PartyRsvp,
-  PartyRsvpsList
+  PartyRsvpsList,
+  PartyImage
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From cd573ac0f635751bb59d5f8e678c247b6660ace8 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:41:02 +0200
Subject: [PATCH 346/414] Step 21.1: Add mobile platform

---
 .meteor/platforms | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/.meteor/platforms b/.meteor/platforms
index efeba1b..0b0ddcc 100644
--- a/.meteor/platforms
+++ b/.meteor/platforms
@@ -1,2 +1,3 @@
-server
+android
 browser
+server
-- 
2.7.4


From 988e46c95b128e506fb313de465855c665394139 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:43:34 +0200
Subject: [PATCH 347/414] Step 21.2: Move login.html to web.html

---
 imports/ui/components/login/web.html | 70 ++++++++++++++++++++++++++++++++++++
 1 file changed, 70 insertions(+)
 create mode 100644 imports/ui/components/login/web.html

diff --git a/imports/ui/components/login/web.html b/imports/ui/components/login/web.html
new file mode 100644
index 0000000..1ac5b6f
--- /dev/null
+++ b/imports/ui/components/login/web.html
@@ -0,0 +1,70 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+  <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+    <md-toolbar class="md-primary md-tall" layout="column" layout-align="end" layout-fill>
+      <div layout="row" class="md-toolbar-tools md-toolbar-tools-bottom">
+        <h3 class="md-display-1">
+          Sign in
+        </h3>
+      </div>
+    </md-toolbar>
+
+    <div layout="column" layout-fill layout-margin layout-padding>
+      <div layout="row" layout-fill layout-margin>
+        <p class="md-body-2">
+          Use existing account</p>
+      </div>
+
+      <div layout="row" layout-fill layout-margin layout-padding layout-wrap>
+        <md-button class="md-raised">
+          <md-icon md-svg-icon="social:ic_google_24px" style="color: #DC4A38;"></md-icon>
+          <span>Google</span>
+        </md-button>
+        <md-button class="md-raised">
+          <md-icon md-svg-icon="social:ic_facebook_24px" style="color: #3F62B4;"></md-icon>
+          <span>Facebook</span>
+        </md-button>
+        <md-button class="md-raised">
+          <md-icon md-svg-icon="social:ic_twitter_24px" style="color: #27AAE2;"></md-icon>
+          <span>Twitter</span>
+        </md-button>
+      </div>
+      <md-divider class="inset"></md-divider>
+
+      <div layout="row" layout-fill layout-margin>
+        <p class="md-body-2">
+          Sign in with your email</p>
+      </div>
+
+      <form name="loginForm" layout="column" layout-fill layout-padding layout-margin>
+        <md-input-container>
+          <label>
+            Email
+          </label>
+          <input type="text" ng-model="login.credentials.email" aria-label="email" required/>
+        </md-input-container>
+        <md-input-container>
+          <label>
+            Password
+          </label>
+          <input type="password" ng-model="login.credentials.password" aria-label="password" required/>
+        </md-input-container>
+        <div layout="row" layout-align="space-between center">
+          <a class="md-button" href="/password">Forgot password?</a>
+          
+          <md-button class="md-raised md-primary" ng-click="login.login()" aria-label="login" ng-disabled="login.loginForm.$invalid()">Sign In
+          </md-button>
+        </div>
+      </form>
+
+      <md-toolbar ng-show="login.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+        <p class="md-body-1">{{ login.error }}</p>
+      </md-toolbar>
+
+      <md-divider></md-divider>
+
+      <div layout="row" layout-align="center">
+        <a class="md-button" href="/register">Need an account?</a>
+      </div>
+    </div>
+  </md-whiteframe>
+</md-content>
-- 
2.7.4


From 153a34663cb11f89c93f1398af2ad20e13dd0612 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:45:56 +0200
Subject: [PATCH 348/414] Step 21.3: Add mobile view

---
 imports/ui/components/login/mobile.html | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)
 create mode 100644 imports/ui/components/login/mobile.html

diff --git a/imports/ui/components/login/mobile.html b/imports/ui/components/login/mobile.html
new file mode 100644
index 0000000..112ba9e
--- /dev/null
+++ b/imports/ui/components/login/mobile.html
@@ -0,0 +1,27 @@
+<md-content layout="row" layout-align="center start" layout-fill layout-margin>
+  <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
+    <!-- header -->
+    <md-toolbar class="md-primary md-tall" layout="column" layout-align="end" layout-fill>
+      <div layout="row" class="md-toolbar-tools md-toolbar-tools-bottom">
+        <h3 class="md-display-1">
+          Login
+        </h3>
+      </div>
+    </md-toolbar>
+
+    <!-- content -->
+    <div layout="column" layout-fill layout-margin layout-padding>
+      <!-- display an error -->
+      <md-toolbar ng-show="login.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
+        <p class="md-body-1">{{ login.error }}</p>
+      </md-toolbar>
+
+      <md-divider></md-divider>
+
+      <!-- other actions -->
+      <div layout="row" layout-align="center">
+        <a class="md-button" href="/password">Forgot password?</a>
+      </div>
+    </div>
+  </md-whiteframe>
+</md-content>
-- 
2.7.4


From f4c936eb3b594e309d373d02ecd9a838f31b82e6 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:47:15 +0200
Subject: [PATCH 349/414] Step 21.4: Move Login class to web.js

---
 imports/ui/components/login/web.js | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)
 create mode 100644 imports/ui/components/login/web.js

diff --git a/imports/ui/components/login/web.js b/imports/ui/components/login/web.js
new file mode 100644
index 0000000..bc7b752
--- /dev/null
+++ b/imports/ui/components/login/web.js
@@ -0,0 +1,30 @@
+import { Meteor } from 'meteor/meteor';
+
+export class Login {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.credentials = {
+      email: '',
+      password: ''
+    };
+
+    this.error = '';
+  }
+
+  login() {
+    Meteor.loginWithPassword(this.credentials.email, this.credentials.password,
+      this.$bindToContext((err) => {
+        if (err) {
+          this.error = err;
+        } else {
+          this.$state.go('parties');
+        }
+      })
+    );
+  }
+}
-- 
2.7.4


From 0b5902e65b037d80d07c33b71d9c2b495dc0c604 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:48:39 +0200
Subject: [PATCH 350/414] Step 21.5: Create controller for mobile

---
 imports/ui/components/login/mobile.js | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 imports/ui/components/login/mobile.js

diff --git a/imports/ui/components/login/mobile.js b/imports/ui/components/login/mobile.js
new file mode 100644
index 0000000..792f38c
--- /dev/null
+++ b/imports/ui/components/login/mobile.js
@@ -0,0 +1 @@
+export class Login {}
-- 
2.7.4


From cf07832e678d6b9e1098323faa38fa5a13b631e0 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:49:48 +0200
Subject: [PATCH 351/414] Step 21.6: Refactor login.js

---
 imports/ui/components/login/login.js | 42 +++++++-----------------------------
 1 file changed, 8 insertions(+), 34 deletions(-)

diff --git a/imports/ui/components/login/login.js b/imports/ui/components/login/login.js
index 4ae9c9e..376fcaf 100644
--- a/imports/ui/components/login/login.js
+++ b/imports/ui/components/login/login.js
@@ -4,40 +4,14 @@ import uiRouter from 'angular-ui-router';
 
 import { Meteor } from 'meteor/meteor';
 
-import template from './login.html';
-
-import { name as Register } from '../register/register';
-
-class Login {
-  constructor($scope, $reactive, $state) {
-    'ngInject';
-
-    this.$state = $state;
-
-    $reactive(this).attach($scope);
-
-    this.credentials = {
-      email: '',
-      password: ''
-    };
-
-    this.error = '';
-  }
-
-  login() {
-    Meteor.loginWithPassword(this.credentials.email, this.credentials.password,
-      this.$bindToContext((err) => {
-        if (err) {
-          this.error = err;
-        } else {
-          this.$state.go('parties');
-        }
-      })
-    );
-  }
-}
+import webTemplate from './web.html';
+import { Login as LoginWeb } from './web';
+import mobileTemplate from './mobile.html';
+import { Login as LoginMobile } from './mobile';
 
 const name = 'login';
+const template = Meteor.isCordova ? mobileTemplate : webTemplate;
+const controller = Meteor.isCordova ? LoginMobile : LoginWeb;
 
 // create a module
 export default angular.module(name, [
@@ -46,8 +20,8 @@ export default angular.module(name, [
 ])
   .component(name, {
     template,
-    controllerAs: name,
-    controller: Login
+    controller,
+    controllerAs: name
   })
   .config(config);
 
-- 
2.7.4


From bab5ca42c00835b4ede44473530023c738ff4320 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:50:03 +0200
Subject: [PATCH 352/414] Step 21.7: Remove login.html

---
 imports/ui/components/login/login.html | 72 ----------------------------------
 imports/ui/components/login/web.html   |  6 +--
 2 files changed, 3 insertions(+), 75 deletions(-)
 delete mode 100644 imports/ui/components/login/login.html

diff --git a/imports/ui/components/login/login.html b/imports/ui/components/login/login.html
deleted file mode 100644
index feb3443..0000000
--- a/imports/ui/components/login/login.html
+++ /dev/null
@@ -1,72 +0,0 @@
-<md-content layout="row" layout-align="center start" layout-fill layout-margin>
-
-  <md-whiteframe layout="column" flex flex-md="50" flex-lg="50" flex-gt-lg="33" class="md-whiteframe-z2" layout-fill>
-
-    <md-toolbar class="md-primary md-tall" layout="column" layout-align="end" layout-fill>
-      <div layout="row" class="md-toolbar-tools md-toolbar-tools-bottom">
-        <h3 class="md-display-1">
-          Sign in
-        </h3>
-      </div>
-    </md-toolbar>
-
-    <div layout="column" layout-fill layout-margin layout-padding>
-      <div layout="row" layout-fill layout-margin>
-        <p class="md-body-2">
-          Use existing account</p>
-      </div>
-      <div layout="row" layout-fill layout-margin layout-padding layout-wrap>
-        <md-button class="md-raised">
-          <i class="icon ion-social-google" style="color: #DC4A38; font-size: 24px;"></i>
-          <span>
-            Google</span>
-        </md-button>
-        <md-button class="md-raised">
-          <i class="icon ion-social-facebook" style="color: #3F62B4; font-size: 24px;"></i>
-          <span>Facebook
-          </span>
-        </md-button>
-        <md-button class="md-raised">
-          <i class="icon ion-social-twitter" style="color: #27AAE2; font-size: 24px;"></i>
-          <span>Twitter
-          </span>
-        </md-button>
-      </div>
-      <md-divider class="inset"></md-divider>
-
-      <div layout="row" layout-fill layout-margin>
-        <p class="md-body-2">
-          Sign in with your email</p>
-      </div>
-
-      <form name="loginForm" layout="column" layout-fill layout-padding layout-margin>
-        <md-input-container>
-          <label>
-            Email
-          </label>
-          <input type="text" ng-model="login.credentials.email" aria-label="email" required/>
-        </md-input-container>
-        <md-input-container>
-          <label>
-            Password
-          </label>
-          <input type="password" ng-model="login.credentials.password" aria-label="password" required/>
-        </md-input-container>
-        <div layout="row" layout-align="space-between center">
-          <a class="md-button" href="/password">Forgot password?</a>
-          <md-button class="md-raised md-primary" ng-click="login.login()" aria-label="login" ng-disabled="login.loginForm.$invalid()">Sign In
-          </md-button>
-        </div>
-      </form>
-      <md-toolbar ng-show="login.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
-        <p class="md-body-1">{{ login.error }}</p>
-      </md-toolbar>
-      <md-divider></md-divider>
-      <div layout="row" layout-align="center">
-        <a class="md-button" href="/register">Need an account?</a>
-      </div>
-
-    </div>
-
-  </md-whiteframe>
-</md-content>
diff --git a/imports/ui/components/login/web.html b/imports/ui/components/login/web.html
index 1ac5b6f..af84461 100644
--- a/imports/ui/components/login/web.html
+++ b/imports/ui/components/login/web.html
@@ -16,15 +16,15 @@
 
       <div layout="row" layout-fill layout-margin layout-padding layout-wrap>
         <md-button class="md-raised">
-          <md-icon md-svg-icon="social:ic_google_24px" style="color: #DC4A38;"></md-icon>
+          <i class="icon ion-social-google" style="color: #DC4A38; font-size: 24px;"></i>
           <span>Google</span>
         </md-button>
         <md-button class="md-raised">
-          <md-icon md-svg-icon="social:ic_facebook_24px" style="color: #3F62B4;"></md-icon>
+          <i class="icon ion-social-facebook" style="color: #3F62B4; font-size: 24px;"></i>
           <span>Facebook</span>
         </md-button>
         <md-button class="md-raised">
-          <md-icon md-svg-icon="social:ic_twitter_24px" style="color: #27AAE2;"></md-icon>
+          <i class="icon ion-social-twitter" style="color: #27AAE2; font-size: 24px;"></i>
           <span>Twitter</span>
         </md-button>
       </div>
-- 
2.7.4


From 148439075d6e670552f24cba1ac6d8aef0bd0200 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:52:54 +0200
Subject: [PATCH 353/414] Step 21.8: Add `okland:accounts-phone`

---
 .meteor/packages | 1 +
 .meteor/versions | 1 +
 2 files changed, 2 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index dab7905..2f0738e 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -32,3 +32,4 @@ planettraining:material-design-icons
 pagebakers:ionicons
 jalik:ufs
 jalik:ufs-gridfs
+mys:accounts-phone
diff --git a/.meteor/versions b/.meteor/versions
index a60ade0..c58233f 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -61,6 +61,7 @@ modules@0.7.6_1
 modules-runtime@0.7.6_1
 mongo@1.1.12_5
 mongo-id@1.0.5
+mys:accounts-phone@0.0.21
 npm-bcrypt@0.9.1_1
 npm-mongo@2.2.10_1
 oauth@1.1.11
-- 
2.7.4


From 601e3689abbc1c7fcc138b07883bfc78d296dc5a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:56:24 +0200
Subject: [PATCH 354/414] Step 21.9: Add phone verification method

---
 imports/ui/components/login/mobile.js | 28 +++++++++++++++++++++++++++-
 1 file changed, 27 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/login/mobile.js b/imports/ui/components/login/mobile.js
index 792f38c..c201eb2 100644
--- a/imports/ui/components/login/mobile.js
+++ b/imports/ui/components/login/mobile.js
@@ -1 +1,27 @@
-export class Login {}
+import { Accounts } from 'meteor/accounts-base';
+
+export class Login {
+  constructor($scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+
+    this.isStepTwo = false;
+    this.phoneNumber = '';
+    this.verificationCode = '';
+    this.error = '';
+  }
+
+  verifyPhone() {
+    Accounts.requestPhoneVerification(this.phoneNumber, this.$bindToContext((err) => {
+      if (err) {
+        // display also reason of Meteor.Error
+        this.error = err.reason || err;
+      } else {
+        this.error = '';
+        // move to code verification
+        this.isStepTwo = true;
+      }
+    }));
+  }
+}
-- 
2.7.4


From 0d9004dc28c761e9609eeb3e01fe0b4fd4e65fcd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 20:57:40 +0200
Subject: [PATCH 355/414] Step 21.10: Add phone verification form

---
 imports/ui/components/login/mobile.html | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/login/mobile.html b/imports/ui/components/login/mobile.html
index 112ba9e..0b889a7 100644
--- a/imports/ui/components/login/mobile.html
+++ b/imports/ui/components/login/mobile.html
@@ -4,13 +4,22 @@
     <md-toolbar class="md-primary md-tall" layout="column" layout-align="end" layout-fill>
       <div layout="row" class="md-toolbar-tools md-toolbar-tools-bottom">
         <h3 class="md-display-1">
-          Login
+          Login with SMS
         </h3>
       </div>
     </md-toolbar>
 
     <!-- content -->
     <div layout="column" layout-fill layout-margin layout-padding>
+      <!-- step 1: phone verification -->
+      <form ng-show="!login.isStepTwo" layout="column" layout-fill layout-padding layout-margin>
+        <md-input-container>
+          <input type="text" ng-model="login.phoneNumber" placeholder="phone"/>
+        </md-input-container>
+        <md-button class="md-raised md-primary" ng-click="login.verifyPhone()" aria-label="login" ng-disabled="!login.phoneNumber">Send SMS
+        </md-button>
+      </form>
+      
       <!-- display an error -->
       <md-toolbar ng-show="login.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
         <p class="md-body-1">{{ login.error }}</p>
-- 
2.7.4


From 911282e91df91e497c9a1b1af4fc80bfb0b707b2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 21:00:05 +0200
Subject: [PATCH 356/414] Step 21.11: Add code verification method

---
 imports/ui/components/login/mobile.js | 15 ++++++++++++++-
 1 file changed, 14 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/login/mobile.js b/imports/ui/components/login/mobile.js
index c201eb2..798d563 100644
--- a/imports/ui/components/login/mobile.js
+++ b/imports/ui/components/login/mobile.js
@@ -1,9 +1,11 @@
 import { Accounts } from 'meteor/accounts-base';
 
 export class Login {
-  constructor($scope, $reactive) {
+  constructor($scope, $reactive, $state) {
     'ngInject';
 
+    this.$state = $state;
+
     $reactive(this).attach($scope);
 
     this.isStepTwo = false;
@@ -24,4 +26,15 @@ export class Login {
       }
     }));
   }
+
+  verifyCode() {
+    Accounts.verifyPhone(this.phoneNumber, this.verificationCode, this.$bindToContext((err) => {
+      if (err) {
+        this.error = err.reason || err;
+      } else {
+        // redirect to parties list
+        this.$state.go('parties');
+      }
+    }));
+  }
 }
-- 
2.7.4


From c100afe80066029d7f09987aabd5749f9fb53ccc Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 14 Apr 2016 21:01:13 +0200
Subject: [PATCH 357/414] Step 21.12: Add code verification form

---
 imports/ui/components/login/mobile.html | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/login/mobile.html b/imports/ui/components/login/mobile.html
index 0b889a7..e93c1d5 100644
--- a/imports/ui/components/login/mobile.html
+++ b/imports/ui/components/login/mobile.html
@@ -19,7 +19,15 @@
         <md-button class="md-raised md-primary" ng-click="login.verifyPhone()" aria-label="login" ng-disabled="!login.phoneNumber">Send SMS
         </md-button>
       </form>
-      
+      <!-- step 2: code verification -->
+      <form ng-show="login.isStepTwo" layout="column" layout-fill layout-padding layout-margin>
+        <md-input-container>
+          <input type="text" ng-model="login.verificationCode" placeholder="code"/>
+        </md-input-container>
+        <md-button class="md-raised md-primary" ng-click="login.verifyCode()" aria-label="login" ng-disabled="!login.verificationCode">Verify Code
+        </md-button>
+      </form>
+
       <!-- display an error -->
       <md-toolbar ng-show="login.error" class="md-warn" layout="row" layout-fill layout-padding layout-margin>
         <p class="md-body-1">{{ login.error }}</p>
-- 
2.7.4


From 008db7ebca0e6785dd931ec2690f0499b1f30e17 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 10:58:52 +0200
Subject: [PATCH 358/414] Step 22.1: Install `ionic-sdk`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index ffe3f6d..4c15c16 100644
--- a/package.json
+++ b/package.json
@@ -18,6 +18,7 @@
     "angular-sortable-view": "0.0.15",
     "angular-utils-pagination": "^0.11.1",
     "gm": "^1.22.0",
+    "ionic-sdk": "^1.2.4",
     "meteor-node-stubs": "~0.2.0",
     "ng-file-upload": "^12.0.4",
     "ng-img-crop": "^0.2.0",
-- 
2.7.4


From 5a8d2f7250985d7b895945fe9527c8a308957791 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 10:59:31 +0200
Subject: [PATCH 359/414] Step 22.2: Install `angular-sanitize`

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 4c15c16..056163e 100644
--- a/package.json
+++ b/package.json
@@ -14,6 +14,7 @@
     "angular-messages": "^1.5.3",
     "angular-meteor": "^1.3.9",
     "angular-ui-router": "^0.2.18",
+    "angular-sanitize": "^1.5.5",
     "angular-simple-logger": "^0.1.7",
     "angular-sortable-view": "0.0.15",
     "angular-utils-pagination": "^0.11.1",
-- 
2.7.4


From 32aa6a5624a71db6b77181fdc086a9b3931c9fae Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 11:08:38 +0200
Subject: [PATCH 360/414] Step 22.3: ngSanitize as a dependency

---
 imports/ui/components/socially/socially.js | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index 21940eb..ada6751 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -1,6 +1,7 @@
 import angular from 'angular';
 import angularMeteor from 'angular-meteor';
 import ngMaterial from 'angular-material';
+import ngSanitize from 'angular-sanitize';
 import uiRouter from 'angular-ui-router';
 
 import template from './socially.html';
@@ -17,6 +18,7 @@ const name = 'socially';
 export default angular.module(name, [
   angularMeteor,
   ngMaterial,
+  ngSanitize,
   uiRouter,
   PartiesList,
   PartyDetails,
-- 
2.7.4


From 8b6463fa747b6da7336fe05a01e045a26e808822 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 11:48:44 +0200
Subject: [PATCH 361/414] Step 22.4: Import ionic and add as a dependency

---
 imports/ui/components/socially/socially.js | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index ada6751..f72bc21 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -3,6 +3,8 @@ import angularMeteor from 'angular-meteor';
 import ngMaterial from 'angular-material';
 import ngSanitize from 'angular-sanitize';
 import uiRouter from 'angular-ui-router';
+import 'ionic-sdk/release/js/ionic';
+import 'ionic-sdk/release/js/ionic-angular';
 
 import template from './socially.html';
 import { name as PartiesList } from '../partiesList/partiesList';
@@ -24,7 +26,8 @@ export default angular.module(name, [
   PartyDetails,
   Navigation,
   Auth,
-  'accounts.ui'
+  'accounts.ui',
+  'ionic'
 ]).component(name, {
   template,
   controllerAs: name,
-- 
2.7.4


From bce16f870369041bc0aedf36823827395d4fa186 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 11:49:08 +0200
Subject: [PATCH 362/414] Step 22.5: Import ionic styles

---
 imports/ui/components/socially/socially.js | 1 +
 1 file changed, 1 insertion(+)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index f72bc21..ac7ac39 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -5,6 +5,7 @@ import ngSanitize from 'angular-sanitize';
 import uiRouter from 'angular-ui-router';
 import 'ionic-sdk/release/js/ionic';
 import 'ionic-sdk/release/js/ionic-angular';
+import 'ionic-sdk/release/css/ionic.css';
 
 import template from './socially.html';
 import { name as PartiesList } from '../partiesList/partiesList';
-- 
2.7.4


From 9c1ca07962aa001c0b7ece967cb2a0cf7a30c39a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 11:50:26 +0200
Subject: [PATCH 363/414] Step 22.6: Create view of Socially for web

---
 imports/ui/components/socially/web.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/socially/web.html

diff --git a/imports/ui/components/socially/web.html b/imports/ui/components/socially/web.html
new file mode 100644
index 0000000..7fdb2de
--- /dev/null
+++ b/imports/ui/components/socially/web.html
@@ -0,0 +1,3 @@
+<navigation></navigation>
+
+<div ui-view=""></div>
-- 
2.7.4


From 9118b9f447f5364eaf515106d028a60cae670c84 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 11:51:02 +0200
Subject: [PATCH 364/414] Step 22.7: Create mobile view

---
 imports/ui/components/socially/mobile.html | 3 +++
 1 file changed, 3 insertions(+)
 create mode 100644 imports/ui/components/socially/mobile.html

diff --git a/imports/ui/components/socially/mobile.html b/imports/ui/components/socially/mobile.html
new file mode 100644
index 0000000..b0de4a9
--- /dev/null
+++ b/imports/ui/components/socially/mobile.html
@@ -0,0 +1,3 @@
+<ion-nav-bar class="bar-positive" align-title="center">
+</ion-nav-bar>
+<ion-nav-view></ion-nav-view>
-- 
2.7.4


From 65f69560473445d4d5d8dc4ed4a7544a435eae90 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 11:53:48 +0200
Subject: [PATCH 365/414] Step 22.8: Implement web and mobile views

---
 imports/ui/components/socially/socially.js | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
index ac7ac39..ff140a5 100644
--- a/imports/ui/components/socially/socially.js
+++ b/imports/ui/components/socially/socially.js
@@ -7,7 +7,10 @@ import 'ionic-sdk/release/js/ionic';
 import 'ionic-sdk/release/js/ionic-angular';
 import 'ionic-sdk/release/css/ionic.css';
 
-import template from './socially.html';
+import { Meteor } from 'meteor/meteor';
+
+import webTemplate from './web.html';
+import mobileTemplate from './mobile.html';
 import { name as PartiesList } from '../partiesList/partiesList';
 import { name as PartyDetails } from '../partyDetails/partyDetails';
 import { name as Navigation } from '../navigation/navigation';
@@ -16,6 +19,7 @@ import { name as Auth } from '../auth/auth';
 class Socially {}
 
 const name = 'socially';
+const template = Meteor.isCordova ? mobileTemplate : webTemplate;
 
 // create a module
 export default angular.module(name, [
-- 
2.7.4


From 155a5b85d148687b86ba4bfbffea51b5a4bcb87d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:17:24 +0200
Subject: [PATCH 366/414] Step 22.9: Remove old view

---
 imports/ui/components/socially/socially.html | 3 ---
 1 file changed, 3 deletions(-)
 delete mode 100644 imports/ui/components/socially/socially.html

diff --git a/imports/ui/components/socially/socially.html b/imports/ui/components/socially/socially.html
deleted file mode 100644
index 7fdb2de..0000000
--- a/imports/ui/components/socially/socially.html
+++ /dev/null
@@ -1,3 +0,0 @@
-<navigation></navigation>
-
-<div ui-view=""></div>
-- 
2.7.4


From 6db0159e7be957928614f8307d64b897f3373319 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:18:14 +0200
Subject: [PATCH 367/414] Step 22.10: Add title

---
 imports/ui/components/socially/mobile.html | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/imports/ui/components/socially/mobile.html b/imports/ui/components/socially/mobile.html
index b0de4a9..7751a6f 100644
--- a/imports/ui/components/socially/mobile.html
+++ b/imports/ui/components/socially/mobile.html
@@ -1,3 +1,6 @@
 <ion-nav-bar class="bar-positive" align-title="center">
+  <ion-nav-title>
+    Socially
+  </ion-nav-title>
 </ion-nav-bar>
 <ion-nav-view></ion-nav-view>
-- 
2.7.4


From 153ec64cf123fa5f826281e2e881f5f354968750 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:19:33 +0200
Subject: [PATCH 368/414] Step 22.11: Create web view of PartiesList

---
 imports/ui/components/partiesList/web.html | 57 ++++++++++++++++++++++++++++++
 1 file changed, 57 insertions(+)
 create mode 100644 imports/ui/components/partiesList/web.html

diff --git a/imports/ui/components/partiesList/web.html b/imports/ui/components/partiesList/web.html
new file mode 100644
index 0000000..b2234e9
--- /dev/null
+++ b/imports/ui/components/partiesList/web.html
@@ -0,0 +1,57 @@
+<div layout="column" layout-padding>
+  <party-add-button ng-show="partiesList.isLoggedIn"></party-add-button>
+
+  <div>
+    <h2 class="md-display-1">List of the parties:</h2>
+  </div>
+
+  <div layout="row" layout-padding>
+    <md-input-container>
+      <label>Search</label>
+      <input ng-model="partiesList.searchText">
+    </md-input-container>
+
+    <parties-sort on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
+  </div>
+
+  <div layout="column" layout-gt-sm="row">
+    <div class="list list-web" flex="50">
+      <md-card dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
+        <md-card-title>
+          <md-card-title-text>
+            <span class="md-headline" ui-sref="partyDetails({ partyId: party._id })">
+              {{party.name}}
+              <party-remove party="party"></party-remove>
+            </span>
+            <span class="md-subhead">{{party.description}}</span>
+          </md-card-title-text>
+          <md-card-title-media ng-if="party.images">
+            <div class="md-media-lg card-media">
+              <party-image images="party.images"></party-image>
+            </div>
+          </md-card-title-media>
+        </md-card-title>
+        <md-card-content>
+          <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
+
+          <party-unanswered party="party" ng-if="!party.public"></party-unanswered>
+          <div ng-if="party.public">
+            Everyone is invited
+          </div>
+
+          <party-creator party="party"></party-creator>
+        </md-card-content>
+        <md-card-actions>
+          <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
+          <div ng-hide="partiesList.isLoggedIn">
+            <i>Sign in to RSVP for this party.</i>
+          </div>
+        </md-card-actions>
+      </md-card>
+      <dir-pagination-controls on-page-change="partiesList.pageChanged(newPageNumber)"></dir-pagination-controls>
+    </div>
+    <div flex="50">
+      <parties-map parties="partiesList.parties"></parties-map>
+    </div>
+  </div>
+</div>
-- 
2.7.4


From e1da861dc1915c48f82485323d7d98b82e574b80 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:20:02 +0200
Subject: [PATCH 369/414] Step 22.12: Remove old view

---
 imports/ui/components/partiesList/partiesList.html | 57 ----------------------
 1 file changed, 57 deletions(-)
 delete mode 100644 imports/ui/components/partiesList/partiesList.html

diff --git a/imports/ui/components/partiesList/partiesList.html b/imports/ui/components/partiesList/partiesList.html
deleted file mode 100644
index de5d229..0000000
--- a/imports/ui/components/partiesList/partiesList.html
+++ /dev/null
@@ -1,57 +0,0 @@
-<div layout="column" layout-padding>
-  <party-add-button ng-show="partiesList.isLoggedIn"></party-add-button>
-
-  <div flex>
-    <h2 class="md-display-1">List of the parties:</h2>
-  </div>
-
-  <div flex layout="row" layout-padding>
-    <md-input-container>
-      <label>Search</label>
-      <input ng-model="partiesList.searchText">
-    </md-input-container>
-
-    <parties-sort on-change="partiesList.sortChanged(sort)" property="name" order="1"></parties-sort>
-  </div>
-
-  <div layout="column" layout-gt-sm="row">
-    <div flex="50">
-      <md-card dir-paginate="party in partiesList.parties | itemsPerPage: partiesList.perPage" total-items="partiesList.partiesCount">
-        <md-card-title>
-          <md-card-title-text>
-            <span class="md-headline" ui-sref="partyDetails({ partyId: party._id })">
-              {{party.name}}
-              <party-remove party="party"></party-remove>
-            </span>
-            <span class="md-subhead">{{party.description}}</span>
-          </md-card-title-text>
-          <md-card-title-media ng-if="party.images">
-            <div class="md-media-lg card-media">
-              <party-image images="party.images"></party-image>
-            </div>
-          </md-card-title-media>
-        </md-card-title>
-        <md-card-content>
-          <party-rsvps-list rsvps="party.rsvps"></party-rsvps-list>
-
-          <party-unanswered party="party" ng-if="!party.public"></party-unanswered>
-          <div ng-if="party.public">
-            Everyone is invited
-          </div>
-
-          <party-creator party="party"></party-creator>
-        </md-card-content>
-        <md-card-actions>
-          <party-rsvp party="party" ng-show="partiesList.isLoggedIn"></party-rsvp>
-          <div ng-hide="partiesList.isLoggedIn">
-            <i>Sign in to RSVP for this party.</i>
-          </div>
-        </md-card-actions>
-      </md-card>
-      <dir-pagination-controls on-page-change="partiesList.pageChanged(newPageNumber)"></dir-pagination-controls>
-    </div>
-    <div flex="50">
-      <parties-map parties="partiesList.parties"></parties-map>
-    </div>
-  </div>
-</div>
-- 
2.7.4


From bbdf5e936600ef7152db7b544bf3475ce408d4d5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:20:56 +0200
Subject: [PATCH 370/414] Step 22.13: Create mobile view

---
 imports/ui/components/partiesList/mobile.html | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)
 create mode 100644 imports/ui/components/partiesList/mobile.html

diff --git a/imports/ui/components/partiesList/mobile.html b/imports/ui/components/partiesList/mobile.html
new file mode 100644
index 0000000..2fcaafd
--- /dev/null
+++ b/imports/ui/components/partiesList/mobile.html
@@ -0,0 +1,22 @@
+<ion-view hide-back-button="true">
+  <ion-content padding="true" class="has-header">
+    <div class="list list-mobile">
+      <div class="card" ng-repeat="party in partiesList.parties">
+        <div class="item">
+          <h2>
+            {{party.name}}
+          </h2>
+          <p>
+            {{party.description}}
+          </p>
+        </div>
+
+        <div class="item item-image">
+          <party-image images="party.images"></party-image>
+        </div>
+
+        <party-rsvps-list class="item" rsvps="party.rsvps"></party-rsvps-list>
+      </div>
+    </div>
+  </ion-content>
+</ion-view>
-- 
2.7.4


From 424ceb7dd80e5cf5f5adafb3882694d5368684b3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:21:54 +0200
Subject: [PATCH 371/414] Step 22.14: Implement new views

---
 imports/ui/components/partiesList/partiesList.js | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
index 9e90e1f..df916d9 100644
--- a/imports/ui/components/partiesList/partiesList.js
+++ b/imports/ui/components/partiesList/partiesList.js
@@ -4,8 +4,10 @@ import uiRouter from 'angular-ui-router';
 import utilsPagination from 'angular-utils-pagination';
 
 import { Counts } from 'meteor/tmeasday:publish-counts';
+import { Meteor } from 'meteor/meteor';
 
-import template from './partiesList.html';
+import webTemplate from './web.html';
+import mobileTemplate from './mobile.html';
 import { Parties } from '../../../api/parties';
 import { name as PartiesSort } from '../partiesSort/partiesSort';
 import { name as PartiesMap } from '../partiesMap/partiesMap';
@@ -71,6 +73,7 @@ class PartiesList {
 }
 
 const name = 'partiesList';
+const template = Meteor.isCordova ? mobileTemplate : webTemplate;
 
 // create a module
 export default angular.module(name, [
-- 
2.7.4


From 6302b4ef5ddf98327e8e24116ec46dace33c3bf3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:22:45 +0200
Subject: [PATCH 372/414] Step 22.15: Fix layout to match both mobile and web

---
 imports/ui/components/partiesList/partiesList.less | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/imports/ui/components/partiesList/partiesList.less b/imports/ui/components/partiesList/partiesList.less
index b0bc5dc..14df29c 100644
--- a/imports/ui/components/partiesList/partiesList.less
+++ b/imports/ui/components/partiesList/partiesList.less
@@ -1,7 +1,20 @@
 parties-list {
+  > div:first-child {
+    height: calc(~"100vh - 64px");
+  }
+
   [ui-sref] {
     cursor: pointer;
   }
+
+  .list-web {
+    overflow-y: visible;
+    overflow-x: hidden;
+  }
+
+  .list-mobile > .card:first-child {
+    margin-top: 0;
+  }
 }
 
 @import "../partiesMap/partiesMap.less";
-- 
2.7.4


From 5f18bfbf8b6917655e995e32331914054816788d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:25:39 +0200
Subject: [PATCH 373/414] Step 22.16: Create DisplayImageFilter

---
 imports/ui/filters/displayImageFilter.js | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)
 create mode 100644 imports/ui/filters/displayImageFilter.js

diff --git a/imports/ui/filters/displayImageFilter.js b/imports/ui/filters/displayImageFilter.js
new file mode 100644
index 0000000..aa2dfda
--- /dev/null
+++ b/imports/ui/filters/displayImageFilter.js
@@ -0,0 +1,26 @@
+import angular from 'angular';
+
+import { Meteor } from 'meteor/meteor';
+
+const name = 'displayImageFilter';
+
+function DisplayImageFilter(image) {
+  if (!image) {
+    return image;
+  }
+
+  // leave it as it is for the web view
+  if (!Meteor.isCordova) {
+    return image.url;
+  }
+
+  // create new path of an image
+  const path = `ufs/${image.store}/${image._id}/${image.name}`;
+  return Meteor.absoluteUrl(path);
+}
+
+// create a module
+export default angular.module(name, [])
+  .filter(name, () => {
+    return DisplayImageFilter;
+  });
-- 
2.7.4


From a604cfab28f912c30fd97d566c138c74579a1175 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:26:55 +0200
Subject: [PATCH 374/414] Step 22.17: Add new filter to PartyImage

---
 imports/ui/components/partyImage/partyImage.js | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyImage/partyImage.js b/imports/ui/components/partyImage/partyImage.js
index 5b636b8..64384c0 100644
--- a/imports/ui/components/partyImage/partyImage.js
+++ b/imports/ui/components/partyImage/partyImage.js
@@ -3,6 +3,7 @@ import angularMeteor from 'angular-meteor';
 
 import template from './partyImage.html';
 import { Images } from '../../../api/images';
+import { name as DisplayImageFilter } from '../../filters/displayImageFilter';
 
 class PartyImage {
   constructor($scope, $reactive) {
@@ -26,7 +27,8 @@ const name = 'partyImage';
 
 // create a module
 export default angular.module(name, [
-  angularMeteor
+  angularMeteor,
+  DisplayImageFilter
 ]).component(name, {
   template,
   bindings: {
-- 
2.7.4


From 690c9f2a4a1dfe0be285c013efe8a8e413ee4b33 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 25 Apr 2016 15:27:28 +0200
Subject: [PATCH 375/414] Step 22.18: Implement DisplayImageFilter

---
 imports/ui/components/partyImage/partyImage.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyImage/partyImage.html b/imports/ui/components/partyImage/partyImage.html
index 719c4a3..04693e3 100644
--- a/imports/ui/components/partyImage/partyImage.html
+++ b/imports/ui/components/partyImage/partyImage.html
@@ -1 +1 @@
-<img ng-src="{{partyImage.mainImage.url}}"/>
+<img ng-src="{{partyImage.mainImage | displayImageFilter}}"/>
-- 
2.7.4


From 192ba9f6e8f8c967cda42d7ff68521741687206c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 17:43:49 +0200
Subject: [PATCH 376/414] Step 23.1: Remove pbastowski:angular-babel

---
 .meteor/packages | 1 -
 .meteor/versions | 1 -
 2 files changed, 2 deletions(-)

diff --git a/.meteor/packages b/.meteor/packages
index 2f0738e..e74e33e 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -15,7 +15,6 @@ standard-minifier-css   # CSS minifier run for production mode
 standard-minifier-js    # JS minifier run for production mode
 es5-shim                # ECMAScript 5 compatibility for older browsers.
 
-pbastowski:angular-babel
 urigo:static-templates
 sanjo:jasmine
 velocity:html-reporter
diff --git a/.meteor/versions b/.meteor/versions
index c58233f..4a91d22 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -70,7 +70,6 @@ oauth2@1.1.10
 observe-sequence@1.0.13
 ordered-dict@1.0.8
 pagebakers:ionicons@2.0.1_1
-pbastowski:angular-babel@1.3.6
 planettraining:material-design-icons@2.2.3
 promise@0.8.7
 random@1.0.10
-- 
2.7.4


From e3c41cfc3555d26e740f475534b5334f35f1b371 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 17:44:49 +0200
Subject: [PATCH 377/414] Step 23.2: Add mys:typescript-ng-annotate

---
 .meteor/packages | 1 +
 .meteor/versions | 3 +++
 2 files changed, 4 insertions(+)

diff --git a/.meteor/packages b/.meteor/packages
index e74e33e..ca3dfbd 100644
--- a/.meteor/packages
+++ b/.meteor/packages
@@ -32,3 +32,4 @@ pagebakers:ionicons
 jalik:ufs
 jalik:ufs-gridfs
 mys:accounts-phone
+mys:typescript-ng-annotate
diff --git a/.meteor/versions b/.meteor/versions
index 4a91d22..9877888 100644
--- a/.meteor/versions
+++ b/.meteor/versions
@@ -10,6 +10,8 @@ amplify@1.0.0
 autoupdate@1.2.11
 babel-compiler@6.9.1_1
 babel-runtime@0.1.11_1
+barbatus:typescript-compiler@0.7.1_1
+barbatus:typescript-runtime@0.1.2
 base64@1.0.9
 binary-heap@1.0.9
 blaze@2.1.9
@@ -62,6 +64,7 @@ modules-runtime@0.7.6_1
 mongo@1.1.12_5
 mongo-id@1.0.5
 mys:accounts-phone@0.0.21
+mys:typescript-ng-annotate@0.0.2
 npm-bcrypt@0.9.1_1
 npm-mongo@2.2.10_1
 oauth@1.1.11
-- 
2.7.4


From 8de896fa0c94ddb14ae56373ca89127b7e63d629 Mon Sep 17 00:00:00 2001
From: DAB0mB <emanor6@gmail.com>
Date: Mon, 24 Oct 2016 11:24:14 -0200
Subject: [PATCH 378/414] Step 23.3: Add typings configuration files

---
 typings.d.ts                            |    4 +
 typings.json                            |   11 +
 typings/globals/meteor/index.d.ts       | 2004 +++++++++++++++++++++++
 typings/globals/meteor/typings.json     |   15 +
 typings/globals/node/index.d.ts         | 2626 +++++++++++++++++++++++++++++++
 typings/globals/node/typings.json       |   13 +
 typings/index.d.ts                      |    3 +
 typings/modules/chai-spies/index.d.ts   |  194 +++
 typings/modules/chai-spies/typings.json |   29 +
 9 files changed, 4899 insertions(+)
 create mode 100644 typings.d.ts
 create mode 100644 typings.json
 create mode 100644 typings/globals/meteor/index.d.ts
 create mode 100644 typings/globals/meteor/typings.json
 create mode 100644 typings/globals/node/index.d.ts
 create mode 100644 typings/globals/node/typings.json
 create mode 100644 typings/index.d.ts
 create mode 100644 typings/modules/chai-spies/index.d.ts
 create mode 100644 typings/modules/chai-spies/typings.json

diff --git a/typings.d.ts b/typings.d.ts
new file mode 100644
index 0000000..1684801
--- /dev/null
+++ b/typings.d.ts
@@ -0,0 +1,4 @@
+declare module '*.html' {
+  const template: string;
+  export default template;
+}
\ No newline at end of file
diff --git a/typings.json b/typings.json
new file mode 100644
index 0000000..4488a00
--- /dev/null
+++ b/typings.json
@@ -0,0 +1,11 @@
+{
+  "name": "angular2-meteor-base",
+  "version": false,
+  "dependencies": {
+    "chai-spies": "registry:npm/chai-spies#0.7.1+20160614064916"
+  },
+  "globalDependencies": {
+    "meteor": "github:meteor-typings/meteor/1.3#955b89a4e2af892d1736bc570b490a97e860d5b7",
+    "node": "registry:env/node#6.0.0+20161019193037"
+  }
+}
diff --git a/typings/globals/meteor/index.d.ts b/typings/globals/meteor/index.d.ts
new file mode 100644
index 0000000..df26964
--- /dev/null
+++ b/typings/globals/meteor/index.d.ts
@@ -0,0 +1,2004 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/meteor-typings/meteor/955b89a4e2af892d1736bc570b490a97e860d5b7/1.3/header.d.ts
+
+
+// Generated by typings
+// Source: https://raw.githubusercontent.com/meteor-typings/meteor/955b89a4e2af892d1736bc570b490a97e860d5b7/1.3/main.d.ts
+declare module Accounts {
+  function user(): Meteor.User;
+
+  function userId(): string;
+
+  function createUser(options: {
+    username ? : string;
+    email ? : string;
+    password ? : string;
+    profile ? : Object;
+  }, callback ? : Function): string;
+
+  function config(options: {
+    sendVerificationEmail ? : boolean;
+    forbidClientAccountCreation ? : boolean;
+    restrictCreationByEmailDomain ? : string | Function;
+    loginExpirationInDays ? : number;
+    oauthSecretKey ? : string;
+  }): void;
+
+  function onLogin(func: Function): {
+    stop: () => void
+  };
+
+  function onLoginFailure(func: Function): {
+    stop: () => void
+  };
+
+  function loginServicesConfigured(): boolean;
+
+  function onPageLoadLogin(func: Function): void;
+}
+
+declare module "meteor/accounts-base" {
+  /// <reference path="meteor.d.ts" />
+
+  module Accounts {
+    function user(): Meteor.User;
+
+    function userId(): string;
+
+    function createUser(options: {
+      username ? : string;
+      email ? : string;
+      password ? : string;
+      profile ? : Object;
+    }, callback ? : Function): string;
+
+    function config(options: {
+      sendVerificationEmail ? : boolean;
+      forbidClientAccountCreation ? : boolean;
+      restrictCreationByEmailDomain ? : string | Function;
+      loginExpirationInDays ? : number;
+      oauthSecretKey ? : string;
+    }): void;
+
+    function onLogin(func: Function): {
+      stop: () => void
+    };
+
+    function onLoginFailure(func: Function): {
+      stop: () => void
+    };
+
+    function loginServicesConfigured(): boolean;
+
+    function onPageLoadLogin(func: Function): void;
+  }
+}
+declare module Accounts {
+  function changePassword(oldPassword: string, newPassword: string, callback ? : Function): void;
+
+  function forgotPassword(options: {
+    email ? : string;
+  }, callback ? : Function): void;
+
+  function resetPassword(token: string, newPassword: string, callback ? : Function): void;
+
+  function verifyEmail(token: string, callback ? : Function): void;
+
+  function onEmailVerificationLink(callback: Function): void;
+
+  function onEnrollmentLink(callback: Function): void;
+
+  function onResetPasswordLink(callback: Function): void;
+
+  function loggingIn(): boolean;
+
+  function logout(callback ? : Function): void;
+
+  function logoutOtherClients(callback ? : Function): void;
+
+  var ui: {
+    config(options: {
+      requestPermissions ? : Object;
+      requestOfflineToken ? : Object;
+      forceApprovalPrompt ? : Object;
+      passwordSignupFields ? : string;
+    }): void;
+  };
+}
+
+declare module "meteor/accounts-base" {
+  module Accounts {
+    function changePassword(oldPassword: string, newPassword: string, callback ? : Function): void;
+
+    function forgotPassword(options: {
+      email ? : string;
+    }, callback ? : Function): void;
+
+    function resetPassword(token: string, newPassword: string, callback ? : Function): void;
+
+    function verifyEmail(token: string, callback ? : Function): void;
+
+    function onEmailVerificationLink(callback: Function): void;
+
+    function onEnrollmentLink(callback: Function): void;
+
+    function onResetPasswordLink(callback: Function): void;
+
+    function loggingIn(): boolean;
+
+    function logout(callback ? : Function): void;
+
+    function logoutOtherClients(callback ? : Function): void;
+
+    var ui: {
+      config(options: {
+        requestPermissions ? : Object;
+        requestOfflineToken ? : Object;
+        forceApprovalPrompt ? : Object;
+        passwordSignupFields ? : string;
+      }): void;
+    };
+  }
+}
+
+interface EmailFields {
+  from ? : () => string;
+  subject ? : (user: Meteor.User) => string;
+  text ? : (user: Meteor.User, url: string) => string;
+  html ? : (user: Meteor.User, url: string) => string;
+}
+
+interface Header {
+  [id: string]: string;
+}
+
+interface EmailTemplates {
+  from: string;
+  siteName: string;
+  headers ? : Header;
+  resetPassword: EmailFields;
+  enrollAccount: EmailFields;
+  verifyEmail: EmailFields;
+}
+
+declare module Accounts {
+  var emailTemplates: EmailTemplates;
+
+  function addEmail(userId: string, newEmail: string, verified ? : boolean): void;
+
+  function removeEmail(userId: string, email: string): void;
+
+  function onCreateUser(func: Function): void;
+
+  function findUserByEmail(email: string): Object;
+
+  function findUserByUsername(username: string): Object;
+
+  function sendEnrollmentEmail(userId: string, email ? : string): void;
+
+  function sendResetPasswordEmail(userId: string, email ? : string): void;
+
+  function sendVerificationEmail(userId: string, email ? : string): void;
+
+  function setUsername(userId: string, newUsername: string): void;
+
+  function setPassword(userId: string, newPassword: string, options ? : {
+    logout ? : Object;
+  }): void;
+
+  function validateNewUser(func: Function): boolean;
+
+  function validateLoginAttempt(func: Function): {
+    stop: () => void
+  };
+
+  interface IValidateLoginAttemptCbOpts {
+    type: string;
+    allowed: boolean;
+    error: Meteor.Error;
+    user: Meteor.User;
+    connection: Meteor.Connection;
+    methodName: string;
+    methodArguments: any[];
+  }
+}
+
+declare module "meteor/accounts-base" {
+  /// <reference path="meteor.d.ts" />
+  /// <reference path="meteor_main.d.ts" />
+
+  interface EmailFields {
+    from ? : () => string;
+    subject ? : (user: Meteor.User) => string;
+    text ? : (user: Meteor.User, url: string) => string;
+    html ? : (user: Meteor.User, url: string) => string;
+  }
+
+  interface Header {
+    [id: string]: string;
+  }
+
+  interface EmailTemplates {
+    from: string;
+    siteName: string;
+    headers ? : Header;
+    resetPassword: EmailFields;
+    enrollAccount: EmailFields;
+    verifyEmail: EmailFields;
+  }
+
+  module Accounts {
+    var emailTemplates: EmailTemplates;
+
+    function addEmail(userId: string, newEmail: string, verified ? : boolean): void;
+
+    function removeEmail(userId: string, email: string): void;
+
+    function onCreateUser(func: Function): void;
+
+    function findUserByEmail(email: string): Object;
+
+    function findUserByUsername(username: string): Object;
+
+    function sendEnrollmentEmail(userId: string, email ? : string): void;
+
+    function sendResetPasswordEmail(userId: string, email ? : string): void;
+
+    function sendVerificationEmail(userId: string, email ? : string): void;
+
+    function setUsername(userId: string, newUsername: string): void;
+
+    function setPassword(userId: string, newPassword: string, options ? : {
+      logout ? : Object;
+    }): void;
+
+    function validateNewUser(func: Function): boolean;
+
+    function validateLoginAttempt(func: Function): {
+      stop: () => void
+    };
+
+    interface IValidateLoginAttemptCbOpts {
+      type: string;
+      allowed: boolean;
+      error: Meteor.Error;
+      user: Meteor.User;
+      connection: Meteor.Connection;
+      methodName: string;
+      methodArguments: any[];
+    }
+  }
+}
+
+declare module Blaze {
+  var View: ViewStatic;
+
+  interface ViewStatic {
+    new(name ? : string, renderFunction ? : Function): View;
+  }
+
+  interface View {
+    name: string;
+    parentView: View;
+    isCreated: boolean;
+    isRendered: boolean;
+    isDestroyed: boolean;
+    renderCount: number;
+    autorun(runFunc: Function): void;
+    onViewCreated(func: Function): void;
+    onViewReady(func: Function): void;
+    onViewDestroyed(func: Function): void;
+    firstNode(): Node;
+    lastNode(): Node;
+    template: Template;
+    templateInstance(): TemplateInstance;
+  }
+  var currentView: View;
+
+  function isTemplate(value: any): boolean;
+
+  interface HelpersMap {
+    [key: string]: Function;
+  }
+
+  interface EventsMap {
+    [key: string]: Function;
+  }
+
+  var Template: TemplateStatic;
+
+  interface TemplateStatic {
+    new(viewName ? : string, renderFunction ? : Function): Template;
+
+    registerHelper(name: string, func: Function): void;
+    instance(): TemplateInstance;
+    currentData(): any;
+    parentData(numLevels: number): any;
+  }
+
+  interface Template {
+    viewName: string;
+    renderFunction: Function;
+    constructView(): View;
+    head: Template;
+    find(selector: string): Template;
+    findAll(selector: string): Template[];
+    $: any;
+    onCreated(cb: Function): void;
+    onRendered(cb: Function): void;
+    onDestroyed(cb: Function): void;
+    created: Function;
+    rendered: Function;
+    destroyed: Function;
+    helpers(helpersMap: HelpersMap): void;
+    events(eventsMap: EventsMap): void;
+  }
+
+  var TemplateInstance: TemplateInstanceStatic;
+
+  interface TemplateInstanceStatic {
+    new(view: View): TemplateInstance;
+  }
+
+  interface TemplateInstance {
+    $(selector: string): any;
+    autorun(runFunc: Function): Object;
+    data: Object;
+    find(selector ? : string): TemplateInstance;
+    findAll(selector: string): TemplateInstance[];
+    firstNode: Object;
+    lastNode: Object;
+    subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    subscriptionsReady(): boolean;
+    view: Object;
+  }
+
+  function Each(argFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+  function Unless(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+  function If(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+  function Let(bindings: Function, contentFunc: Function): View;
+
+  function With(data: Object | Function, contentFunc: Function): View;
+
+  function getData(elementOrView ? : HTMLElement | View): Object;
+
+  function getView(element ? : HTMLElement): View;
+
+  function remove(renderedView: View): void;
+
+  function render(templateOrView: Template | View, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+  function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+  function toHTML(templateOrView: Template | View): string;
+
+  function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+}
+
+declare module "meteor/blaze" {
+  /// <reference path="meteor.d.ts" />
+
+  module Blaze {
+    var View: ViewStatic;
+
+    interface ViewStatic {
+      new(name ? : string, renderFunction ? : Function): View;
+    }
+
+    interface View {
+      name: string;
+      parentView: View;
+      isCreated: boolean;
+      isRendered: boolean;
+      isDestroyed: boolean;
+      renderCount: number;
+      autorun(runFunc: Function): void;
+      onViewCreated(func: Function): void;
+      onViewReady(func: Function): void;
+      onViewDestroyed(func: Function): void;
+      firstNode(): Node;
+      lastNode(): Node;
+      template: Template;
+      templateInstance(): TemplateInstance;
+    }
+    var currentView: View;
+
+    function isTemplate(value: any): boolean;
+
+    interface HelpersMap {
+      [key: string]: Function;
+    }
+
+    interface EventsMap {
+      [key: string]: Function;
+    }
+
+    var Template: TemplateStatic;
+
+    interface TemplateStatic {
+      new(viewName ? : string, renderFunction ? : Function): Template;
+
+      registerHelper(name: string, func: Function): void;
+      instance(): TemplateInstance;
+      currentData(): any;
+      parentData(numLevels: number): any;
+    }
+
+    interface Template {
+      viewName: string;
+      renderFunction: Function;
+      constructView(): View;
+      head: Template;
+      find(selector: string): Template;
+      findAll(selector: string): Template[];
+      $: any;
+      onCreated(cb: Function): void;
+      onRendered(cb: Function): void;
+      onDestroyed(cb: Function): void;
+      created: Function;
+      rendered: Function;
+      destroyed: Function;
+      helpers(helpersMap: HelpersMap): void;
+      events(eventsMap: EventsMap): void;
+    }
+
+    var TemplateInstance: TemplateInstanceStatic;
+
+    interface TemplateInstanceStatic {
+      new(view: View): TemplateInstance;
+    }
+
+    interface TemplateInstance {
+      $(selector: string): any;
+      autorun(runFunc: Function): Object;
+      data: Object;
+      find(selector ? : string): TemplateInstance;
+      findAll(selector: string): TemplateInstance[];
+      firstNode: Object;
+      lastNode: Object;
+      subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+      subscriptionsReady(): boolean;
+      view: Object;
+    }
+
+    function Each(argFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+    function Unless(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+    function If(conditionFunc: Function, contentFunc: Function, elseFunc ? : Function): View;
+
+    function Let(bindings: Function, contentFunc: Function): View;
+
+    function With(data: Object | Function, contentFunc: Function): View;
+
+    function getData(elementOrView ? : HTMLElement | View): Object;
+
+    function getView(element ? : HTMLElement): View;
+
+    function remove(renderedView: View): void;
+
+    function render(templateOrView: Template | View, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+    function renderWithData(templateOrView: Template | View, data: Object | Function, parentNode: Node, nextNode ? : Node, parentView ? : View): View;
+
+    function toHTML(templateOrView: Template | View): string;
+
+    function toHTMLWithData(templateOrView: Template | View, data: Object | Function): string;
+  }
+}
+declare module BrowserPolicy {
+  interface framing {
+    disallow(): void;
+    restrictToOrigin(origin: string): void;
+    allowAll(): void;
+  }
+
+  interface content {
+    allowEval(): void;
+    allowInlineStyles(): void;
+    allowInlineScripts(): void;
+    allowSameOriginForAll(): void;
+    allowDataUrlForAll(): void;
+    allowOriginForAll(origin: string): void;
+    allowImageOrigin(origin: string): void;
+    allowFrameOrigin(origin: string): void;
+    allowContentTypeSniffing(): void;
+    allowAllContentOrigin(): void;
+    allowAllContentDataUrl(): void;
+    allowAllContentSameOrigin(): void;
+
+    disallowAll(): void;
+    disallowInlineStyles(): void;
+    disallowEval(): void;
+    disallowInlineScripts(): void;
+    disallowFont(): void;
+    disallowObject(): void;
+    disallowAllContent(): void;
+  }
+}
+
+declare module "meteor/browser-policy" {
+  module BrowserPolicy {
+    interface framing {
+      disallow(): void;
+      restrictToOrigin(origin: string): void;
+      allowAll(): void;
+    }
+
+    interface content {
+      allowEval(): void;
+      allowInlineStyles(): void;
+      allowInlineScripts(): void;
+      allowSameOriginForAll(): void;
+      allowDataUrlForAll(): void;
+      allowOriginForAll(origin: string): void;
+      allowImageOrigin(origin: string): void;
+      allowFrameOrigin(origin: string): void;
+      allowContentTypeSniffing(): void;
+      allowAllContentOrigin(): void;
+      allowAllContentDataUrl(): void;
+      allowAllContentSameOrigin(): void;
+
+      disallowAll(): void;
+      disallowInlineStyles(): void;
+      disallowEval(): void;
+      disallowInlineScripts(): void;
+      disallowFont(): void;
+      disallowObject(): void;
+      disallowAllContent(): void;
+    }
+  }
+}
+declare module Match {
+  var Any: any;
+  var String: any;
+  var Integer: any;
+  var Boolean: any;
+  var undefined: any;
+  var Object: any;
+
+  function Optional(pattern: any): boolean;
+
+  function ObjectIncluding(dico: any): boolean;
+
+  function OneOf(...patterns: any[]): any;
+
+  function Where(condition: any): any;
+
+  function test(value: any, pattern: any): boolean;
+}
+
+declare function check(value: any, pattern: any): void;
+
+declare module "meteor/check" {
+  module Match {
+    var Any: any;
+    var String: any;
+    var Integer: any;
+    var Boolean: any;
+    var undefined: any;
+    var Object: any;
+
+    function Optional(pattern: any): boolean;
+
+    function ObjectIncluding(dico: any): boolean;
+
+    function OneOf(...patterns: any[]): any;
+
+    function Where(condition: any): any;
+
+    function test(value: any, pattern: any): boolean;
+  }
+
+  function check(value: any, pattern: any): void;
+}
+
+declare module DDP {
+  interface DDPStatic {
+    subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+    call(method: string, ...parameters: any[]): void;
+    apply(method: string, ...parameters: any[]): void;
+    methods(IMeteorMethodsDictionary: any): any;
+    status(): DDPStatus;
+    reconnect(): void;
+    disconnect(): void;
+    onReconnect(): void;
+  }
+
+  function _allSubscriptionsReady(): boolean;
+
+  type Status = 'connected' | 'connecting' | 'failed' | 'waiting' | 'offline';
+
+  interface DDPStatus {
+    connected: boolean;
+    status: Status;
+    retryCount: number;
+    retryTime ? : number;
+    reason ? : string;
+  }
+
+  function connect(url: string): DDPStatic;
+}
+
+declare module DDPCommon {
+  interface MethodInvocation {
+    new(options: {}): MethodInvocation;
+
+    unblock(): void;
+
+    setUserId(userId: number): void;
+  }
+}
+
+declare module "meteor/ddp" {
+  /// <reference path="meteor.d.ts" />
+
+  module DDP {
+    interface DDPStatic {
+      subscribe(name: string, ...rest: any[]): Meteor.SubscriptionHandle;
+      call(method: string, ...parameters: any[]): void;
+      apply(method: string, ...parameters: any[]): void;
+      methods(IMeteorMethodsDictionary: any): any;
+      status(): DDPStatus;
+      reconnect(): void;
+      disconnect(): void;
+      onReconnect(): void;
+    }
+
+    function _allSubscriptionsReady(): boolean;
+
+    type Status = 'connected' | 'connecting' | 'failed' | 'waiting' | 'offline';
+
+    interface DDPStatus {
+      connected: boolean;
+      status: Status;
+      retryCount: number;
+      retryTime ? : number;
+      reason ? : string;
+    }
+
+    function connect(url: string): DDPStatic;
+  }
+
+  module DDPCommon {
+    interface MethodInvocation {
+      new(options: {}): MethodInvocation;
+
+      unblock(): void;
+
+      setUserId(userId: number): void;
+    }
+  }
+}
+interface EJSONableCustomType {
+  clone(): EJSONableCustomType;
+  equals(other: Object): boolean;
+  toJSONValue(): JSONable;
+  typeName(): string;
+}
+interface EJSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+}
+interface JSONable {
+  [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+}
+interface EJSON extends EJSONable {}
+
+declare module EJSON {
+  function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+
+  function clone < T > (val: T): T;
+
+  function equals(a: EJSON, b: EJSON, options ? : {
+    keyOrderSensitive ? : boolean;
+  }): boolean;
+
+  function fromJSONValue(val: JSONable): any;
+
+  function isBinary(x: Object): boolean;
+  var newBinary: any;
+
+  function parse(str: string): EJSON;
+
+  function stringify(val: EJSON, options ? : {
+    indent ? : boolean | number | string;
+    canonical ? : boolean;
+  }): string;
+
+  function toJSONValue(val: EJSON): JSONable;
+}
+
+declare module "meteor/ejson" {
+  interface EJSONableCustomType {
+    clone(): EJSONableCustomType;
+    equals(other: Object): boolean;
+    toJSONValue(): JSONable;
+    typeName(): string;
+  }
+  interface EJSONable {
+    [key: string]: number | string | boolean | Object | number[] | string[] | Object[] | Date | Uint8Array | EJSONableCustomType;
+  }
+  interface JSONable {
+    [key: string]: number | string | boolean | Object | number[] | string[] | Object[];
+  }
+  interface EJSON extends EJSONable {}
+
+  module EJSON {
+    function addType(name: string, factory: (val: JSONable) => EJSONableCustomType): void;
+
+    function clone < T > (val: T): T;
+
+    function equals(a: EJSON, b: EJSON, options ? : {
+      keyOrderSensitive ? : boolean;
+    }): boolean;
+
+    function fromJSONValue(val: JSONable): any;
+
+    function isBinary(x: Object): boolean;
+    var newBinary: any;
+
+    function parse(str: string): EJSON;
+
+    function stringify(val: EJSON, options ? : {
+      indent ? : boolean | number | string;
+      canonical ? : boolean;
+    }): string;
+
+    function toJSONValue(val: EJSON): JSONable;
+  }
+}
+declare module Email {
+  function send(options: {
+    from ? : string;
+    to ? : string | string[];
+    cc ? : string | string[];
+    bcc ? : string | string[];
+    replyTo ? : string | string[];
+    subject ? : string;
+    text ? : string;
+    html ? : string;
+    headers ? : Object;
+    attachments ? : Object[];
+    mailComposer ? : MailComposer;
+  }): void;
+}
+
+interface MailComposerOptions {
+  escapeSMTP: boolean;
+  encoding: string;
+  charset: string;
+  keepBcc: boolean;
+  forceEmbeddedImages: boolean;
+}
+
+declare var MailComposer: MailComposerStatic;
+interface MailComposerStatic {
+  new(options: MailComposerOptions): MailComposer;
+}
+interface MailComposer {
+  addHeader(name: string, value: string): void;
+  setMessageOption(from: string, to: string, body: string, html: string): void;
+  streamMessage(): void;
+  pipe(stream: any /** fs.WriteStream **/ ): void;
+}
+
+declare module "meteor/email" {
+  module Email {
+    function send(options: {
+      from ? : string;
+      to ? : string | string[];
+      cc ? : string | string[];
+      bcc ? : string | string[];
+      replyTo ? : string | string[];
+      subject ? : string;
+      text ? : string;
+      html ? : string;
+      headers ? : Object;
+      attachments ? : Object[];
+      mailComposer ? : MailComposer;
+    }): void;
+  }
+
+  interface MailComposerOptions {
+    escapeSMTP: boolean;
+    encoding: string;
+    charset: string;
+    keepBcc: boolean;
+    forceEmbeddedImages: boolean;
+  }
+
+  var MailComposer: MailComposerStatic;
+  interface MailComposerStatic {
+    new(options: MailComposerOptions): MailComposer;
+  }
+  interface MailComposer {
+    addHeader(name: string, value: string): void;
+    setMessageOption(from: string, to: string, body: string, html: string): void;
+    streamMessage(): void;
+    pipe(stream: any /** fs.WriteStream **/ ): void;
+  }
+}
+declare module HTTP {
+  interface HTTPRequest {
+    content ? : string;
+    data ? : any;
+    query ? : string;
+    params ? : {
+      [id: string]: string
+    };
+    auth ? : string;
+    headers ? : {
+      [id: string]: string
+    };
+    timeout ? : number;
+    followRedirects ? : boolean;
+  }
+
+  interface HTTPResponse {
+    statusCode ? : number;
+    headers ? : {
+      [id: string]: string
+    };
+    content ? : string;
+    data ? : any;
+  }
+
+  function call(method: string, url: string, options ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function del(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function get(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function post(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function put(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+  function call(method: string, url: string, options ? : {
+    content ? : string;
+    data ? : Object;
+    query ? : string;
+    params ? : Object;
+    auth ? : string;
+    headers ? : Object;
+    timeout ? : number;
+    followRedirects ? : boolean;
+    npmRequestOptions ? : Object;
+    beforeSend ? : Function;
+  }, asyncCallback ? : Function): HTTP.HTTPResponse;
+}
+
+declare module "meteor/http" {
+  module HTTP {
+    interface HTTPRequest {
+      content ? : string;
+      data ? : any;
+      query ? : string;
+      params ? : {
+        [id: string]: string
+      };
+      auth ? : string;
+      headers ? : {
+        [id: string]: string
+      };
+      timeout ? : number;
+      followRedirects ? : boolean;
+    }
+
+    interface HTTPResponse {
+      statusCode ? : number;
+      headers ? : {
+        [id: string]: string
+      };
+      content ? : string;
+      data ? : any;
+    }
+
+    function call(method: string, url: string, options ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function del(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function get(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function post(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function put(url: string, callOptions ? : HTTP.HTTPRequest, asyncCallback ? : Function): HTTP.HTTPResponse;
+
+    function call(method: string, url: string, options ? : {
+      content ? : string;
+      data ? : Object;
+      query ? : string;
+      params ? : Object;
+      auth ? : string;
+      headers ? : Object;
+      timeout ? : number;
+      followRedirects ? : boolean;
+      npmRequestOptions ? : Object;
+      beforeSend ? : Function;
+    }, asyncCallback ? : Function): HTTP.HTTPResponse;
+  }
+}
+
+declare module Meteor {
+  /** Global props **/
+  var isClient: boolean;
+  var isCordova: boolean;
+  var isServer: boolean;
+  var release: string;
+  var settings: {
+    [id: string]: any
+  };
+  /** props **/
+
+  /** User **/
+  interface UserEmail {
+    address: string;
+    verified: boolean;
+  }
+  interface User {
+    _id ? : string;
+    username ? : string;
+    emails ? : UserEmail[];
+    createdAt ? : number;
+    profile ? : any;
+    services ? : any;
+  }
+
+  function user(): User;
+
+  function userId(): string;
+  var users: Mongo.Collection < User > ;
+  /** User **/
+
+  /** Error **/
+  var Error: ErrorStatic;
+  interface ErrorStatic {
+    new(error: string | number, reason ? : string, details ? : string): Error;
+  }
+  interface Error {
+    error: string | number;
+    reason ? : string;
+    details ? : string;
+  }
+  /** Error **/
+
+  /** Method **/
+  function methods(methods: Object): void;
+
+  function call(name: string, ...args: any[]): any;
+
+  function apply(name: string, args: EJSONable[], options ? : {
+    wait ? : boolean;
+    onResultReceived ? : Function;
+  }, asyncCallback ? : Function): any;
+  /** Method **/
+
+  /** Url **/
+  function absoluteUrl(path ? : string, options ? : {
+    secure ? : boolean;
+    replaceLocalhost ? : boolean;
+    rootUrl ? : string;
+  }): string;
+  /** Url **/
+
+  /** Timeout **/
+  function setInterval(func: Function, delay: number): number;
+
+  function setTimeout(func: Function, delay: number): number;
+
+  function clearInterval(id: number): void;
+
+  function clearTimeout(id: number): void;
+
+  function defer(func: Function): void;
+  /** Timeout **/
+
+  /** utils **/
+  function startup(func: Function): void;
+
+  function wrapAsync(func: Function, context ? : Object): any;
+  /** utils **/
+
+  /** Pub/Sub **/
+  interface SubscriptionHandle {
+    stop(): void;
+    ready(): boolean;
+  }
+  interface LiveQueryHandle {
+    stop(): void;
+  }
+  /** Pub/Sub **/
+}
+
+declare module "meteor/meteor" {
+  /// <reference path="mongo.d.ts" />
+  /// <reference path="ejson.d.ts" />
+
+  module Meteor {
+    /** Global props **/
+    var isClient: boolean;
+    var isCordova: boolean;
+    var isServer: boolean;
+    var release: string;
+    var settings: {
+      [id: string]: any
+    };
+    /** props **/
+
+    /** User **/
+    interface UserEmail {
+      address: string;
+      verified: boolean;
+    }
+    interface User {
+      _id ? : string;
+      username ? : string;
+      emails ? : UserEmail[];
+      createdAt ? : number;
+      profile ? : any;
+      services ? : any;
+    }
+
+    function user(): User;
+
+    function userId(): string;
+    var users: Mongo.Collection < User > ;
+    /** User **/
+
+    /** Error **/
+    var Error: ErrorStatic;
+    interface ErrorStatic {
+      new(error: string | number, reason ? : string, details ? : string): Error;
+    }
+    interface Error {
+      error: string | number;
+      reason ? : string;
+      details ? : string;
+    }
+    /** Error **/
+
+    /** Method **/
+    function methods(methods: Object): void;
+
+    function call(name: string, ...args: any[]): any;
+
+    function apply(name: string, args: EJSONable[], options ? : {
+      wait ? : boolean;
+      onResultReceived ? : Function;
+    }, asyncCallback ? : Function): any;
+    /** Method **/
+
+    /** Url **/
+    function absoluteUrl(path ? : string, options ? : {
+      secure ? : boolean;
+      replaceLocalhost ? : boolean;
+      rootUrl ? : string;
+    }): string;
+    /** Url **/
+
+    /** Timeout **/
+    function setInterval(func: Function, delay: number): number;
+
+    function setTimeout(func: Function, delay: number): number;
+
+    function clearInterval(id: number): void;
+
+    function clearTimeout(id: number): void;
+
+    function defer(func: Function): void;
+    /** Timeout **/
+
+    /** utils **/
+    function startup(func: Function): void;
+
+    function wrapAsync(func: Function, context ? : Object): any;
+    /** utils **/
+
+    /** Pub/Sub **/
+    interface SubscriptionHandle {
+      stop(): void;
+      ready(): boolean;
+    }
+    interface LiveQueryHandle {
+      stop(): void;
+    }
+    /** Pub/Sub **/
+  }
+}
+
+declare module Meteor {
+  /** Login **/
+  interface LoginWithExternalServiceOptions {
+    requestPermissions ? : string[];
+    requestOfflineToken ? : Boolean;
+    forceApprovalPrompt ? : Boolean;
+    loginUrlParameters ? : Object;
+    redirectUrl ? : string;
+    loginHint ? : string;
+    loginStyle ? : string;
+  }
+
+  function loginWithMeteorDeveloperAccount(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithFacebook(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithGithub(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithGoogle(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithMeetup(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithTwitter(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loginWithWeibo(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+  function loggingIn(): boolean;
+
+  function loginWith < ExternalService > (options ? : {
+    requestPermissions ? : string[];
+    requestOfflineToken ? : boolean;
+    loginUrlParameters ? : Object;
+    userEmail ? : string;
+    loginStyle ? : string;
+    redirectUrl ? : string;
+  }, callback ? : Function): void;
+
+  function loginWithPassword(user: Object | string, password: string, callback ? : Function): void;
+
+  function logout(callback ? : Function): void;
+
+  function logoutOtherClients(callback ? : Function): void;
+  /** Login **/
+
+  /** Event **/
+  interface Event {
+    type: string;
+    target: HTMLElement;
+    currentTarget: HTMLElement;
+    which: number;
+    stopPropagation(): void;
+    stopImmediatePropagation(): void;
+    preventDefault(): void;
+    isPropagationStopped(): boolean;
+    isImmediatePropagationStopped(): boolean;
+    isDefaultPrevented(): boolean;
+  }
+  interface EventHandlerFunction extends Function {
+    (event ? : Meteor.Event, templateInstance ? : Blaze.TemplateInstance): void;
+  }
+  interface EventMap {
+    [id: string]: Meteor.EventHandlerFunction;
+  }
+  /** Event **/
+
+  /** Connection **/
+  function reconnect(): void;
+
+  function disconnect(): void;
+  /** Connection **/
+
+  /** Status **/
+  function status(): DDP.DDPStatus;
+  /** Status **/
+
+  /** Pub/Sub **/
+  function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+  /** Pub/Sub **/
+}
+
+declare module "meteor/meteor" {
+  /// <reference path="meteor.d.ts" />
+
+  module Meteor {
+    /** Login **/
+    interface LoginWithExternalServiceOptions {
+      requestPermissions ? : string[];
+      requestOfflineToken ? : Boolean;
+      forceApprovalPrompt ? : Boolean;
+      loginUrlParameters ? : Object;
+      redirectUrl ? : string;
+      loginHint ? : string;
+      loginStyle ? : string;
+    }
+
+    function loginWithMeteorDeveloperAccount(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithFacebook(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithGithub(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithGoogle(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithMeetup(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithTwitter(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loginWithWeibo(options ? : Meteor.LoginWithExternalServiceOptions, callback ? : Function): void;
+
+    function loggingIn(): boolean;
+
+    function loginWith < ExternalService > (options ? : {
+      requestPermissions ? : string[];
+      requestOfflineToken ? : boolean;
+      loginUrlParameters ? : Object;
+      userEmail ? : string;
+      loginStyle ? : string;
+      redirectUrl ? : string;
+    }, callback ? : Function): void;
+
+    function loginWithPassword(user: Object | string, password: string, callback ? : Function): void;
+
+    function logout(callback ? : Function): void;
+
+    function logoutOtherClients(callback ? : Function): void;
+    /** Login **/
+
+    /** Event **/
+    interface Event {
+      type: string;
+      target: HTMLElement;
+      currentTarget: HTMLElement;
+      which: number;
+      stopPropagation(): void;
+      stopImmediatePropagation(): void;
+      preventDefault(): void;
+      isPropagationStopped(): boolean;
+      isImmediatePropagationStopped(): boolean;
+      isDefaultPrevented(): boolean;
+    }
+    interface EventHandlerFunction extends Function {
+      (event ? : Meteor.Event, templateInstance ? : Blaze.TemplateInstance): void;
+    }
+    interface EventMap {
+      [id: string]: Meteor.EventHandlerFunction;
+    }
+    /** Event **/
+
+    /** Connection **/
+    function reconnect(): void;
+
+    function disconnect(): void;
+    /** Connection **/
+
+    /** Status **/
+    function status(): DDP.DDPStatus;
+    /** Status **/
+
+    /** Pub/Sub **/
+    function subscribe(name: string, ...args: any[]): Meteor.SubscriptionHandle;
+    /** Pub/Sub **/
+  }
+}
+declare module Meteor {
+  /** Connection **/
+  interface Connection {
+    id: string;
+    close: Function;
+    onClose: Function;
+    clientAddress: string;
+    httpHeaders: Object;
+  }
+
+  function onConnection(callback: Function): void;
+  /** Connection **/
+
+  function publish(name: string, func: Function): void;
+}
+
+interface Subscription {
+  added(collection: string, id: string, fields: Object): void;
+  changed(collection: string, id: string, fields: Object): void;
+  connection: Meteor.Connection;
+  error(error: Error): void;
+  onStop(func: Function): void;
+  ready(): void;
+  removed(collection: string, id: string): void;
+  stop(): void;
+  userId: string;
+}
+
+declare module "meteor/meteor" {
+  module Meteor {
+    /** Connection **/
+    interface Connection {
+      id: string;
+      close: Function;
+      onClose: Function;
+      clientAddress: string;
+      httpHeaders: Object;
+    }
+
+    function onConnection(callback: Function): void;
+    /** Connection **/
+
+    function publish(name: string, func: Function): void;
+  }
+
+  interface Subscription {
+    added(collection: string, id: string, fields: Object): void;
+    changed(collection: string, id: string, fields: Object): void;
+    connection: Meteor.Connection;
+    error(error: Error): void;
+    onStop(func: Function): void;
+    ready(): void;
+    removed(collection: string, id: string): void;
+    stop(): void;
+    userId: string;
+  }
+}
+declare module Mongo {
+  interface Selector {
+    [key: string]: any;
+  }
+  interface Selector extends Object {}
+  interface Modifier {}
+  interface SortSpecifier {}
+  interface FieldSpecifier {
+    [id: string]: Number;
+  }
+
+  var Collection: CollectionStatic;
+  interface CollectionStatic {
+    new < T > (name: string, options ? : {
+      connection ? : Object;
+      idGeneration ? : string;
+      transform ? : Function;
+    }): Collection < T > ;
+  }
+  interface Collection < T > {
+    allow(options: {
+      insert ? : (userId: string, doc: T) => boolean;
+      update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+      remove ? : (userId: string, doc: T) => boolean;
+      fetch ? : string[];
+      transform ? : Function;
+    }): boolean;
+    deny(options: {
+      insert ? : (userId: string, doc: T) => boolean;
+      update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+      remove ? : (userId: string, doc: T) => boolean;
+      fetch ? : string[];
+      transform ? : Function;
+    }): boolean;
+    find(selector ? : Selector | ObjectID | string, options ? : {
+      sort ? : SortSpecifier;
+      skip ? : number;
+      limit ? : number;
+      fields ? : FieldSpecifier;
+      reactive ? : boolean;
+      transform ? : Function;
+    }): Cursor < T > ;
+    findOne(selector ? : Selector | ObjectID | string, options ? : {
+      sort ? : SortSpecifier;
+      skip ? : number;
+      fields ? : FieldSpecifier;
+      reactive ? : boolean;
+      transform ? : Function;
+    }): T;
+    insert(doc: T, callback ? : Function): string;
+    rawCollection(): any;
+    rawDatabase(): any;
+    remove(selector: Selector | ObjectID | string, callback ? : Function): number;
+    update(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+      multi ? : boolean;
+      upsert ? : boolean;
+    }, callback ? : Function): number;
+    upsert(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+      multi ? : boolean;
+    }, callback ? : Function): {
+      numberAffected ? : number;insertedId ? : string;
+    };
+    _ensureIndex(indexName: string, options ? : {
+      [key: string]: any
+    }): void;
+  }
+
+  var Cursor: CursorStatic;
+  interface CursorStatic {
+    new < T > (): Cursor < T > ;
+  }
+  interface ObserveCallbacks {
+    added ? (document: Object) : void;
+    addedAt ? (document: Object, atIndex: number, before: Object) : void;
+    changed ? (newDocument: Object, oldDocument: Object) : void;
+    changedAt ? (newDocument: Object, oldDocument: Object, indexAt: number) : void;
+    removed ? (oldDocument: Object) : void;
+    removedAt ? (oldDocument: Object, atIndex: number) : void;
+    movedTo ? (document: Object, fromIndex: number, toIndex: number, before: Object) : void;
+  }
+  interface ObserveChangesCallbacks {
+    added ? (id: string, fields: Object) : void;
+    addedBefore ? (id: string, fields: Object, before: Object) : void;
+    changed ? (id: string, fields: Object) : void;
+    movedBefore ? (id: string, before: Object) : void;
+    removed ? (id: string) : void;
+  }
+  interface Cursor < T > {
+    count(): number;
+    fetch(): Array < T > ;
+    forEach(callback: < T > (doc: T, index: number, cursor: Cursor < T > ) => void, thisArg ? : any): void;
+    map < U > (callback: (doc: T, index: number, cursor: Cursor < T > ) => U, thisArg ? : any): Array < U > ;
+    observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+    observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+  }
+
+  var ObjectID: ObjectIDStatic;
+  interface ObjectIDStatic {
+    new(hexString ? : string): ObjectID;
+  }
+  interface ObjectID {}
+}
+
+declare module "meteor/mongo" {
+  module Mongo {
+    interface Selector {
+      [key: string]: any;
+    }
+    interface Selector extends Object {}
+    interface Modifier {}
+    interface SortSpecifier {}
+    interface FieldSpecifier {
+      [id: string]: Number;
+    }
+
+    var Collection: CollectionStatic;
+    interface CollectionStatic {
+      new < T > (name: string, options ? : {
+        connection ? : Object;
+        idGeneration ? : string;
+        transform ? : Function;
+      }): Collection < T > ;
+    }
+    interface Collection < T > {
+      allow(options: {
+        insert ? : (userId: string, doc: T) => boolean;
+        update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove ? : (userId: string, doc: T) => boolean;
+        fetch ? : string[];
+        transform ? : Function;
+      }): boolean;
+      deny(options: {
+        insert ? : (userId: string, doc: T) => boolean;
+        update ? : (userId: string, doc: T, fieldNames: string[], modifier: any) => boolean;
+        remove ? : (userId: string, doc: T) => boolean;
+        fetch ? : string[];
+        transform ? : Function;
+      }): boolean;
+      find(selector ? : Selector | ObjectID | string, options ? : {
+        sort ? : SortSpecifier;
+        skip ? : number;
+        limit ? : number;
+        fields ? : FieldSpecifier;
+        reactive ? : boolean;
+        transform ? : Function;
+      }): Cursor < T > ;
+      findOne(selector ? : Selector | ObjectID | string, options ? : {
+        sort ? : SortSpecifier;
+        skip ? : number;
+        fields ? : FieldSpecifier;
+        reactive ? : boolean;
+        transform ? : Function;
+      }): T;
+      insert(doc: T, callback ? : Function): string;
+      rawCollection(): any;
+      rawDatabase(): any;
+      remove(selector: Selector | ObjectID | string, callback ? : Function): number;
+      update(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+        multi ? : boolean;
+        upsert ? : boolean;
+      }, callback ? : Function): number;
+      upsert(selector: Selector | ObjectID | string, modifier: Modifier, options ? : {
+        multi ? : boolean;
+      }, callback ? : Function): {
+        numberAffected ? : number;insertedId ? : string;
+      };
+      _ensureIndex(indexName: string, options ? : {
+        [key: string]: any
+      }): void;
+    }
+
+    var Cursor: CursorStatic;
+    interface CursorStatic {
+      new < T > (): Cursor < T > ;
+    }
+    interface ObserveCallbacks {
+      added ? (document: Object) : void;
+      addedAt ? (document: Object, atIndex: number, before: Object) : void;
+      changed ? (newDocument: Object, oldDocument: Object) : void;
+      changedAt ? (newDocument: Object, oldDocument: Object, indexAt: number) : void;
+      removed ? (oldDocument: Object) : void;
+      removedAt ? (oldDocument: Object, atIndex: number) : void;
+      movedTo ? (document: Object, fromIndex: number, toIndex: number, before: Object) : void;
+    }
+    interface ObserveChangesCallbacks {
+      added ? (id: string, fields: Object) : void;
+      addedBefore ? (id: string, fields: Object, before: Object) : void;
+      changed ? (id: string, fields: Object) : void;
+      movedBefore ? (id: string, before: Object) : void;
+      removed ? (id: string) : void;
+    }
+    interface Cursor < T > {
+      count(): number;
+      fetch(): Array < T > ;
+      forEach(callback: < T > (doc: T, index: number, cursor: Cursor < T > ) => void, thisArg ? : any): void;
+      map < U > (callback: (doc: T, index: number, cursor: Cursor < T > ) => U, thisArg ? : any): Array < U > ;
+      observe(callbacks: ObserveCallbacks): Meteor.LiveQueryHandle;
+      observeChanges(callbacks: ObserveChangesCallbacks): Meteor.LiveQueryHandle;
+    }
+
+    var ObjectID: ObjectIDStatic;
+    interface ObjectIDStatic {
+      new(hexString ? : string): ObjectID;
+    }
+    interface ObjectID {}
+  }
+}
+declare module Mongo {
+  interface AllowDenyOptions {
+    insert ? : (userId: string, doc: any) => boolean;
+    update ? : (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+    remove ? : (userId: string, doc: any) => boolean;
+    fetch ? : string[];
+    transform ? : Function;
+  }
+}
+
+declare module "meteor/mongo" {
+  module Mongo {
+    interface AllowDenyOptions {
+      insert ? : (userId: string, doc: any) => boolean;
+      update ? : (userId: string, doc: any, fieldNames: string[], modifier: any) => boolean;
+      remove ? : (userId: string, doc: any) => boolean;
+      fetch ? : string[];
+      transform ? : Function;
+    }
+  }
+}
+declare module Random {
+  function id(numberOfChars ? : number): string;
+
+  function secret(numberOfChars ? : number): string;
+
+  function fraction(): number;
+  // @param numberOfDigits, @returns a random hex string of the given length
+  function hexString(numberOfDigits: number): string;
+  // @param array, @return a random element in array
+  function choice(array: any[]): string;
+  // @param str, @return a random char in str
+  function choice(str: string): string;
+}
+
+declare module "meteor/random" {
+  module Random {
+    function id(numberOfChars ? : number): string;
+
+    function secret(numberOfChars ? : number): string;
+
+    function fraction(): number;
+    // @param numberOfDigits, @returns a random hex string of the given length
+    function hexString(numberOfDigits: number): string;
+    // @param array, @return a random element in array
+    function choice(array: any[]): string;
+    // @param str, @return a random char in str
+    function choice(str: string): string;
+  }
+}
+declare var ReactiveVar: ReactiveVarStatic;
+interface ReactiveVarStatic {
+  new < T > (initialValue: T, equalsFunc ? : Function): ReactiveVar < T > ;
+}
+interface ReactiveVar < T > {
+  get(): T;
+  set(newValue: T): void;
+}
+
+declare module "meteor/reactive-var" {
+  var ReactiveVar: ReactiveVarStatic;
+  interface ReactiveVarStatic {
+    new < T > (initialValue: T, equalsFunc ? : Function): ReactiveVar < T > ;
+  }
+  interface ReactiveVar < T > {
+    get(): T;
+    set(newValue: T): void;
+  }
+}
+
+declare module Session {
+  function equals(key: string, value: string | number | boolean | any): boolean;
+
+  function get(key: string): any;
+
+  function set(key: string, value: EJSONable | any): void;
+
+  function setDefault(key: string, value: EJSONable | any): void;
+}
+
+declare module "meteor/session" {
+  /// <reference path="ejson.d.ts" />
+
+  module Session {
+    function equals(key: string, value: string | number | boolean | any): boolean;
+
+    function get(key: string): any;
+
+    function set(key: string, value: EJSONable | any): void;
+
+    function setDefault(key: string, value: EJSONable | any): void;
+  }
+}
+
+declare var Template: TemplateStatic;
+interface TemplateStatic extends Blaze.TemplateStatic {
+  new(viewName ? : string, renderFunction ? : Function): Blaze.Template;
+  body: Blaze.Template;
+  [index: string]: any | Blaze.Template;
+}
+
+declare module "meteor/templating" {
+  /// <reference path="blaze.d.ts" />
+
+  var Template: TemplateStatic;
+  interface TemplateStatic extends Blaze.TemplateStatic {
+    new(viewName ? : string, renderFunction ? : Function): Blaze.Template;
+    body: Blaze.Template;
+    [index: string]: any | Blaze.Template;
+  }
+}
+interface ILengthAble {
+  length: number;
+}
+
+interface ITinytestAssertions {
+  ok(doc: Object): void;
+  expect_fail(): void;
+  fail(doc: Object): void;
+  runId(): string;
+  equal < T > (actual: T, expected: T, message ? : string, not ? : boolean): void;
+  notEqual < T > (actual: T, expected: T, message ? : string): void;
+  instanceOf(obj: Object, klass: Function, message ? : string): void;
+  notInstanceOf(obj: Object, klass: Function, message ? : string): void;
+  matches(actual: any, regexp: RegExp, message ? : string): void;
+  notMatches(actual: any, regexp: RegExp, message ? : string): void;
+  throws(f: Function, expected ? : string | RegExp): void;
+  isTrue(v: boolean, msg ? : string): void;
+  isFalse(v: boolean, msg ? : string): void;
+  isNull(v: any, msg ? : string): void;
+  isNotNull(v: any, msg ? : string): void;
+  isUndefined(v: any, msg ? : string): void;
+  isNotUndefined(v: any, msg ? : string): void;
+  isNan(v: any, msg ? : string): void;
+  isNotNan(v: any, msg ? : string): void;
+  include < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+
+  notInclude < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+  length(obj: ILengthAble, expected_length: number, msg ? : string): void;
+  _stringEqual(actual: string, expected: string, msg ? : string): void;
+}
+
+declare module Tinytest {
+  function add(description: string, func: (test: ITinytestAssertions) => void): void;
+
+  function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+}
+
+declare module "meteor/tiny-test" {
+  interface ILengthAble {
+    length: number;
+  }
+
+  interface ITinytestAssertions {
+    ok(doc: Object): void;
+    expect_fail(): void;
+    fail(doc: Object): void;
+    runId(): string;
+    equal < T > (actual: T, expected: T, message ? : string, not ? : boolean): void;
+    notEqual < T > (actual: T, expected: T, message ? : string): void;
+    instanceOf(obj: Object, klass: Function, message ? : string): void;
+    notInstanceOf(obj: Object, klass: Function, message ? : string): void;
+    matches(actual: any, regexp: RegExp, message ? : string): void;
+    notMatches(actual: any, regexp: RegExp, message ? : string): void;
+    throws(f: Function, expected ? : string | RegExp): void;
+    isTrue(v: boolean, msg ? : string): void;
+    isFalse(v: boolean, msg ? : string): void;
+    isNull(v: any, msg ? : string): void;
+    isNotNull(v: any, msg ? : string): void;
+    isUndefined(v: any, msg ? : string): void;
+    isNotUndefined(v: any, msg ? : string): void;
+    isNan(v: any, msg ? : string): void;
+    isNotNan(v: any, msg ? : string): void;
+    include < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+
+    notInclude < T > (s: Array < T > | Object | string, value: any, msg ? : string, not ? : boolean): void;
+    length(obj: ILengthAble, expected_length: number, msg ? : string): void;
+    _stringEqual(actual: string, expected: string, msg ? : string): void;
+  }
+
+  module Tinytest {
+    function add(description: string, func: (test: ITinytestAssertions) => void): void;
+
+    function addAsync(description: string, func: (test: ITinytestAssertions) => void): void;
+  }
+}
+declare module App {
+  function accessRule(pattern: string, options ? : {
+    type ? : string;
+    launchExternal ? : boolean;
+  }): void;
+
+  function configurePlugin(id: string, config: Object): void;
+
+  function icons(icons: Object): void;
+
+  function info(options: {
+    id ? : string;
+    version ? : string;
+    name ? : string;
+    description ? : string;
+    author ? : string;
+    email ? : string;
+    website ? : string;
+  }): void;
+
+  function launchScreens(launchScreens: Object): void;
+
+  function setPreference(name: string, value: string, platform ? : string): void;
+}
+
+declare function execFileAsync(command: string, args ? : any[], options ? : {
+  cwd ? : Object;
+  env ? : Object;
+  stdio ? : any[] | string;
+  destination ? : any;
+  waitForClose ? : string;
+}): any;
+declare function execFileSync(command: string, args ? : any[], options ? : {
+  cwd ? : Object;
+  env ? : Object;
+  stdio ? : any[] | string;
+  destination ? : any;
+  waitForClose ? : string;
+}): String;
+
+declare module Assets {
+  function getBinary(assetPath: string, asyncCallback ? : Function): EJSON;
+
+  function getText(assetPath: string, asyncCallback ? : Function): string;
+}
+
+declare module Cordova {
+  function depends(dependencies: {
+    [id: string]: string
+  }): void;
+}
+
+declare module Npm {
+  function depends(dependencies: {
+    [id: string]: string
+  }): void;
+
+  function require(name: string): any;
+}
+
+declare namespace Package {
+  function describe(options: {
+    summary ? : string;
+    version ? : string;
+    name ? : string;
+    git ? : string;
+    documentation ? : string;
+    debugOnly ? : boolean;
+    prodOnly ? : boolean;
+    testOnly ? : boolean;
+  }): void;
+
+  function onTest(func: (api: PackageAPI) => void): void;
+
+  function onUse(func: (api: PackageAPI) => void): void;
+
+  function registerBuildPlugin(options ? : {
+    name ? : string;
+    use ? : string | string[];
+    sources ? : string[];
+    npmDependencies ? : Object;
+  }): void;
+}
+
+interface PackageAPI {
+  new(): PackageAPI;
+  addAssets(filenames: string | string[], architecture: string | string[]): void;
+  addFiles(filenames: string | string[], architecture ? : string | string[], options ? : {
+    bare ? : boolean;
+  }): void;
+  export (exportedObjects: string | string[], architecture ? : string | string[], exportOptions ? : Object, testOnly ? : boolean): void;
+  imply(packageNames: string | string[], architecture ? : string | string[]): void;
+  use(packageNames: string | string[], architecture ? : string | string[], options ? : {
+    weak ? : boolean;
+    unordered ? : boolean;
+  }): void;
+  versionsFrom(meteorRelease: string | string[]): void;
+}
+
+declare var console: Console;
+
+declare module "meteor/tools" {
+  module App {
+    function accessRule(pattern: string, options ? : {
+      type ? : string;
+      launchExternal ? : boolean;
+    }): void;
+
+    function configurePlugin(id: string, config: Object): void;
+
+    function icons(icons: Object): void;
+
+    function info(options: {
+      id ? : string;
+      version ? : string;
+      name ? : string;
+      description ? : string;
+      author ? : string;
+      email ? : string;
+      website ? : string;
+    }): void;
+
+    function launchScreens(launchScreens: Object): void;
+
+    function setPreference(name: string, value: string, platform ? : string): void;
+  }
+
+  function execFileAsync(command: string, args ? : any[], options ? : {
+    cwd ? : Object;
+    env ? : Object;
+    stdio ? : any[] | string;
+    destination ? : any;
+    waitForClose ? : string;
+  }): any;
+
+  function execFileSync(command: string, args ? : any[], options ? : {
+    cwd ? : Object;
+    env ? : Object;
+    stdio ? : any[] | string;
+    destination ? : any;
+    waitForClose ? : string;
+  }): String;
+
+  module Assets {
+    function getBinary(assetPath: string, asyncCallback ? : Function): EJSON;
+
+    function getText(assetPath: string, asyncCallback ? : Function): string;
+  }
+
+  module Cordova {
+    function depends(dependencies: {
+      [id: string]: string
+    }): void;
+  }
+
+  module Npm {
+    function depends(dependencies: {
+      [id: string]: string
+    }): void;
+
+    function require(name: string): any;
+  }
+
+  namespace Package {
+    function describe(options: {
+      summary ? : string;
+      version ? : string;
+      name ? : string;
+      git ? : string;
+      documentation ? : string;
+      debugOnly ? : boolean;
+      prodOnly ? : boolean;
+      testOnly ? : boolean;
+    }): void;
+
+    function onTest(func: (api: PackageAPI) => void): void;
+
+    function onUse(func: (api: PackageAPI) => void): void;
+
+    function registerBuildPlugin(options ? : {
+      name ? : string;
+      use ? : string | string[];
+      sources ? : string[];
+      npmDependencies ? : Object;
+    }): void;
+  }
+
+  interface PackageAPI {
+    new(): PackageAPI;
+    addAssets(filenames: string | string[], architecture: string | string[]): void;
+    addFiles(filenames: string | string[], architecture ? : string | string[], options ? : {
+      bare ? : boolean;
+    }): void;
+    export (exportedObjects: string | string[], architecture ? : string | string[], exportOptions ? : Object, testOnly ? : boolean): void;
+    imply(packageNames: string | string[], architecture ? : string | string[]): void;
+    use(packageNames: string | string[], architecture ? : string | string[], options ? : {
+      weak ? : boolean;
+      unordered ? : boolean;
+    }): void;
+    versionsFrom(meteorRelease: string | string[]): void;
+  }
+
+  var console: Console;
+}
+declare module Tracker {
+  function Computation(): void;
+  interface Computation {
+    firstRun: boolean;
+    invalidate(): void;
+    invalidated: boolean;
+    onInvalidate(callback: Function): void;
+    onStop(callback: Function): void;
+    stop(): void;
+    stopped: boolean;
+  }
+  var currentComputation: Computation;
+
+  var Dependency: DependencyStatic;
+  interface DependencyStatic {
+    new(): Dependency;
+  }
+  interface Dependency {
+    changed(): void;
+    depend(fromComputation ? : Computation): boolean;
+    hasDependents(): boolean;
+  }
+
+  var active: boolean;
+
+  function afterFlush(callback: Function): void;
+
+  function autorun(runFunc: (computation: Computation) => void, options ? : {
+    onError ? : Function;
+  }): Computation;
+
+  function flush(): void;
+
+  function nonreactive(func: Function): void;
+
+  function onInvalidate(callback: Function): void;
+}
+
+declare module "meteor/tracker" {
+  module Tracker {
+    function Computation(): void;
+    interface Computation {
+      firstRun: boolean;
+      invalidate(): void;
+      invalidated: boolean;
+      onInvalidate(callback: Function): void;
+      onStop(callback: Function): void;
+      stop(): void;
+      stopped: boolean;
+    }
+    var currentComputation: Computation;
+
+    var Dependency: DependencyStatic;
+    interface DependencyStatic {
+      new(): Dependency;
+    }
+    interface Dependency {
+      changed(): void;
+      depend(fromComputation ? : Computation): boolean;
+      hasDependents(): boolean;
+    }
+
+    var active: boolean;
+
+    function afterFlush(callback: Function): void;
+
+    function autorun(runFunc: (computation: Computation) => void, options ? : {
+      onError ? : Function;
+    }): Computation;
+
+    function flush(): void;
+
+    function nonreactive(func: Function): void;
+
+    function onInvalidate(callback: Function): void;
+  }
+}
diff --git a/typings/globals/meteor/typings.json b/typings/globals/meteor/typings.json
new file mode 100644
index 0000000..ec3e7e0
--- /dev/null
+++ b/typings/globals/meteor/typings.json
@@ -0,0 +1,15 @@
+{
+  "resolution": "main",
+  "tree": {
+    "src": "https://raw.githubusercontent.com/meteor-typings/meteor/955b89a4e2af892d1736bc570b490a97e860d5b7/1.3/typings.json",
+    "raw": "github:meteor-typings/meteor/1.3#955b89a4e2af892d1736bc570b490a97e860d5b7",
+    "main": "main.d.ts",
+    "browser": "browser.d.ts",
+    "version": "1.3",
+    "files": [
+      "header.d.ts"
+    ],
+    "name": "meteor",
+    "type": "typings"
+  }
+}
diff --git a/typings/globals/node/index.d.ts b/typings/globals/node/index.d.ts
new file mode 100644
index 0000000..4894d34
--- /dev/null
+++ b/typings/globals/node/index.d.ts
@@ -0,0 +1,2626 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/types/env-node/374f42213af406d9f76e9181da371df3f9e93903/6.0/node.d.ts
+interface NodeError {
+  /**
+   * Returns a string describing the point in the code at which the Error was instantiated.
+   *
+   * For example:
+   *
+   * ```
+   * Error: Things keep happening!
+   *    at /home/gbusey/file.js:525:2
+   *    at Frobnicator.refrobulate (/home/gbusey/business-logic.js:424:21)
+   *    at Actor.<anonymous> (/home/gbusey/actors.js:400:8)
+   *    at increaseSynergy (/home/gbusey/actors.js:701:6)
+   * ```
+   *
+   * The first line is formatted as <error class name>: <error message>, and is followed by a series of stack frames (each line beginning with "at "). Each frame describes a call site within the code that lead to the error being generated. V8 attempts to display a name for each function (by variable name, function name, or object method name), but occasionally it will not be able to find a suitable name. If V8 cannot determine a name for the function, only location information will be displayed for that frame. Otherwise, the determined function name will be displayed with location information appended in parentheses.
+   */
+  stack?: string;
+
+  /**
+   * Returns the string description of error as set by calling new Error(message). The message passed to the constructor will also appear in the first line of the stack trace of the Error, however changing this property after the Error object is created may not change the first line of the stack trace.
+   *
+   * ```
+   * const err = new Error('The message');
+   * console.log(err.message);
+   * // Prints: The message
+   * ```
+   */
+  message: string;
+}
+interface Error extends NodeError { }
+
+interface ErrorConstructor {
+  /**
+   * Creates a `.stack` property on `targetObject`, which when accessed returns a string representing the location in the code at which `Error.captureStackTrace()`` was called.
+   *
+   * ```js
+   * const myObject = {};
+   * Error.captureStackTrace(myObject);
+   * myObject.stack  // similar to `new Error().stack`
+   * ```
+   *
+   * The first line of the trace, instead of being prefixed with `ErrorType : message`, will be the result of calling `targetObject.toString()``.
+   *
+   * The optional constructorOpt argument accepts a function. If given, all frames above constructorOpt, including constructorOpt, will be omitted from the generated stack trace.
+   *
+   * The constructorOpt argument is useful for hiding implementation details of error generation from an end user. For instance:
+   *
+   * ```js
+   * function MyError() {
+   *   Error.captureStackTrace(this, MyError);
+   * }
+   *
+   * // Without passing MyError to captureStackTrace, the MyError
+   * // frame would should up in the .stack property. by passing
+   * // the constructor, we omit that frame and all frames above it.
+   * new MyError().stack
+   * ```
+   */
+  captureStackTrace<T extends { stack?: string }>(targetObject: T, constructorOpt?: new () => T): void;
+
+  /**
+   * The Error.stackTraceLimit property specifies the number of stack frames collected by a stack trace (whether generated by `new Error().stack` or `Error.captureStackTrace(obj))``.
+   *
+   * The default value is 10 but may be set to any valid JavaScript number. Changes will affect any stack trace captured after the value has been changed.
+   *
+   * If set to a non-number value, or set to a negative number, stack traces will not capture any frames.
+   */
+  stackTraceLimit: number;
+}
+
+// ES2015 collection types
+interface NodeCollection {
+  size: number;
+}
+interface NodeWeakCollection {
+}
+interface NodeCollectionConstructor<T> {
+  prototype: T;
+}
+
+interface Map<K, V> extends NodeCollection {
+  clear(): void;
+  delete(key: K): boolean;
+  entries(): Array<[K, V]>;
+  forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void;
+  get(key: K): V;
+  has(key: K): boolean;
+  keys(): Array<K>;
+  set(key: K, value?: V): Map<K, V>;
+  values(): Array<V>;
+  // [Symbol.iterator]():Array<[K,V]>;
+  // [Symbol.toStringTag]: "Map";
+}
+
+interface MapConstructor extends NodeCollectionConstructor<Map<any, any>> {
+  new (): Map<any, any>;
+  new <K, V>(): Map<K, V>;
+}
+declare var Map: MapConstructor;
+
+interface WeakMap<K, V> extends NodeWeakCollection {
+  clear(): void;
+  delete(key: K): boolean;
+  get(key: K): V | void;
+  has(key: K): boolean;
+  set(key: K, value?: V): WeakMap<K, V>;
+}
+
+interface WeakMapConstructor extends NodeCollectionConstructor<WeakMap<any, any>> {
+  new (): WeakMap<any, any>;
+  new <K, V>(): WeakMap<K, V>;
+}
+declare var WeakMap: WeakMapConstructor;
+
+interface Set<T> extends NodeCollection {
+  add(value: T): Set<T>;
+  clear(): void;
+  delete(value: T): boolean;
+  entries(): Array<[T, T]>;
+  forEach(callbackfn: (value: T, index: T, set: Set<T>) => void, thisArg?: any): void;
+  has(value: T): boolean;
+  keys(): Array<T>;
+  values(): Array<T>;
+  // [Symbol.iterator]():Array<T>;
+  // [Symbol.toStringTag]: "Set";
+}
+
+interface SetConstructor extends NodeCollectionConstructor<Set<any>> {
+  new (): Set<any>;
+  new <T>(): Set<T>;
+  new <T>(iterable: Array<T>): Set<T>;
+}
+declare var Set: SetConstructor;
+
+interface WeakSet<T> extends NodeWeakCollection {
+  add(value: T): WeakSet<T>;
+  clear(): void;
+  delete(value: T): boolean;
+  has(value: T): boolean;
+  // [Symbol.toStringTag]: "WeakSet";
+}
+
+interface WeakSetConstructor extends NodeCollectionConstructor<WeakSet<any>> {
+  new (): WeakSet<any>;
+  new <T>(): WeakSet<T>;
+  new <T>(iterable: Array<T>): WeakSet<T>;
+}
+declare var WeakSet: WeakSetConstructor;
+
+/************************************************
+*                                               *
+*                   GLOBAL                      *
+*                                               *
+************************************************/
+declare var process: NodeJS.Process;
+declare var global: NodeJS.Global;
+
+declare var __filename: string;
+declare var __dirname: string;
+
+declare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timer;
+declare function clearTimeout(timeoutId: NodeJS.Timer): void;
+declare function setInterval(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timer;
+declare function clearInterval(intervalId: NodeJS.Timer): void;
+declare function setImmediate(callback: (...args: any[]) => void, ...args: any[]): any;
+declare function clearImmediate(immediateId: any): void;
+
+interface NodeRequireFunction {
+  (id: string): any;
+}
+
+interface NodeRequire extends NodeRequireFunction {
+  resolve(id: string): string;
+  cache: { [filename: string]: NodeModule };
+  extensions: NodeExtensions;
+  main: any;
+}
+
+interface NodeExtensions {
+  '.js': (m: NodeModule, filename: string) => any;
+  '.json': (m: NodeModule, filename: string) => any;
+  '.node': (m: NodeModule, filename: string) => any;
+  [ext: string]: (m: NodeModule, filename: string) => any;
+}
+
+declare var require: NodeRequire;
+
+declare class NodeModule {
+  static runMain(): void;
+  static wrap(code: string): string;
+  static _nodeModulePaths(path: string): string[];
+  static _load(request: string, parent?: NodeModule, isMain?: boolean): any;
+  static _resolveFilename(request: string, parent?: NodeModule, isMain?: boolean): string;
+  static _extensions: NodeExtensions;
+
+  constructor(filename: string);
+  _compile(code: string, filename: string): string;
+
+  id: string;
+  parent: NodeModule;
+  filename: string;
+  paths: string[];
+  children: NodeModule[];
+  exports: any;
+  loaded: boolean;
+  require: NodeRequireFunction;
+}
+
+declare var module: NodeModule;
+
+// Same as module.exports
+declare var exports: any;
+declare var SlowBuffer: {
+  new (str: string, encoding?: string): Buffer;
+  new (size: number): Buffer;
+  new (size: Uint8Array): Buffer;
+  new (array: any[]): Buffer;
+  prototype: Buffer;
+  isBuffer(obj: any): boolean;
+  byteLength(string: string, encoding?: string): number;
+  concat(list: Buffer[], totalLength?: number): Buffer;
+};
+
+// Console class (compatible with TypeScript `lib.d.ts`).
+declare interface Console {
+  log(msg: any, ...params: any[]): void;
+  info(msg: any, ...params: any[]): void;
+  warn(msg: any, ...params: any[]): void;
+  error(msg: any, ...params: any[]): void;
+  dir(value: any, ...params: any[]): void;
+  time(timerName?: string): void;
+  timeEnd(timerName?: string): void;
+  trace(msg: any, ...params: any[]): void;
+  assert(test?: boolean, msg?: string, ...params: any[]): void;
+
+  Console: new (stdout: NodeJS.WritableStream) => Console;
+}
+
+declare var console: Console;
+
+// Buffer class
+type BufferEncoding = "ascii" | "utf8" | "utf16le" | "ucs2" | "binary" | "hex";
+interface Buffer extends NodeBuffer { }
+
+/**
+ * Raw data is stored in instances of the Buffer class.
+ * A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.
+ * Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'
+ */
+declare var Buffer: {
+  /**
+   * Allocates a new buffer containing the given {str}.
+   *
+   * @param str String to store in buffer.
+   * @param encoding encoding to use, optional.  Default is 'utf8'
+   */
+  new (str: string, encoding?: string): Buffer;
+  /**
+   * Allocates a new buffer of {size} octets.
+   *
+   * @param size count of octets to allocate.
+   */
+  new (size: number): Buffer;
+  /**
+   * Allocates a new buffer containing the given {array} of octets.
+   *
+   * @param array The octets to store.
+   */
+  new (array: Uint8Array): Buffer;
+  /**
+   * Produces a Buffer backed by the same allocated memory as
+   * the given {ArrayBuffer}.
+   *
+   *
+   * @param arrayBuffer The ArrayBuffer with which to share memory.
+   */
+  new (arrayBuffer: ArrayBuffer): Buffer;
+  /**
+   * Allocates a new buffer containing the given {array} of octets.
+   *
+   * @param array The octets to store.
+   */
+  new (array: any[]): Buffer;
+  /**
+   * Copies the passed {buffer} data onto a new {Buffer} instance.
+   *
+   * @param buffer The buffer to copy.
+   */
+  new (buffer: Buffer): Buffer;
+  prototype: Buffer;
+  /**
+   * Allocates a new Buffer using an {array} of octets.
+   *
+   * @param array
+   */
+  from(array: any[]): Buffer;
+  /**
+   * When passed a reference to the .buffer property of a TypedArray instance,
+   * the newly created Buffer will share the same allocated memory as the TypedArray.
+   * The optional {byteOffset} and {length} arguments specify a memory range
+   * within the {arrayBuffer} that will be shared by the Buffer.
+   *
+   * @param arrayBuffer The .buffer property of a TypedArray or a new ArrayBuffer()
+   * @param byteOffset
+   * @param length
+   */
+  from(arrayBuffer: ArrayBuffer, byteOffset?: number, length?: number): Buffer;
+  /**
+   * Copies the passed {buffer} data onto a new Buffer instance.
+   *
+   * @param buffer
+   */
+  from(buffer: Buffer): Buffer;
+  /**
+   * Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the `Buffer` will be _zero-filled_.
+   *
+   * @param size The desired length of the new `Buffer`
+   * @param fill A value to pre-fill the new `Buffer` with. Default: `0`
+   * @param encoding If `fill` is a string, this is its encoding. Default: `'utf8'`
+   */
+  alloc(size: number, fill?: string | Buffer | number, encoding?: string): Buffer;
+  /**
+   * Allocates a new _non-zero-filled_ `Buffer` of `size` bytes. The `size` must be less than or equal to the value of `buffer.kMaxLength`. Otherwise, a `RangeError` is thrown. A zero-length `Buffer` will be created if `size <= 0`.
+   *
+   * The underlying memory for `Buffer` instances created in this way is not initialized. The contents of the newly created `Buffer` are unknown and _may contain sensitive data_. Use `buf.fill(0)` to initialize such `Buffer` instances to zeroes.
+   *
+   * @param size The desired length of the new `Buffer`
+   */
+  allocUnsafe(size: number): Buffer;
+  /**
+   * Creates a new Buffer containing the given JavaScript string {str}.
+   * If provided, the {encoding} parameter identifies the character encoding.
+   * If not provided, {encoding} defaults to 'utf8'.
+   *
+   * @param str
+   */
+  from(str: string, encoding?: string): Buffer;
+  /**
+   * Returns true if {obj} is a Buffer
+   *
+   * @param obj object to test.
+   */
+  isBuffer(obj: any): obj is Buffer;
+  /**
+   * Returns true if {encoding} is a valid encoding argument.
+   * Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'
+   *
+   * @param encoding string to test.
+   */
+  isEncoding(encoding: string): boolean;
+  /**
+   * Gives the actual byte length of a string. encoding defaults to 'utf8'.
+   * This is not the same as String.prototype.length since that returns the number of characters in a string.
+   *
+   * @param string string to test.
+   * @param encoding encoding used to evaluate (defaults to 'utf8')
+   */
+  byteLength(string: string, encoding?: string): number;
+  /**
+   * Returns a buffer which is the result of concatenating all the buffers in the list together.
+   *
+   * If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.
+   * If the list has exactly one item, then the first item of the list is returned.
+   * If the list has more than one item, then a new Buffer is created.
+   *
+   * @param list An array of Buffer objects to concatenate
+   * @param totalLength Total length of the buffers when concatenated.
+   *   If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.
+   */
+  concat(list: Buffer[], totalLength?: number): Buffer;
+  /**
+   * The same as buf1.compare(buf2).
+   */
+  compare(buf1: Buffer, buf2: Buffer): number;
+};
+
+/************************************************
+*                                               *
+*               GLOBAL INTERFACES               *
+*                                               *
+************************************************/
+declare namespace NodeJS {
+  export interface ErrnoException extends Error {
+    errno?: number;
+    code?: string;
+    path?: string;
+    syscall?: string;
+    stack?: string;
+  }
+
+  export interface EventEmitter {
+    addListener(event: string, listener: Function): this;
+    on(event: string, listener: Function): this;
+    once(event: string, listener: Function): this;
+    removeListener(event: string, listener: Function): this;
+    removeAllListeners(event?: string): this;
+    setMaxListeners(n: number): this;
+    getMaxListeners(): number;
+    listeners(event: string): Function[];
+    emit(event: string, ...args: any[]): boolean;
+    listenerCount(type: string): number;
+  }
+
+  export interface ReadableStream extends EventEmitter {
+    readable: boolean;
+    read(size?: number): string | Buffer;
+    setEncoding(encoding: string): void;
+    isPaused(): boolean;
+    pause(): void;
+    resume(): void;
+    pipe<T extends WritableStream>(destination: T, options?: { end?: boolean; }): T;
+    unpipe<T extends WritableStream>(destination?: T): void;
+    unshift(chunk: string): void;
+    unshift(chunk: Buffer): void;
+    wrap(oldStream: ReadableStream): ReadableStream;
+  }
+
+  export interface WritableStream extends EventEmitter {
+    writable: boolean;
+    write(buffer: Buffer | string, cb?: Function): boolean;
+    write(str: string, encoding?: string, cb?: Function): boolean;
+    end(): void;
+    end(buffer: Buffer, cb?: Function): void;
+    end(str: string, cb?: Function): void;
+    end(str: string, encoding?: string, cb?: Function): void;
+  }
+
+  export interface ReadWriteStream extends ReadableStream, WritableStream { }
+
+  export interface Events extends EventEmitter { }
+
+  export interface Domain extends Events {
+    run(fn: Function): void;
+    add(emitter: Events): void;
+    remove(emitter: Events): void;
+    bind(cb: (err: Error, data: any) => any): any;
+    intercept(cb: (data: any) => any): any;
+    dispose(): void;
+
+    addListener(event: string, listener: Function): this;
+    on(event: string, listener: Function): this;
+    once(event: string, listener: Function): this;
+    removeListener(event: string, listener: Function): this;
+    removeAllListeners(event?: string): this;
+  }
+
+  export interface MemoryUsage {
+    rss: number;
+    heapTotal: number;
+    heapUsed: number;
+  }
+
+  export interface Process extends EventEmitter {
+    stdout: WritableStream;
+    stderr: WritableStream;
+    stdin: ReadableStream;
+    argv: string[];
+    argv0: string;
+    /**
+     * The process.execArgv property returns the set of Node.js-specific command-line options passed when the Node.js process was launched. These options do not appear in the array returned by the process.argv property, and do not include the Node.js executable, the name of the script, or any options following the script name. These options are useful in order to spawn child processes with the same execution environment as the parent.
+     */
+    execArgv: string[];
+    execPath: string;
+    abort(): void;
+    chdir(directory: string): void;
+    cwd(): string;
+    env: {
+      PATH: string;
+      [key: string]: string;
+    };
+    exit(code?: number): void;
+    exitCode?: number;
+    getgid(): number;
+    setgid(id: number): void;
+    setgid(id: string): void;
+    getuid(): number;
+    setuid(id: number): void;
+    setuid(id: string): void;
+    version: string;
+    versions: {
+      http_parser: string;
+      node: string;
+      v8: string;
+      ares: string;
+      uv: string;
+      zlib: string;
+      openssl: string;
+    };
+    config: {
+      target_defaults: {
+        cflags: any[];
+        default_configuration: string;
+        defines: string[];
+        include_dirs: string[];
+        libraries: string[];
+      };
+      variables: {
+        clang: number;
+        host_arch: string;
+        node_install_npm: boolean;
+        node_install_waf: boolean;
+        node_prefix: string;
+        node_shared_openssl: boolean;
+        node_shared_v8: boolean;
+        node_shared_zlib: boolean;
+        node_use_dtrace: boolean;
+        node_use_etw: boolean;
+        node_use_openssl: boolean;
+        target_arch: string;
+        v8_no_strict_aliasing: number;
+        v8_use_snapshot: boolean;
+        visibility: string;
+      };
+    };
+    kill(pid: number, signal?: string | number): void;
+    pid: number;
+    title: string;
+    arch: string;
+    platform: string;
+    memoryUsage(): MemoryUsage;
+    nextTick(callback: Function): void;
+    umask(mask?: number): number;
+    uptime(): number;
+    hrtime(time?: number[]): number[];
+    domain: Domain;
+
+    // Worker
+    send?(message: any, sendHandle?: any): void;
+    disconnect(): void;
+    connected: boolean;
+  }
+
+  export interface Global {
+    Array: typeof Array;
+    ArrayBuffer: typeof ArrayBuffer;
+    Boolean: typeof Boolean;
+    Buffer: typeof Buffer;
+    DataView: typeof DataView;
+    Date: typeof Date;
+    Error: typeof Error;
+    EvalError: typeof EvalError;
+    Float32Array: typeof Float32Array;
+    Float64Array: typeof Float64Array;
+    Function: typeof Function;
+    GLOBAL: Global;
+    Infinity: typeof Infinity;
+    Int16Array: typeof Int16Array;
+    Int32Array: typeof Int32Array;
+    Int8Array: typeof Int8Array;
+    Intl: typeof Intl;
+    JSON: typeof JSON;
+    Map: MapConstructor;
+    Math: typeof Math;
+    NaN: typeof NaN;
+    Number: typeof Number;
+    Object: typeof Object;
+    Promise: Function;
+    RangeError: typeof RangeError;
+    ReferenceError: typeof ReferenceError;
+    RegExp: typeof RegExp;
+    Set: SetConstructor;
+    String: typeof String;
+    Symbol: Function;
+    SyntaxError: typeof SyntaxError;
+    TypeError: typeof TypeError;
+    URIError: typeof URIError;
+    Uint16Array: typeof Uint16Array;
+    Uint32Array: typeof Uint32Array;
+    Uint8Array: typeof Uint8Array;
+    Uint8ClampedArray: Function;
+    WeakMap: WeakMapConstructor;
+    WeakSet: WeakSetConstructor;
+    clearImmediate: (immediateId: any) => void;
+    clearInterval: (intervalId: NodeJS.Timer) => void;
+    clearTimeout: (timeoutId: NodeJS.Timer) => void;
+    console: typeof console;
+    decodeURI: typeof decodeURI;
+    decodeURIComponent: typeof decodeURIComponent;
+    encodeURI: typeof encodeURI;
+    encodeURIComponent: typeof encodeURIComponent;
+    escape: (str: string) => string;
+    eval: typeof eval;
+    global: Global;
+    isFinite: typeof isFinite;
+    isNaN: typeof isNaN;
+    parseFloat: typeof parseFloat;
+    parseInt: typeof parseInt;
+    process: Process;
+    root: Global;
+    setImmediate: (callback: (...args: any[]) => void, ...args: any[]) => any;
+    setInterval: (callback: (...args: any[]) => void, ms: number, ...args: any[]) => NodeJS.Timer;
+    setTimeout: (callback: (...args: any[]) => void, ms: number, ...args: any[]) => NodeJS.Timer;
+    undefined: typeof undefined;
+    unescape: (str: string) => string;
+    gc: () => void;
+    v8debug?: any;
+  }
+
+  export interface Timer {
+    ref(): void;
+    unref(): void;
+  }
+}
+
+/**
+ * @deprecated
+ */
+interface NodeBuffer extends Uint8Array {
+  write(string: string, offset?: number, length?: number, encoding?: string): number;
+  toString(encoding?: string, start?: number, end?: number): string;
+  toJSON(): any;
+  equals(otherBuffer: Buffer): boolean;
+  compare(otherBuffer: Buffer): number;
+  copy(targetBuffer: Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;
+  slice(start?: number, end?: number): Buffer;
+  writeUIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
+  writeUIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
+  writeIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
+  writeIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;
+  readUIntLE(offset: number, byteLength: number, noAssert?: boolean): number;
+  readUIntBE(offset: number, byteLength: number, noAssert?: boolean): number;
+  readIntLE(offset: number, byteLength: number, noAssert?: boolean): number;
+  readIntBE(offset: number, byteLength: number, noAssert?: boolean): number;
+  readUInt8(offset: number, noAssert?: boolean): number;
+  readUInt16LE(offset: number, noAssert?: boolean): number;
+  readUInt16BE(offset: number, noAssert?: boolean): number;
+  readUInt32LE(offset: number, noAssert?: boolean): number;
+  readUInt32BE(offset: number, noAssert?: boolean): number;
+  readInt8(offset: number, noAssert?: boolean): number;
+  readInt16LE(offset: number, noAssert?: boolean): number;
+  readInt16BE(offset: number, noAssert?: boolean): number;
+  readInt32LE(offset: number, noAssert?: boolean): number;
+  readInt32BE(offset: number, noAssert?: boolean): number;
+  readFloatLE(offset: number, noAssert?: boolean): number;
+  readFloatBE(offset: number, noAssert?: boolean): number;
+  readDoubleLE(offset: number, noAssert?: boolean): number;
+  readDoubleBE(offset: number, noAssert?: boolean): number;
+  writeUInt8(value: number, offset: number, noAssert?: boolean): number;
+  writeUInt16LE(value: number, offset: number, noAssert?: boolean): number;
+  writeUInt16BE(value: number, offset: number, noAssert?: boolean): number;
+  writeUInt32LE(value: number, offset: number, noAssert?: boolean): number;
+  writeUInt32BE(value: number, offset: number, noAssert?: boolean): number;
+  writeInt8(value: number, offset: number, noAssert?: boolean): number;
+  writeInt16LE(value: number, offset: number, noAssert?: boolean): number;
+  writeInt16BE(value: number, offset: number, noAssert?: boolean): number;
+  writeInt32LE(value: number, offset: number, noAssert?: boolean): number;
+  writeInt32BE(value: number, offset: number, noAssert?: boolean): number;
+  writeFloatLE(value: number, offset: number, noAssert?: boolean): number;
+  writeFloatBE(value: number, offset: number, noAssert?: boolean): number;
+  writeDoubleLE(value: number, offset: number, noAssert?: boolean): number;
+  writeDoubleBE(value: number, offset: number, noAssert?: boolean): number;
+  fill(value: any, offset?: number, end?: number): this;
+  // TODO: encoding param
+  indexOf(value: string | number | Buffer, byteOffset?: number): number;
+  // TODO: entries
+  // TODO: includes
+  // TODO: keys
+  // TODO: values
+}
+
+/************************************************
+*                                               *
+*                   MODULES                     *
+*                                               *
+************************************************/
+declare module "buffer" {
+  export var INSPECT_MAX_BYTES: number;
+  export var kMaxLength: number;
+  var BuffType: typeof Buffer;
+  var SlowBuffType: typeof SlowBuffer;
+  export { BuffType as Buffer, SlowBuffType as SlowBuffer };
+}
+
+declare module "querystring" {
+  export interface StringifyOptions {
+    encodeURIComponent?: Function;
+  }
+
+  export interface ParseOptions {
+    maxKeys?: number;
+    decodeURIComponent?: Function;
+  }
+
+  export function stringify<T>(obj: T, sep?: string, eq?: string, options?: StringifyOptions): string;
+  export function parse(str: string, sep?: string, eq?: string, options?: ParseOptions): any;
+  export function parse<T extends { [key: string]: string | string[] }>(str: string, sep?: string, eq?: string, options?: ParseOptions): T;
+  export function escape(str: string): string;
+  export function unescape(str: string): string;
+}
+
+declare module "events" {
+  export class EventEmitter implements NodeJS.EventEmitter {
+    static EventEmitter: EventEmitter;
+    static listenerCount(emitter: EventEmitter, event: string): number; // deprecated
+    static defaultMaxListeners: number;
+
+    addListener(event: string, listener: Function): this;
+    on(event: string, listener: Function): this;
+    once(event: string, listener: Function): this;
+    removeListener(event: string, listener: Function): this;
+    removeAllListeners(event?: string): this;
+    setMaxListeners(n: number): this;
+    getMaxListeners(): number;
+    listeners(event: string): Function[];
+    emit(event: string, ...args: any[]): boolean;
+    listenerCount(type: string): number;
+  }
+}
+
+declare module "http" {
+  import * as events from "events";
+  import * as net from "net";
+  import * as stream from "stream";
+
+  export interface OutgoingHeaders {
+    [header: string]: number | string | string[];
+  }
+
+  export interface IncomingHeaders {
+    [header: string]: string | string[];
+  }
+
+  export interface RequestOptions {
+    protocol?: string;
+    host?: string;
+    hostname?: string;
+    family?: number;
+    port?: number | string;
+    localAddress?: string;
+    socketPath?: string;
+    method?: string;
+    path?: string;
+    headers?: OutgoingHeaders;
+    auth?: string;
+    agent?: Agent | boolean;
+  }
+
+  export interface Server extends events.EventEmitter, net.Server {
+    setTimeout(msecs: number, callback: Function): void;
+    maxHeadersCount: number;
+    timeout: number;
+    listening: boolean;
+  }
+
+  export interface ServerResponse extends events.EventEmitter, stream.Writable {
+    // Extended base methods
+    write(buffer: Buffer): boolean;
+    write(buffer: Buffer, cb?: Function): boolean;
+    write(str: string, cb?: Function): boolean;
+    write(str: string, encoding?: string, cb?: Function): boolean;
+    write(str: string, encoding?: string, fd?: string): boolean;
+
+    writeContinue(): void;
+    writeHead(statusCode: number, statusText?: string, headers?: OutgoingHeaders): void;
+    writeHead(statusCode: number, headers?: OutgoingHeaders): void;
+    statusCode: number;
+    statusMessage: string;
+    headersSent: boolean;
+    setHeader(name: string, value: string | string[]): void;
+    sendDate: boolean;
+    getHeader(name: string): string;
+    removeHeader(name: string): void;
+    write(chunk: any, encoding?: string): any;
+    addTrailers(headers: OutgoingHeaders): void;
+
+    // Extended base methods
+    end(): void;
+    end(buffer: Buffer, cb?: Function): void;
+    end(str: string, cb?: Function): void;
+    end(str: string, encoding?: string, cb?: Function): void;
+  }
+
+  export interface ClientRequest extends events.EventEmitter, stream.Writable {
+    // Extended base methods
+    write(buffer: Buffer): boolean;
+    write(buffer: Buffer, cb?: Function): boolean;
+    write(str: string, cb?: Function): boolean;
+    write(str: string, encoding?: string, cb?: Function): boolean;
+    write(str: string, encoding?: string, fd?: string): boolean;
+
+    write(chunk: any, encoding?: string): void;
+    abort(): void;
+    setTimeout(timeout: number, callback?: Function): void;
+    setNoDelay(noDelay?: boolean): void;
+    setSocketKeepAlive(enable?: boolean, initialDelay?: number): void;
+
+    setHeader(name: string, value: string | string[]): void;
+    getHeader(name: string): string;
+    removeHeader(name: string): void;
+    addTrailers(headers: any): void;
+
+    // Extended base methods
+    end(): void;
+    end(buffer: Buffer, cb?: Function): void;
+    end(str: string, cb?: Function): void;
+    end(str: string, encoding?: string, cb?: Function): void;
+    end(data?: any, encoding?: string): void;
+  }
+
+  export interface IncomingMessage extends events.EventEmitter, stream.Readable {
+    httpVersion: string;
+    headers: IncomingHeaders;
+    rawHeaders: string[];
+    trailers: IncomingHeaders;
+    rawTrailers: string[];
+    setTimeout(msecs: number, callback: Function): NodeJS.Timer;
+    /**
+     * Only valid for request obtained from http.Server.
+     */
+    method?: string;
+    /**
+     * Only valid for request obtained from http.Server.
+     */
+    url?: string;
+    /**
+     * Only valid for response obtained from http.ClientRequest.
+     */
+    statusCode?: number;
+    /**
+     * Only valid for response obtained from http.ClientRequest.
+     */
+    statusMessage?: string;
+    socket: net.Socket;
+  }
+
+  export interface AgentOptions {
+    /**
+     * Keep sockets around in a pool to be used by other requests in the future. Default = false
+     */
+    keepAlive?: boolean;
+    /**
+     * When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.
+     * Only relevant if keepAlive is set to true.
+     */
+    keepAliveMsecs?: number;
+    /**
+     * Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity
+     */
+    maxSockets?: number;
+    /**
+     * Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.
+     */
+    maxFreeSockets?: number;
+  }
+
+  export class Agent {
+    maxSockets: number;
+    sockets: any;
+    requests: any;
+
+    constructor(opts?: AgentOptions);
+
+    /**
+     * Destroy any sockets that are currently in use by the agent.
+     * It is usually not necessary to do this. However, if you are using an agent with KeepAlive enabled,
+     * then it is best to explicitly shut down the agent when you know that it will no longer be used. Otherwise,
+     * sockets may hang open for quite a long time before the server terminates them.
+     */
+    destroy(): void;
+  }
+
+  export var METHODS: string[];
+
+  export var STATUS_CODES: {
+    [errorCode: number]: string;
+    [errorCode: string]: string;
+  };
+  export function createServer(requestListener?: (request: IncomingMessage, response: ServerResponse) => void): Server;
+  export function createClient(port?: number, host?: string): any;
+  export function request(options: string | RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest;
+  export function get(options: string | RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest;
+  export var globalAgent: Agent;
+}
+
+declare module "cluster" {
+  import * as child from "child_process";
+  import * as events from "events";
+
+  export interface ClusterSettings {
+    exec?: string;
+    args?: string[];
+    silent?: boolean;
+  }
+
+  export interface Address {
+    address: string;
+    port: number;
+    addressType: string;
+  }
+
+  export class Worker extends events.EventEmitter {
+    id: string;
+    process: child.ChildProcess;
+    suicide: boolean;
+    send(message: any, sendHandle?: any): void;
+    kill(signal?: string): void;
+    destroy(signal?: string): void;
+    disconnect(): void;
+    isConnected(): boolean;
+    isDead(): boolean;
+  }
+
+  export var settings: ClusterSettings;
+  export var isMaster: boolean;
+  export var isWorker: boolean;
+  export function setupMaster(settings?: ClusterSettings): void;
+  export function fork(env?: any): Worker;
+  export function disconnect(callback?: Function): void;
+  export var worker: Worker;
+  export var workers: {
+    [index: string]: Worker
+  };
+
+  // Event emitter
+  export function addListener(event: string, listener: Function): void;
+  export function on(event: "disconnect", listener: (worker: Worker) => void): void;
+  export function on(event: "exit", listener: (worker: Worker, code: number, signal: string) => void): void;
+  export function on(event: "fork", listener: (worker: Worker) => void): void;
+  export function on(event: "listening", listener: (worker: Worker, address: any) => void): void;
+  export function on(event: "message", listener: (worker: Worker, message: any) => void): void;
+  export function on(event: "online", listener: (worker: Worker) => void): void;
+  export function on(event: "setup", listener: (settings: any) => void): void;
+  export function on(event: string, listener: Function): any;
+  export function once(event: string, listener: Function): void;
+  export function removeListener(event: string, listener: Function): void;
+  export function removeAllListeners(event?: string): void;
+  export function setMaxListeners(n: number): void;
+  export function listeners(event: string): Function[];
+  export function emit(event: string, ...args: any[]): boolean;
+}
+
+declare module "zlib" {
+  import * as stream from "stream";
+  export interface ZlibOptions { chunkSize?: number; windowBits?: number; level?: number; memLevel?: number; strategy?: number; dictionary?: any; }
+  export interface ZlibCallback { (error: Error, result: any): void }
+
+  export interface Gzip extends stream.Transform { }
+  export interface Gunzip extends stream.Transform { }
+  export interface Deflate extends stream.Transform { }
+  export interface Inflate extends stream.Transform { }
+  export interface DeflateRaw extends stream.Transform { }
+  export interface InflateRaw extends stream.Transform { }
+  export interface Unzip extends stream.Transform { }
+
+  export function createGzip(options?: ZlibOptions): Gzip;
+  export function createGunzip(options?: ZlibOptions): Gunzip;
+  export function createDeflate(options?: ZlibOptions): Deflate;
+  export function createInflate(options?: ZlibOptions): Inflate;
+  export function createDeflateRaw(options?: ZlibOptions): DeflateRaw;
+  export function createInflateRaw(options?: ZlibOptions): InflateRaw;
+  export function createUnzip(options?: ZlibOptions): Unzip;
+
+  export function deflate(buf: Buffer | string, callback?: ZlibCallback): void;
+  export function deflate(buf: Buffer | string, options: ZlibOptions, callback?: ZlibCallback): void;
+  export function deflateSync(buf: Buffer | string, options?: ZlibOptions): any;
+  export function deflateRaw(buf: Buffer | string, callback?: ZlibCallback): void;
+  export function deflateRaw(buf: Buffer | string, options: ZlibOptions, callback?: ZlibCallback): void;
+  export function deflateRawSync(buf: Buffer | string, options?: ZlibOptions): any;
+  export function gzip(buf: Buffer | string, callback?: ZlibCallback): void;
+  export function gzip(buf: Buffer | string, options: ZlibOptions, callback?: ZlibCallback): void;
+  export function gzipSync(buf: Buffer | string, options?: ZlibOptions): any;
+  export function gunzip(buf: Buffer | string, callback?: ZlibCallback): void;
+  export function gunzip(buf: Buffer | string, options: ZlibOptions, callback?: ZlibCallback): void;
+  export function gunzipSync(buf: Buffer | string, options?: ZlibOptions): any;
+  export function inflate(buf: Buffer | string, callback?: ZlibCallback): void;
+  export function inflate(buf: Buffer | string, options: ZlibOptions, callback?: ZlibCallback): void;
+  export function inflateSync(buf: Buffer | string, options?: ZlibOptions): any;
+  export function inflateRaw(buf: Buffer | string, callback?: ZlibCallback): void;
+  export function inflateRaw(buf: Buffer | string, options: ZlibOptions, callback?: ZlibCallback): void;
+  export function inflateRawSync(buf: Buffer | string, options?: ZlibOptions): any;
+  export function unzip(buf: Buffer | string, callback?: ZlibCallback): void;
+  export function unzip(buf: Buffer | string, options: ZlibOptions, callback?: ZlibCallback): void;
+  export function unzipSync(buf: Buffer | string, options?: ZlibOptions): any;
+
+  // Constants
+  export var Z_NO_FLUSH: number;
+  export var Z_PARTIAL_FLUSH: number;
+  export var Z_SYNC_FLUSH: number;
+  export var Z_FULL_FLUSH: number;
+  export var Z_FINISH: number;
+  export var Z_BLOCK: number;
+  export var Z_TREES: number;
+  export var Z_OK: number;
+  export var Z_STREAM_END: number;
+  export var Z_NEED_DICT: number;
+  export var Z_ERRNO: number;
+  export var Z_STREAM_ERROR: number;
+  export var Z_DATA_ERROR: number;
+  export var Z_MEM_ERROR: number;
+  export var Z_BUF_ERROR: number;
+  export var Z_VERSION_ERROR: number;
+  export var Z_NO_COMPRESSION: number;
+  export var Z_BEST_SPEED: number;
+  export var Z_BEST_COMPRESSION: number;
+  export var Z_DEFAULT_COMPRESSION: number;
+  export var Z_FILTERED: number;
+  export var Z_HUFFMAN_ONLY: number;
+  export var Z_RLE: number;
+  export var Z_FIXED: number;
+  export var Z_DEFAULT_STRATEGY: number;
+  export var Z_BINARY: number;
+  export var Z_TEXT: number;
+  export var Z_ASCII: number;
+  export var Z_UNKNOWN: number;
+  export var Z_DEFLATED: number;
+  export var Z_NULL: number;
+}
+
+declare module "os" {
+  export interface CpuInfo {
+    model: string;
+    speed: number;
+    times: {
+      user: number;
+      nice: number;
+      sys: number;
+      idle: number;
+      irq: number;
+    };
+  }
+
+  export interface NetworkInterfaceInfo {
+    address: string;
+    netmask: string;
+    family: string;
+    mac: string;
+    internal: boolean;
+  }
+
+  export function tmpdir(): string;
+  export function homedir(): string;
+  export function endianness(): string;
+  export function hostname(): string;
+  export function type(): string;
+  export function platform(): string;
+  export function arch(): string;
+  export function release(): string;
+  export function uptime(): number;
+  export function loadavg(): number[];
+  export function totalmem(): number;
+  export function freemem(): number;
+  export function cpus(): CpuInfo[];
+  export function networkInterfaces(): { [index: string]: NetworkInterfaceInfo[] };
+  export var EOL: string;
+}
+
+declare module "https" {
+  import * as tls from "tls";
+  import * as events from "events";
+  import * as http from "http";
+
+  export interface ServerOptions {
+    pfx?: any;
+    key?: any;
+    passphrase?: string;
+    cert?: any;
+    ca?: any;
+    crl?: any;
+    ciphers?: string;
+    honorCipherOrder?: boolean;
+    requestCert?: boolean;
+    rejectUnauthorized?: boolean;
+    NPNProtocols?: any;
+    SNICallback?: (servername: string) => any;
+  }
+
+  export interface RequestOptions extends http.RequestOptions {
+    pfx?: string | Buffer;
+    key?: string | Buffer;
+    passphrase?: string;
+    cert?: string | Buffer;
+    ca?: string | Buffer | Array<string | Buffer>;
+    ciphers?: string;
+    rejectUnauthorized?: boolean;
+    secureProtocol?: string;
+  }
+
+  export interface Agent extends http.Agent { }
+
+  export interface AgentOptions extends http.AgentOptions {
+    maxCachedSessions?: number;
+  }
+
+  export var Agent: {
+    new (options?: AgentOptions): Agent;
+  };
+  export interface Server extends tls.Server { }
+  export function createServer(options: ServerOptions, requestListener?: Function): Server;
+  export function request(options: string | RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;
+  export function get(options: string | RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;
+  export var globalAgent: Agent;
+}
+
+declare module "punycode" {
+  export function decode(string: string): string;
+  export function encode(string: string): string;
+  export function toUnicode(domain: string): string;
+  export function toASCII(domain: string): string;
+  export var ucs2: ucs2;
+  interface ucs2 {
+    decode(string: string): number[];
+    encode(codePoints: number[]): string;
+  }
+  export var version: any;
+}
+
+declare module "repl" {
+  import { EventEmitter } from "events";
+  import { Interface } from "readline";
+
+  export interface ReplOptions {
+    prompt?: string;
+    input?: NodeJS.ReadableStream;
+    output?: NodeJS.WritableStream;
+    terminal?: boolean;
+    eval?: Function;
+    useColors?: boolean;
+    useGlobal?: boolean;
+    ignoreUndefined?: boolean;
+    writer?: Function;
+  }
+
+  export function start(options: ReplOptions): REPLServer;
+
+  export type REPLCommand = (this: REPLServer, rest: string) => void;
+
+  export class REPLServer extends Interface {
+    inputStream: NodeJS.ReadableStream;
+    outputStream: NodeJS.WritableStream;
+    useColors: boolean;
+    commands: {
+      [command: string]: REPLCommand;
+    };
+    defineCommand(keyword: string, cmd: REPLCommand | { help: string, action: REPLCommand }): void;
+    displayPrompt(preserveCursor?: boolean): void;
+    setPrompt(prompt: string): void;
+    turnOffEditorMode(): void;
+  }
+
+  export class Recoverable extends SyntaxError {
+    err: Error;
+    constructor(err: Error);
+  }
+}
+
+declare module "readline" {
+  import * as events from "events";
+  import * as stream from "stream";
+
+  export interface Key {
+    sequence?: string;
+    name?: string;
+    ctrl?: boolean;
+    meta?: boolean;
+    shift?: boolean;
+  }
+
+  export class Interface extends events.EventEmitter {
+    setPrompt(prompt: string): void;
+    prompt(preserveCursor?: boolean): void;
+    question(query: string, callback: (answer: string) => void): void;
+    pause(): this;
+    resume(): this;
+    close(): void;
+    write(data: string | Buffer, key?: Key): void;
+  }
+
+  export interface Completer {
+    (line: string): CompleterResult;
+    (line: string, callback: (err: any, result: CompleterResult) => void): any;
+  }
+
+  export interface CompleterResult {
+    completions: string[];
+    line: string;
+  }
+
+  export interface InterfaceOptions {
+    input: NodeJS.ReadableStream;
+    output?: NodeJS.WritableStream;
+    completer?: Completer;
+    terminal?: boolean;
+    historySize?: number;
+  }
+
+  export function createInterface(input: NodeJS.ReadableStream, output?: NodeJS.WritableStream, completer?: Completer, terminal?: boolean): Interface;
+  export function createInterface(options: InterfaceOptions): Interface;
+
+  export function cursorTo(stream: NodeJS.WritableStream, x: number, y: number): void;
+  export function moveCursor(stream: NodeJS.WritableStream, dx: number | string, dy: number | string): void;
+  export function clearLine(stream: NodeJS.WritableStream, dir: number): void;
+  export function clearScreenDown(stream: NodeJS.WritableStream): void;
+}
+
+declare module "vm" {
+  export interface Context { }
+
+  export interface ScriptOptions {
+    filename?: string;
+    lineOffset?: number;
+    columnOffset?: number;
+    displayErrors?: boolean;
+    timeout?: number;
+    cachedData?: Buffer;
+    produceCachedData?: boolean;
+  }
+
+  export interface RunInNewContextOptions {
+    filename?: string;
+    lineOffset?: number;
+    columnOffset?: number;
+    displayErrors?: boolean;
+    timeout?: number;
+  }
+
+  export interface RunInContextOptions extends RunInNewContextOptions {
+    breakOnSigint?: boolean;
+  }
+
+  export class Script {
+    constructor(code: string, options?: string | ScriptOptions);
+    runInContext(contextifiedSandbox: Context, options?: RunInContextOptions): any;
+    runInNewContext(sandbox?: Context, options?: RunInNewContextOptions): any;
+    runInThisContext(options?: RunInNewContextOptions): any;
+  }
+
+  export function createContext(sandbox?: Context): Context;
+  export function isContext(sandbox: Context): boolean;
+  export function runInContext(code: string, contextifiedSandbox: Context, options?: string | RunInNewContextOptions): any;
+  export function runInDebugContext(code: string): any;
+  export function runInNewContext(code: string, sandbox?: Context, options?: string | RunInNewContextOptions): any;
+  export function runInThisContext(code: string, options?: string | RunInNewContextOptions): any;
+  /**
+   * @deprecated
+   */
+  export function createScript(code: string, options?: string | ScriptOptions): Script;
+}
+
+declare module "child_process" {
+  import * as events from "events";
+  import * as stream from "stream";
+
+  export interface ChildProcess extends events.EventEmitter {
+    stdin: stream.Writable;
+    stdout: stream.Readable;
+    stderr: stream.Readable;
+    stdio: [stream.Writable, stream.Readable, stream.Readable];
+    pid: number;
+    kill(signal?: string): void;
+    send(message: any, sendHandle?: any): void;
+    connected: boolean;
+    disconnect(): void;
+    unref(): void;
+  }
+
+  export interface SpawnOptions {
+    cwd?: string;
+    env?: any;
+    stdio?: any;
+    detached?: boolean;
+    uid?: number;
+    gid?: number;
+    shell?: boolean | string;
+  }
+  export function spawn(command: string, args?: string[], options?: SpawnOptions): ChildProcess;
+
+  export interface ExecOptions {
+    cwd?: string;
+    env?: any;
+    shell?: string;
+    timeout?: number;
+    maxBuffer?: number;
+    killSignal?: string;
+    uid?: number;
+    gid?: number;
+  }
+  export interface ExecOptionsWithStringEncoding extends ExecOptions {
+    encoding: BufferEncoding;
+  }
+  export interface ExecOptionsWithBufferEncoding extends ExecOptions {
+    encoding: string; // specify `null`.
+  }
+  export function exec(command: string, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+  export function exec(command: string, options: ExecOptionsWithStringEncoding, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+  // usage. child_process.exec("tsc", {encoding: null as string}, (err, stdout, stderr) => {});
+  export function exec(command: string, options: ExecOptionsWithBufferEncoding, callback?: (error: Error, stdout: Buffer, stderr: Buffer) => void): ChildProcess;
+  export function exec(command: string, options: ExecOptions, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+
+  export interface ExecFileOptions {
+    cwd?: string;
+    env?: any;
+    timeout?: number;
+    maxBuffer?: number;
+    killSignal?: string;
+    uid?: number;
+    gid?: number;
+  }
+  export interface ExecFileOptionsWithStringEncoding extends ExecFileOptions {
+    encoding: BufferEncoding;
+  }
+  export interface ExecFileOptionsWithBufferEncoding extends ExecFileOptions {
+    encoding: string; // specify `null`.
+  }
+  export function execFile(file: string, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+  export function execFile(file: string, options?: ExecFileOptionsWithStringEncoding, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+  // usage. child_process.execFile("file.sh", {encoding: null as string}, (err, stdout, stderr) => {});
+  export function execFile(file: string, options?: ExecFileOptionsWithBufferEncoding, callback?: (error: Error, stdout: Buffer, stderr: Buffer) => void): ChildProcess;
+  export function execFile(file: string, options?: ExecFileOptions, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+  export function execFile(file: string, args?: string[], callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+  export function execFile(file: string, args?: string[], options?: ExecFileOptionsWithStringEncoding, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+  // usage. child_process.execFile("file.sh", ["foo"], {encoding: null as string}, (err, stdout, stderr) => {});
+  export function execFile(file: string, args?: string[], options?: ExecFileOptionsWithBufferEncoding, callback?: (error: Error, stdout: Buffer, stderr: Buffer) => void): ChildProcess;
+  export function execFile(file: string, args?: string[], options?: ExecFileOptions, callback?: (error: Error, stdout: string, stderr: string) => void): ChildProcess;
+
+  export interface ForkOptions {
+    cwd?: string;
+    env?: any;
+    execPath?: string;
+    execArgv?: string[];
+    silent?: boolean;
+    uid?: number;
+    gid?: number;
+  }
+  export function fork(modulePath: string, args?: string[], options?: ForkOptions): ChildProcess;
+
+  export interface SpawnSyncOptions {
+    cwd?: string;
+    input?: string | Buffer;
+    stdio?: any;
+    env?: any;
+    uid?: number;
+    gid?: number;
+    timeout?: number;
+    killSignal?: string;
+    maxBuffer?: number;
+    encoding?: string;
+    shell?: boolean | string;
+  }
+  export interface SpawnSyncOptionsWithStringEncoding extends SpawnSyncOptions {
+    encoding: BufferEncoding;
+  }
+  export interface SpawnSyncOptionsWithBufferEncoding extends SpawnSyncOptions {
+    encoding: string; // specify `null`.
+  }
+  export interface SpawnSyncReturns<T> {
+    pid: number;
+    output: string[];
+    stdout: T;
+    stderr: T;
+    status: number;
+    signal: string;
+    error: Error;
+  }
+  export function spawnSync(command: string): SpawnSyncReturns<Buffer>;
+  export function spawnSync(command: string, options?: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;
+  export function spawnSync(command: string, options?: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;
+  export function spawnSync(command: string, options?: SpawnSyncOptions): SpawnSyncReturns<Buffer>;
+  export function spawnSync(command: string, args?: string[], options?: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;
+  export function spawnSync(command: string, args?: string[], options?: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;
+  export function spawnSync(command: string, args?: string[], options?: SpawnSyncOptions): SpawnSyncReturns<Buffer>;
+
+  export interface ExecSyncOptions {
+    cwd?: string;
+    input?: string | Buffer;
+    stdio?: any;
+    env?: any;
+    shell?: string;
+    uid?: number;
+    gid?: number;
+    timeout?: number;
+    killSignal?: string;
+    maxBuffer?: number;
+    encoding?: string;
+  }
+  export interface ExecSyncOptionsWithStringEncoding extends ExecSyncOptions {
+    encoding: BufferEncoding;
+  }
+  export interface ExecSyncOptionsWithBufferEncoding extends ExecSyncOptions {
+    encoding: string; // specify `null`.
+  }
+  export function execSync(command: string): Buffer;
+  export function execSync(command: string, options?: ExecSyncOptionsWithStringEncoding): string;
+  export function execSync(command: string, options?: ExecSyncOptionsWithBufferEncoding): Buffer;
+  export function execSync(command: string, options?: ExecSyncOptions): Buffer;
+
+  export interface ExecFileSyncOptions {
+    cwd?: string;
+    input?: string | Buffer;
+    stdio?: any;
+    env?: any;
+    uid?: number;
+    gid?: number;
+    timeout?: number;
+    killSignal?: string;
+    maxBuffer?: number;
+    encoding?: string;
+  }
+  export interface ExecFileSyncOptionsWithStringEncoding extends ExecFileSyncOptions {
+    encoding: BufferEncoding;
+  }
+  export interface ExecFileSyncOptionsWithBufferEncoding extends ExecFileSyncOptions {
+    encoding: string; // specify `null`.
+  }
+  export function execFileSync(command: string): Buffer;
+  export function execFileSync(command: string, options?: ExecFileSyncOptionsWithStringEncoding): string;
+  export function execFileSync(command: string, options?: ExecFileSyncOptionsWithBufferEncoding): Buffer;
+  export function execFileSync(command: string, options?: ExecFileSyncOptions): Buffer;
+  export function execFileSync(command: string, args?: string[], options?: ExecFileSyncOptionsWithStringEncoding): string;
+  export function execFileSync(command: string, args?: string[], options?: ExecFileSyncOptionsWithBufferEncoding): Buffer;
+  export function execFileSync(command: string, args?: string[], options?: ExecFileSyncOptions): Buffer;
+}
+
+declare module "url" {
+  export interface Url {
+    href?: string;
+    protocol?: string;
+    auth?: string;
+    hostname?: string;
+    port?: string;
+    host?: string;
+    pathname?: string;
+    search?: string;
+    query?: string | any;
+    slashes?: boolean;
+    hash?: string;
+    path?: string;
+  }
+
+  export function parse(urlStr: string, parseQueryString?: boolean, slashesDenoteHost?: boolean): Url;
+  export function format(url: Url): string;
+  export function resolve(from: string, to: string): string;
+}
+
+declare module "dns" {
+  export function lookup(domain: string, family: number, callback: (err: Error, address: string, family: number) => void): string;
+  export function lookup(domain: string, callback: (err: Error, address: string, family: number) => void): string;
+  export function resolve(domain: string, rrtype: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolve(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolve4(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolve6(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolveMx(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolveTxt(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolveSrv(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolveNs(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function resolveCname(domain: string, callback: (err: Error, addresses: string[]) => void): string[];
+  export function reverse(ip: string, callback: (err: Error, domains: string[]) => void): string[];
+}
+
+declare module "net" {
+  import * as stream from "stream";
+
+  export interface Socket extends stream.Duplex {
+    // Extended base methods
+    write(buffer: Buffer): boolean;
+    write(buffer: Buffer, cb?: Function): boolean;
+    write(str: string, cb?: Function): boolean;
+    write(str: string, encoding?: string, cb?: Function): boolean;
+    write(str: string, encoding?: string, fd?: string): boolean;
+
+    connect(port: number, host?: string, connectionListener?: Function): void;
+    connect(path: string, connectionListener?: Function): void;
+    bufferSize: number;
+    setEncoding(encoding?: string): void;
+    write(data: any, encoding?: string, callback?: Function): void;
+    destroy(): void;
+    pause(): void;
+    resume(): void;
+    setTimeout(timeout: number, callback?: Function): void;
+    setNoDelay(noDelay?: boolean): void;
+    setKeepAlive(enable?: boolean, initialDelay?: number): void;
+    address(): { port: number; family: string; address: string; };
+    unref(): void;
+    ref(): void;
+
+    remoteAddress: string;
+    remoteFamily: string;
+    remotePort: number;
+    localAddress: string;
+    localPort: number;
+    bytesRead: number;
+    bytesWritten: number;
+
+    // Extended base methods
+    end(): void;
+    end(buffer: Buffer, cb?: Function): void;
+    end(str: string, cb?: Function): void;
+    end(str: string, encoding?: string, cb?: Function): void;
+    end(data?: any, encoding?: string): void;
+  }
+
+  export var Socket: {
+    new (options?: { fd?: string; type?: string; allowHalfOpen?: boolean; }): Socket;
+  };
+
+  export interface ListenOptions {
+    port?: number;
+    host?: string;
+    backlog?: number;
+    path?: string;
+    exclusive?: boolean;
+  }
+
+  export interface Server extends Socket {
+    listen(port: number, hostname?: string, backlog?: number, listeningListener?: Function): Server;
+    listen(port: number, hostname?: string, listeningListener?: Function): Server;
+    listen(port: number, backlog?: number, listeningListener?: Function): Server;
+    listen(port: number, listeningListener?: Function): Server;
+    listen(path: string, backlog?: number, listeningListener?: Function): Server;
+    listen(path: string, listeningListener?: Function): Server;
+    listen(handle: any, backlog?: number, listeningListener?: Function): Server;
+    listen(handle: any, listeningListener?: Function): Server;
+    listen(options: ListenOptions, listeningListener?: Function): Server;
+    close(callback?: Function): Server;
+    address(): { port: number; family: string; address: string; };
+    getConnections(cb: (error: Error, count: number) => void): void;
+    ref(): Server;
+    unref(): Server;
+    maxConnections: number;
+    connections: number;
+  }
+  export function createServer(connectionListener?: (socket: Socket) => void): Server;
+  export function createServer(options?: { allowHalfOpen?: boolean; }, connectionListener?: (socket: Socket) => void): Server;
+  export function connect(options: { port: number, host?: string, localAddress?: string, localPort?: string, family?: number, allowHalfOpen?: boolean; }, connectionListener?: Function): Socket;
+  export function connect(port: number, host?: string, connectionListener?: Function): Socket;
+  export function connect(path: string, connectionListener?: Function): Socket;
+  export function createConnection(options: { port: number, host?: string, localAddress?: string, localPort?: string, family?: number, allowHalfOpen?: boolean; }, connectionListener?: Function): Socket;
+  export function createConnection(port: number, host?: string, connectionListener?: Function): Socket;
+  export function createConnection(path: string, connectionListener?: Function): Socket;
+  export function isIP(input: string): number;
+  export function isIPv4(input: string): boolean;
+  export function isIPv6(input: string): boolean;
+}
+
+declare module "dgram" {
+  import * as events from "events";
+
+  interface RemoteInfo {
+    address: string;
+    port: number;
+    size: number;
+  }
+
+  interface AddressInfo {
+    address: string;
+    family: string;
+    port: number;
+  }
+
+  export function createSocket(type: string, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;
+
+  interface Socket extends events.EventEmitter {
+    send(msg: Buffer | string | Array<Buffer | string>, offset: number, length: number, port: number, address: string, callback?: (error: Error, bytes: number) => void): void;
+    send(msg: Buffer | string | Array<Buffer | string>, port: number, address: string, callback?: (error: Error, bytes: number) => void): void;
+    bind(port: number, address?: string, callback?: () => void): void;
+    close(): void;
+    address(): AddressInfo;
+    setBroadcast(flag: boolean): void;
+    setMulticastTTL(ttl: number): void;
+    setMulticastLoopback(flag: boolean): void;
+    addMembership(multicastAddress: string, multicastInterface?: string): void;
+    dropMembership(multicastAddress: string, multicastInterface?: string): void;
+  }
+}
+
+declare module "fs" {
+  import * as stream from "stream";
+  import * as events from "events";
+
+  export class Stats {
+    isFile(): boolean;
+    isDirectory(): boolean;
+    isBlockDevice(): boolean;
+    isCharacterDevice(): boolean;
+    isSymbolicLink(): boolean;
+    isFIFO(): boolean;
+    isSocket(): boolean;
+    dev: number;
+    ino: number;
+    mode: number;
+    nlink: number;
+    uid: number;
+    gid: number;
+    rdev: number;
+    size: number;
+    blksize: number;
+    blocks: number;
+    atime: Date;
+    mtime: Date;
+    ctime: Date;
+    birthtime: Date;
+  }
+
+  export class FSWatcher extends events.EventEmitter {
+    close(): void;
+  }
+
+  export class ReadStream extends stream.Readable {
+    close(): void;
+    bytesRead: number;
+    path: string | Buffer;
+  }
+
+  export class WriteStream extends stream.Writable {
+    close(): void;
+    bytesWritten: number;
+    path: string | Buffer;
+  }
+
+  /**
+   * Asynchronous rename.
+   * @param oldPath
+   * @param newPath
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function rename(oldPath: string, newPath: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  /**
+   * Synchronous rename
+   * @param oldPath
+   * @param newPath
+   */
+  export function renameSync(oldPath: string, newPath: string): void;
+  export function truncate(path: string | Buffer, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function truncate(path: string | Buffer, len: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function truncateSync(path: string | Buffer, len?: number): void;
+  export function ftruncate(fd: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function ftruncate(fd: number, len: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function ftruncateSync(fd: number, len?: number): void;
+  export function chown(path: string | Buffer, uid: number, gid: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function chownSync(path: string | Buffer, uid: number, gid: number): void;
+  export function fchown(fd: number, uid: number, gid: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function fchownSync(fd: number, uid: number, gid: number): void;
+  export function lchown(path: string | Buffer, uid: number, gid: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function lchownSync(path: string | Buffer, uid: number, gid: number): void;
+  export function chmod(path: string | Buffer, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function chmod(path: string | Buffer, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function chmodSync(path: string | Buffer, mode: number): void;
+  export function chmodSync(path: string | Buffer, mode: string): void;
+  export function fchmod(fd: number, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function fchmod(fd: number, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function fchmodSync(fd: number, mode: number): void;
+  export function fchmodSync(fd: number, mode: string): void;
+  export function lchmod(path: string | Buffer, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function lchmod(path: string | Buffer, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function lchmodSync(path: string | Buffer, mode: number): void;
+  export function lchmodSync(path: string | Buffer, mode: string): void;
+  export function stat(path: string | Buffer, callback?: (err: NodeJS.ErrnoException, stats: Stats) => any): void;
+  export function lstat(path: string | Buffer, callback?: (err: NodeJS.ErrnoException, stats: Stats) => any): void;
+  export function fstat(fd: number, callback?: (err: NodeJS.ErrnoException, stats: Stats) => any): void;
+  export function statSync(path: string | Buffer): Stats;
+  export function lstatSync(path: string | Buffer): Stats;
+  export function fstatSync(fd: number): Stats;
+  export function link(srcpath: string | Buffer, dstpath: string | Buffer, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function linkSync(srcpath: string | Buffer, dstpath: string | Buffer): void;
+  export function symlink(srcpath: string | Buffer, dstpath: string | Buffer, type?: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function symlinkSync(srcpath: string | Buffer, dstpath: string | Buffer, type?: string): void;
+  export function readlink(path: string | Buffer, callback?: (err: NodeJS.ErrnoException, linkString: string) => any): void;
+  export function readlinkSync(path: string | Buffer): string;
+  export function realpath(path: string | Buffer, callback?: (err: NodeJS.ErrnoException, resolvedPath: string) => any): void;
+  export function realpath(path: string | Buffer, cache: { [path: string]: string }, callback: (err: NodeJS.ErrnoException, resolvedPath: string) => any): void;
+  export function realpathSync(path: string | Buffer, cache?: { [path: string]: string }): string;
+  /*
+   * Asynchronous unlink - deletes the file specified in {path}
+   *
+   * @param path
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function unlink(path: string | Buffer, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  /*
+   * Synchronous unlink - deletes the file specified in {path}
+   *
+   * @param path
+   */
+  export function unlinkSync(path: string | Buffer): void;
+  /*
+   * Asynchronous rmdir - removes the directory specified in {path}
+   *
+   * @param path
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function rmdir(path: string | Buffer, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  /*
+   * Synchronous rmdir - removes the directory specified in {path}
+   *
+   * @param path
+   */
+  export function rmdirSync(path: string | Buffer): void;
+  /*
+   * Asynchronous mkdir - creates the directory specified in {path}.  Parameter {mode} defaults to 0777.
+   *
+   * @param path
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function mkdir(path: string | Buffer, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  /*
+   * Asynchronous mkdir - creates the directory specified in {path}.  Parameter {mode} defaults to 0777.
+   *
+   * @param path
+   * @param mode
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function mkdir(path: string | Buffer, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  /*
+   * Asynchronous mkdir - creates the directory specified in {path}.  Parameter {mode} defaults to 0777.
+   *
+   * @param path
+   * @param mode
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function mkdir(path: string | Buffer, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  /*
+   * Synchronous mkdir - creates the directory specified in {path}.  Parameter {mode} defaults to 0777.
+   *
+   * @param path
+   * @param mode
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function mkdirSync(path: string | Buffer, mode?: number): void;
+  /*
+   * Synchronous mkdir - creates the directory specified in {path}.  Parameter {mode} defaults to 0777.
+   *
+   * @param path
+   * @param mode
+   * @param callback No arguments other than a possible exception are given to the completion callback.
+   */
+  export function mkdirSync(path: string | Buffer, mode?: string): void;
+  /*
+   * Asynchronous mkdtemp - Creates a unique temporary directory. Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
+   *
+   * @param prefix
+   * @param callback The created folder path is passed as a string to the callback's second parameter.
+   */
+  export function mkdtemp(prefix: string, callback?: (err: NodeJS.ErrnoException, folder: string) => void): void;
+  /*
+   * Synchronous mkdtemp - Creates a unique temporary directory. Generates six random characters to be appended behind a required prefix to create a unique temporary directory.
+   *
+   * @param prefix
+   * @returns Returns the created folder path.
+   */
+  export function mkdtempSync(prefix: string): string;
+  export function readdir(path: string | Buffer, callback?: (err: NodeJS.ErrnoException, files: string[]) => void): void;
+  export function readdirSync(path: string | Buffer): string[];
+  export function close(fd: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function closeSync(fd: number): void;
+  export function open(path: string | Buffer, flags: string, callback?: (err: NodeJS.ErrnoException, fd: number) => any): void;
+  export function open(path: string | Buffer, flags: string, mode: number, callback?: (err: NodeJS.ErrnoException, fd: number) => any): void;
+  export function open(path: string | Buffer, flags: string, mode: string, callback?: (err: NodeJS.ErrnoException, fd: number) => any): void;
+  export function openSync(path: string | Buffer, flags: string, mode?: number): number;
+  export function openSync(path: string | Buffer, flags: string, mode?: string): number;
+  export function utimes(path: string | Buffer, atime: number, mtime: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function utimes(path: string | Buffer, atime: Date, mtime: Date, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function utimesSync(path: string | Buffer, atime: number, mtime: number): void;
+  export function utimesSync(path: string | Buffer, atime: Date, mtime: Date): void;
+  export function futimes(fd: number, atime: number, mtime: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function futimes(fd: number, atime: Date, mtime: Date, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function futimesSync(fd: number, atime: number, mtime: number): void;
+  export function futimesSync(fd: number, atime: Date, mtime: Date): void;
+  export function fsync(fd: number, callback?: (err?: NodeJS.ErrnoException) => void): void;
+  export function fsyncSync(fd: number): void;
+  export function write(fd: number, buffer: Buffer, offset: number, length: number, position: number, callback?: (err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void): void;
+  export function write(fd: number, buffer: Buffer, offset: number, length: number, callback?: (err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void): void;
+  export function write(fd: number, data: any, callback?: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
+  export function write(fd: number, data: any, offset: number, callback?: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
+  export function write(fd: number, data: any, offset: number, encoding: string, callback?: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
+  export function writeSync(fd: number, buffer: Buffer, offset: number, length: number, position?: number): number;
+  export function writeSync(fd: number, data: any, position?: number, enconding?: string): number;
+  export function read(fd: number, buffer: Buffer, offset: number, length: number, position: number, callback?: (err: NodeJS.ErrnoException, bytesRead: number, buffer: Buffer) => void): void;
+  export function readSync(fd: number, buffer: Buffer, offset: number, length: number, position: number): number;
+  /*
+   * Asynchronous readFile - Asynchronously reads the entire contents of a file.
+   *
+   * @param fileName
+   * @param encoding
+   * @param callback - The callback is passed two arguments (err, data), where data is the contents of the file.
+   */
+  export function readFile(filename: string, encoding: string, callback: (err: NodeJS.ErrnoException, data: string) => void): void;
+  /*
+   * Asynchronous readFile - Asynchronously reads the entire contents of a file.
+   *
+   * @param fileName
+   * @param options An object with optional {encoding} and {flag} properties.  If {encoding} is specified, readFile returns a string; otherwise it returns a Buffer.
+   * @param callback - The callback is passed two arguments (err, data), where data is the contents of the file.
+   */
+  export function readFile(filename: string, options: { encoding: string; flag?: string; }, callback: (err: NodeJS.ErrnoException, data: string) => void): void;
+  /*
+   * Asynchronous readFile - Asynchronously reads the entire contents of a file.
+   *
+   * @param fileName
+   * @param options An object with optional {encoding} and {flag} properties.  If {encoding} is specified, readFile returns a string; otherwise it returns a Buffer.
+   * @param callback - The callback is passed two arguments (err, data), where data is the contents of the file.
+   */
+  export function readFile(filename: string, options: { flag?: string; }, callback: (err: NodeJS.ErrnoException, data: Buffer) => void): void;
+  /*
+   * Asynchronous readFile - Asynchronously reads the entire contents of a file.
+   *
+   * @param fileName
+   * @param callback - The callback is passed two arguments (err, data), where data is the contents of the file.
+   */
+  export function readFile(filename: string, callback: (err: NodeJS.ErrnoException, data: Buffer) => void): void;
+  /*
+   * Synchronous readFile - Synchronously reads the entire contents of a file.
+   *
+   * @param fileName
+   * @param encoding
+   */
+  export function readFileSync(filename: string, encoding: string): string;
+  /*
+   * Synchronous readFile - Synchronously reads the entire contents of a file.
+   *
+   * @param fileName
+   * @param options An object with optional {encoding} and {flag} properties.  If {encoding} is specified, readFileSync returns a string; otherwise it returns a Buffer.
+   */
+  export function readFileSync(filename: string, options: { encoding: string; flag?: string; }): string;
+  /*
+   * Synchronous readFile - Synchronously reads the entire contents of a file.
+   *
+   * @param fileName
+   * @param options An object with optional {encoding} and {flag} properties.  If {encoding} is specified, readFileSync returns a string; otherwise it returns a Buffer.
+   */
+  export function readFileSync(filename: string, options?: { flag?: string; }): Buffer;
+  export function writeFile(filename: string, data: any, callback?: (err: NodeJS.ErrnoException) => void): void;
+  export function writeFile(filename: string, data: any, options: { encoding?: string; mode?: number; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;
+  export function writeFile(filename: string, data: any, options: { encoding?: string; mode?: string; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;
+  export function writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number; flag?: string; }): void;
+  export function writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: string; flag?: string; }): void;
+  export function appendFile(filename: string, data: any, options: { encoding?: string; mode?: number; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;
+  export function appendFile(filename: string, data: any, options: { encoding?: string; mode?: string; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;
+  export function appendFile(filename: string, data: any, callback?: (err: NodeJS.ErrnoException) => void): void;
+  export function appendFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number; flag?: string; }): void;
+  export function appendFileSync(filename: string, data: any, options?: { encoding?: string; mode?: string; flag?: string; }): void;
+  export function watchFile(filename: string, listener: (curr: Stats, prev: Stats) => void): void;
+  export function watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: Stats, prev: Stats) => void): void;
+  export function unwatchFile(filename: string, listener?: (curr: Stats, prev: Stats) => void): void;
+  export function watch(filename: string, listener?: (event: string, filename: string) => any): FSWatcher;
+  export function watch(filename: string, options: { persistent?: boolean; }, listener?: (event: string, filename: string) => any): FSWatcher;
+  export function exists(path: string | Buffer, callback?: (exists: boolean) => void): void;
+  export function existsSync(path: string | Buffer): boolean;
+  /** Constant for fs.access(). File is visible to the calling process. */
+  export var F_OK: number;
+  /** Constant for fs.access(). File can be read by the calling process. */
+  export var R_OK: number;
+  /** Constant for fs.access(). File can be written by the calling process. */
+  export var W_OK: number;
+  /** Constant for fs.access(). File can be executed by the calling process. */
+  export var X_OK: number;
+  /** Tests a user's permissions for the file specified by path. */
+  export function access(path: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
+  export function access(path: string | Buffer, mode: number, callback: (err: NodeJS.ErrnoException) => void): void;
+  /** Synchronous version of fs.access. This throws if any accessibility checks fail, and does nothing otherwise. */
+  export function accessSync(path: string | Buffer, mode?: number): void;
+  export function createReadStream(path: string | Buffer, options?: {
+    flags?: string;
+    encoding?: string;
+    fd?: number;
+    mode?: number;
+    autoClose?: boolean;
+  }): ReadStream;
+  export function createWriteStream(path: string | Buffer, options?: {
+    flags?: string;
+    encoding?: string;
+    fd?: number;
+    mode?: number;
+  }): WriteStream;
+}
+
+declare module "path" {
+
+  /**
+   * A parsed path object generated by path.parse() or consumed by path.format().
+   */
+  export interface ParsedPath {
+    /**
+     * The root of the path such as '/' or 'c:\'
+     */
+    root: string;
+    /**
+     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
+     */
+    dir: string;
+    /**
+     * The file name including extension (if any) such as 'index.html'
+     */
+    base: string;
+    /**
+     * The file extension (if any) such as '.html'
+     */
+    ext: string;
+    /**
+     * The file name without extension (if any) such as 'index'
+     */
+    name: string;
+  }
+
+  /**
+   * Normalize a string path, reducing '..' and '.' parts.
+   * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
+   *
+   * @param p string path to normalize.
+   */
+  export function normalize(p: string): string;
+  /**
+   * Join all arguments together and normalize the resulting path.
+   * Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.
+   *
+   * @param paths string paths to join.
+   */
+  export function join(...paths: string[]): string;
+  /**
+   * The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.
+   *
+   * Starting from leftmost {from} paramter, resolves {to} to an absolute path.
+   *
+   * If {to} isn't already absolute, {from} arguments are prepended in right to left order, until an absolute path is found. If after using all {from} paths still no absolute path is found, the current working directory is used as well. The resulting path is normalized, and trailing slashes are removed unless the path gets resolved to the root directory.
+   *
+   * @param pathSegments string paths to join.  Non-string arguments are ignored.
+   */
+  export function resolve(...pathSegments: string[]): string;
+  /**
+   * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.
+   *
+   * @param path path to test.
+   */
+  export function isAbsolute(path: string): boolean;
+  /**
+   * Solve the relative path from {from} to {to}.
+   * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.
+   *
+   * @param from
+   * @param to
+   */
+  export function relative(from: string, to: string): string;
+  /**
+   * Return the directory name of a path. Similar to the Unix dirname command.
+   *
+   * @param p the path to evaluate.
+   */
+  export function dirname(p: string): string;
+  /**
+   * Return the last portion of a path. Similar to the Unix basename command.
+   * Often used to extract the file name from a fully qualified path.
+   *
+   * @param p the path to evaluate.
+   * @param ext optionally, an extension to remove from the result.
+   */
+  export function basename(p: string, ext?: string): string;
+  /**
+   * Return the extension of the path, from the last '.' to end of string in the last portion of the path.
+   * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string
+   *
+   * @param p the path to evaluate.
+   */
+  export function extname(p: string): string;
+  /**
+   * The platform-specific file separator. '\\' or '/'.
+   */
+  export var sep: string;
+  /**
+   * The platform-specific file delimiter. ';' or ':'.
+   */
+  export var delimiter: string;
+  /**
+   * Returns an object from a path string - the opposite of format().
+   *
+   * @param pathString path to evaluate.
+   */
+  export function parse(pathString: string): ParsedPath;
+  /**
+   * Returns a path string from an object - the opposite of parse().
+   *
+   * @param pathString path to evaluate.
+   */
+  export function format(pathObject: ParsedPath): string;
+
+  export module posix {
+    export function normalize(p: string): string;
+    export function join(...paths: string[]): string;
+    export function resolve(...pathSegments: string[]): string;
+    export function isAbsolute(p: string): boolean;
+    export function relative(from: string, to: string): string;
+    export function dirname(p: string): string;
+    export function basename(p: string, ext?: string): string;
+    export function extname(p: string): string;
+    export var sep: string;
+    export var delimiter: string;
+    export function parse(p: string): ParsedPath;
+    export function format(pP: ParsedPath): string;
+  }
+
+  export module win32 {
+    export function normalize(p: string): string;
+    export function join(...paths: string[]): string;
+    export function resolve(...pathSegments: string[]): string;
+    export function isAbsolute(p: string): boolean;
+    export function relative(from: string, to: string): string;
+    export function dirname(p: string): string;
+    export function basename(p: string, ext?: string): string;
+    export function extname(p: string): string;
+    export var sep: string;
+    export var delimiter: string;
+    export function parse(p: string): ParsedPath;
+    export function format(pP: ParsedPath): string;
+  }
+}
+
+declare module "string_decoder" {
+  export interface NodeStringDecoder {
+    write(buffer: Buffer): string;
+    detectIncompleteChar(buffer: Buffer): number;
+  }
+  export var StringDecoder: {
+    new (encoding: string): NodeStringDecoder;
+  };
+}
+
+declare module "tls" {
+  import * as crypto from "crypto";
+  import * as net from "net";
+  import * as stream from "stream";
+
+  var CLIENT_RENEG_LIMIT: number;
+  var CLIENT_RENEG_WINDOW: number;
+
+  export interface TlsOptions {
+    host?: string;
+    port?: number | string;
+    pfx?: string | Buffer;
+    key?: string | Buffer;
+    passphrase?: string;
+    cert?: string | Buffer;
+    ca?: string | Buffer | Array<string | Buffer>;
+    crl?: string | string[];
+    ciphers?: string;
+    honorCipherOrder?: any;
+    requestCert?: boolean;
+    rejectUnauthorized?: boolean;
+    NPNProtocols?: Array<string | Buffer>;
+    SNICallback?: (servername: string) => any;
+  }
+
+  export interface ConnectionOptions {
+    host?: string;
+    port?: number | string;
+    socket?: net.Socket;
+    pfx?: string | Buffer;
+    key?: string | Buffer;
+    passphrase?: string;
+    cert?: string | Buffer;
+    ca?: string | Buffer | Array<string | Buffer>;
+    rejectUnauthorized?: boolean;
+    NPNProtocols?: Array<string | Buffer>;
+    servername?: string;
+  }
+
+  export interface Server extends net.Server {
+    close(): Server;
+    address(): { port: number; family: string; address: string; };
+    addContext(hostName: string, credentials: {
+      key: string;
+      cert: string;
+      ca: string;
+    }): void;
+    maxConnections: number;
+    connections: number;
+  }
+
+  export interface ClearTextStream extends stream.Duplex {
+    authorized: boolean;
+    authorizationError: Error;
+    getPeerCertificate(): any;
+    getCipher: {
+      name: string;
+      version: string;
+    };
+    address: {
+      port: number;
+      family: string;
+      address: string;
+    };
+    remoteAddress: string;
+    remotePort: number;
+  }
+
+  export interface SecurePair {
+    encrypted: any;
+    cleartext: any;
+  }
+
+  export interface SecureContextOptions {
+    pfx?: string | Buffer;
+    key?: string | string[] | Buffer | Array<{ pem: string, passphrase: string }>;
+    passphrase?: string;
+    cert?: string | Buffer;
+    ca?: string | Buffer;
+    crl?: string | string[];
+    ciphers?: string;
+    honorCipherOrder?: boolean;
+  }
+
+  export interface SecureContext {
+    context: any;
+  }
+
+  export function createServer(options: TlsOptions, secureConnectionListener?: (cleartextStream: ClearTextStream) => void): Server;
+  export function connect(options: TlsOptions, secureConnectionListener?: () => void): ClearTextStream;
+  export function connect(port: number, host?: string, options?: ConnectionOptions, secureConnectListener?: () => void): ClearTextStream;
+  export function connect(port: number, options?: ConnectionOptions, secureConnectListener?: () => void): ClearTextStream;
+  export function createSecurePair(credentials?: crypto.Credentials, isServer?: boolean, requestCert?: boolean, rejectUnauthorized?: boolean): SecurePair;
+  export function createSecureContext(details: SecureContextOptions): SecureContext;
+}
+
+declare module "crypto" {
+  export interface CredentialDetails {
+    pfx: string;
+    key: string;
+    passphrase: string;
+    cert: string;
+    ca: string | string[];
+    crl: string | string[];
+    ciphers: string;
+  }
+  export interface Credentials { context?: any; }
+  export function createCredentials(details: CredentialDetails): Credentials;
+  export function createHash(algorithm: string): Hash;
+  export function createHmac(algorithm: string, key: string): Hmac;
+  export function createHmac(algorithm: string, key: Buffer): Hmac;
+  export interface Hash {
+    update(data: any, input_encoding?: string): Hash;
+    digest(encoding: 'buffer'): Buffer;
+    digest(encoding: string): any;
+    digest(): Buffer;
+  }
+  export interface Hmac extends NodeJS.ReadWriteStream {
+    update(data: any, input_encoding?: string): Hmac;
+    digest(encoding: 'buffer'): Buffer;
+    digest(encoding: string): any;
+    digest(): Buffer;
+  }
+  export function createCipher(algorithm: string, password: any): Cipher;
+  export function createCipheriv(algorithm: string, key: any, iv: any): Cipher;
+  export interface Cipher extends NodeJS.ReadWriteStream {
+    update(data: Buffer): Buffer;
+    update(data: string, input_encoding: "utf8" | "ascii" | "binary"): Buffer;
+    update(data: Buffer, input_encoding: any, output_encoding: "binary" | "base64" | "hex"): string;
+    update(data: string, input_encoding: "utf8" | "ascii" | "binary", output_encoding: "binary" | "base64" | "hex"): string;
+    final(): Buffer;
+    final(output_encoding: string): string;
+    setAutoPadding(auto_padding: boolean): void;
+    getAuthTag(): Buffer;
+  }
+  export function createDecipher(algorithm: string, password: any): Decipher;
+  export function createDecipheriv(algorithm: string, key: any, iv: any): Decipher;
+  export interface Decipher extends NodeJS.ReadWriteStream {
+    update(data: Buffer): Buffer;
+    update(data: string, input_encoding: "binary" | "base64" | "hex"): Buffer;
+    update(data: Buffer, input_encoding: any, output_encoding: "utf8" | "ascii" | "binary"): string;
+    update(data: string, input_encoding: "binary" | "base64" | "hex", output_encoding: "utf8" | "ascii" | "binary"): string;
+    final(): Buffer;
+    final(output_encoding: string): string;
+    setAutoPadding(auto_padding: boolean): void;
+    setAuthTag(tag: Buffer): void;
+  }
+  export function createSign(algorithm: string): Signer;
+  export interface Signer extends NodeJS.WritableStream {
+    update(data: any): void;
+    sign(private_key: string, output_format: string): string;
+  }
+  export function createVerify(algorith: string): Verify;
+  export interface Verify extends NodeJS.WritableStream {
+    update(data: any): void;
+    verify(object: string, signature: string, signature_format?: string): boolean;
+  }
+  export function createDiffieHellman(prime_length: number): DiffieHellman;
+  export function createDiffieHellman(prime: number, encoding?: string): DiffieHellman;
+  export interface DiffieHellman {
+    generateKeys(encoding?: string): string;
+    computeSecret(other_public_key: string, input_encoding?: string, output_encoding?: string): string;
+    getPrime(encoding?: string): string;
+    getGenerator(encoding: string): string;
+    getPublicKey(encoding?: string): string;
+    getPrivateKey(encoding?: string): string;
+    setPublicKey(public_key: string, encoding?: string): void;
+    setPrivateKey(public_key: string, encoding?: string): void;
+  }
+  export function getDiffieHellman(group_name: string): DiffieHellman;
+  export function pbkdf2(password: string | Buffer, salt: string | Buffer, iterations: number, keylen: number, callback: (err: Error, derivedKey: Buffer) => any): void;
+  export function pbkdf2(password: string | Buffer, salt: string | Buffer, iterations: number, keylen: number, digest: string, callback: (err: Error, derivedKey: Buffer) => any): void;
+  export function pbkdf2Sync(password: string | Buffer, salt: string | Buffer, iterations: number, keylen: number): Buffer;
+  export function pbkdf2Sync(password: string | Buffer, salt: string | Buffer, iterations: number, keylen: number, digest: string): Buffer;
+  export function randomBytes(size: number): Buffer;
+  export function randomBytes(size: number, callback: (err: Error, buf: Buffer) => void): void;
+  export function pseudoRandomBytes(size: number): Buffer;
+  export function pseudoRandomBytes(size: number, callback: (err: Error, buf: Buffer) => void): void;
+  export interface RsaPublicKey {
+    key: string;
+    padding?: any;
+  }
+  export interface RsaPrivateKey {
+    key: string;
+    passphrase?: string,
+    padding?: any;
+  }
+  export function publicEncrypt(public_key: string | RsaPublicKey, buffer: Buffer): Buffer
+  export function privateDecrypt(private_key: string | RsaPrivateKey, buffer: Buffer): Buffer
+}
+
+declare module "stream" {
+  import * as events from "events";
+
+  export class Stream extends events.EventEmitter {
+    pipe<T extends NodeJS.WritableStream>(destination: T, options?: { end?: boolean; }): T;
+  }
+
+  export interface ReadableOptions {
+    highWaterMark?: number;
+    encoding?: string;
+    objectMode?: boolean;
+  }
+
+  export class Readable extends events.EventEmitter implements NodeJS.ReadableStream {
+    readable: boolean;
+    constructor(opts?: ReadableOptions);
+    _read(size: number): void;
+    read(size?: number): any;
+    setEncoding(encoding: string): void;
+    pause(): void;
+    isPaused(): boolean;
+    resume(): void;
+    pipe<T extends NodeJS.WritableStream>(destination: T, options?: { end?: boolean; }): T;
+    unpipe<T extends NodeJS.WritableStream>(destination?: T): void;
+    unshift(chunk: any): void;
+    wrap(oldStream: NodeJS.ReadableStream): NodeJS.ReadableStream;
+    push(chunk: any, encoding?: string): boolean;
+  }
+
+  export interface WritableOptions {
+    highWaterMark?: number;
+    decodeStrings?: boolean;
+    objectMode?: boolean;
+  }
+
+  export class Writable extends events.EventEmitter implements NodeJS.WritableStream {
+    writable: boolean;
+    constructor(opts?: WritableOptions);
+    _write(chunk: any, encoding: string, callback: Function): void;
+    write(chunk: any, cb?: Function): boolean;
+    write(chunk: any, encoding?: string, cb?: Function): boolean;
+    end(): void;
+    end(chunk: any, cb?: Function): void;
+    end(chunk: any, encoding?: string, cb?: Function): void;
+  }
+
+  export interface DuplexOptions extends ReadableOptions, WritableOptions {
+    allowHalfOpen?: boolean;
+  }
+
+  // Note: Duplex extends both Readable and Writable.
+  export class Duplex extends Readable implements NodeJS.ReadWriteStream {
+    writable: boolean;
+    constructor(opts?: DuplexOptions);
+    _write(chunk: any, encoding: string, callback: Function): void;
+    write(chunk: any, cb?: Function): boolean;
+    write(chunk: any, encoding?: string, cb?: Function): boolean;
+    end(): void;
+    end(chunk: any, cb?: Function): void;
+    end(chunk: any, encoding?: string, cb?: Function): void;
+  }
+
+  export interface TransformOptions extends ReadableOptions, WritableOptions { }
+
+  // Note: Transform lacks the _read and _write methods of Readable/Writable.
+  export class Transform extends events.EventEmitter implements NodeJS.ReadWriteStream {
+    readable: boolean;
+    writable: boolean;
+    constructor(opts?: TransformOptions);
+    _transform(chunk: any, encoding: string, callback: Function): void;
+    _flush(callback: Function): void;
+    read(size?: number): any;
+    setEncoding(encoding: string): void;
+    pause(): void;
+    isPaused(): boolean;
+    resume(): void;
+    pipe<T extends NodeJS.WritableStream>(destination: T, options?: { end?: boolean; }): T;
+    unpipe<T extends NodeJS.WritableStream>(destination?: T): void;
+    unshift(chunk: any): void;
+    wrap(oldStream: NodeJS.ReadableStream): NodeJS.ReadableStream;
+    push(chunk: any, encoding?: string): boolean;
+    write(chunk: any, cb?: Function): boolean;
+    write(chunk: any, encoding?: string, cb?: Function): boolean;
+    end(): void;
+    end(chunk: any, cb?: Function): void;
+    end(chunk: any, encoding?: string, cb?: Function): void;
+  }
+
+  export class PassThrough extends Transform { }
+}
+
+declare module "util" {
+  export interface InspectOptions {
+    showHidden?: boolean;
+    depth?: number | null;
+    colors?: boolean;
+    customInspect?: boolean;
+  }
+
+  export function format(format: any, ...param: any[]): string;
+  export function debug(string: string): void;
+  export function error(...param: any[]): void;
+  export function puts(...param: any[]): void;
+  export function print(...param: any[]): void;
+  export function log(string: string): void;
+  export function inspect(object: any, showHidden?: boolean, depth?: number | null, color?: boolean): string;
+  export function inspect(object: any, options: InspectOptions): string;
+  export function isArray(object: any): boolean;
+  export function isRegExp(object: any): boolean;
+  export function isDate(object: any): boolean;
+  export function isError(object: any): boolean;
+  export function inherits(constructor: any, superConstructor: any): void;
+  export function debuglog(key: string): (msg: string, ...param: any[]) => void;
+}
+
+declare module "assert" {
+  function internal(value: any, message?: string): void;
+  namespace internal {
+    export class AssertionError implements Error {
+      name: string;
+      message: string;
+      actual: any;
+      expected: any;
+      operator: string;
+      generatedMessage: boolean;
+
+      constructor(options?: {
+        message?: string; actual?: any; expected?: any;
+        operator?: string; stackStartFunction?: Function
+      });
+    }
+
+    export function fail(actual?: any, expected?: any, message?: string, operator?: string): void;
+    export function ok(value: any, message?: string): void;
+    export function equal(actual: any, expected: any, message?: string): void;
+    export function notEqual(actual: any, expected: any, message?: string): void;
+    export function deepEqual(actual: any, expected: any, message?: string): void;
+    export function notDeepEqual(acutal: any, expected: any, message?: string): void;
+    export function strictEqual(actual: any, expected: any, message?: string): void;
+    export function notStrictEqual(actual: any, expected: any, message?: string): void;
+    export function deepStrictEqual(actual: any, expected: any, message?: string): void;
+    export function notDeepStrictEqual(actual: any, expected: any, message?: string): void;
+    export var throws: {
+      (block: Function, message?: string): void;
+      (block: Function, error: Function, message?: string): void;
+      (block: Function, error: RegExp, message?: string): void;
+      (block: Function, error: (err: any) => boolean, message?: string): void;
+    };
+
+    export var doesNotThrow: {
+      (block: Function, message?: string): void;
+      (block: Function, error: Function, message?: string): void;
+      (block: Function, error: RegExp, message?: string): void;
+      (block: Function, error: (err: any) => boolean, message?: string): void;
+    };
+
+    export function ifError(value: any): void;
+  }
+
+  export = internal;
+}
+
+declare module "tty" {
+  import * as net from "net";
+
+  export function isatty(fd: number): boolean;
+  export interface ReadStream extends net.Socket {
+    isRaw: boolean;
+    setRawMode(mode: boolean): void;
+    isTTY: boolean;
+  }
+  export interface WriteStream extends net.Socket {
+    columns: number;
+    rows: number;
+    isTTY: boolean;
+  }
+}
+
+declare module "domain" {
+  import * as events from "events";
+
+  export class Domain extends events.EventEmitter implements NodeJS.Domain {
+    run(fn: Function): void;
+    add(emitter: events.EventEmitter): void;
+    remove(emitter: events.EventEmitter): void;
+    bind(cb: (err: Error, data: any) => any): any;
+    intercept(cb: (data: any) => any): any;
+    dispose(): void;
+  }
+
+  export function create(): Domain;
+}
+
+declare module "constants" {
+  export var E2BIG: number;
+  export var EACCES: number;
+  export var EADDRINUSE: number;
+  export var EADDRNOTAVAIL: number;
+  export var EAFNOSUPPORT: number;
+  export var EAGAIN: number;
+  export var EALREADY: number;
+  export var EBADF: number;
+  export var EBADMSG: number;
+  export var EBUSY: number;
+  export var ECANCELED: number;
+  export var ECHILD: number;
+  export var ECONNABORTED: number;
+  export var ECONNREFUSED: number;
+  export var ECONNRESET: number;
+  export var EDEADLK: number;
+  export var EDESTADDRREQ: number;
+  export var EDOM: number;
+  export var EEXIST: number;
+  export var EFAULT: number;
+  export var EFBIG: number;
+  export var EHOSTUNREACH: number;
+  export var EIDRM: number;
+  export var EILSEQ: number;
+  export var EINPROGRESS: number;
+  export var EINTR: number;
+  export var EINVAL: number;
+  export var EIO: number;
+  export var EISCONN: number;
+  export var EISDIR: number;
+  export var ELOOP: number;
+  export var EMFILE: number;
+  export var EMLINK: number;
+  export var EMSGSIZE: number;
+  export var ENAMETOOLONG: number;
+  export var ENETDOWN: number;
+  export var ENETRESET: number;
+  export var ENETUNREACH: number;
+  export var ENFILE: number;
+  export var ENOBUFS: number;
+  export var ENODATA: number;
+  export var ENODEV: number;
+  export var ENOENT: number;
+  export var ENOEXEC: number;
+  export var ENOLCK: number;
+  export var ENOLINK: number;
+  export var ENOMEM: number;
+  export var ENOMSG: number;
+  export var ENOPROTOOPT: number;
+  export var ENOSPC: number;
+  export var ENOSR: number;
+  export var ENOSTR: number;
+  export var ENOSYS: number;
+  export var ENOTCONN: number;
+  export var ENOTDIR: number;
+  export var ENOTEMPTY: number;
+  export var ENOTSOCK: number;
+  export var ENOTSUP: number;
+  export var ENOTTY: number;
+  export var ENXIO: number;
+  export var EOPNOTSUPP: number;
+  export var EOVERFLOW: number;
+  export var EPERM: number;
+  export var EPIPE: number;
+  export var EPROTO: number;
+  export var EPROTONOSUPPORT: number;
+  export var EPROTOTYPE: number;
+  export var ERANGE: number;
+  export var EROFS: number;
+  export var ESPIPE: number;
+  export var ESRCH: number;
+  export var ETIME: number;
+  export var ETIMEDOUT: number;
+  export var ETXTBSY: number;
+  export var EWOULDBLOCK: number;
+  export var EXDEV: number;
+  export var WSAEINTR: number;
+  export var WSAEBADF: number;
+  export var WSAEACCES: number;
+  export var WSAEFAULT: number;
+  export var WSAEINVAL: number;
+  export var WSAEMFILE: number;
+  export var WSAEWOULDBLOCK: number;
+  export var WSAEINPROGRESS: number;
+  export var WSAEALREADY: number;
+  export var WSAENOTSOCK: number;
+  export var WSAEDESTADDRREQ: number;
+  export var WSAEMSGSIZE: number;
+  export var WSAEPROTOTYPE: number;
+  export var WSAENOPROTOOPT: number;
+  export var WSAEPROTONOSUPPORT: number;
+  export var WSAESOCKTNOSUPPORT: number;
+  export var WSAEOPNOTSUPP: number;
+  export var WSAEPFNOSUPPORT: number;
+  export var WSAEAFNOSUPPORT: number;
+  export var WSAEADDRINUSE: number;
+  export var WSAEADDRNOTAVAIL: number;
+  export var WSAENETDOWN: number;
+  export var WSAENETUNREACH: number;
+  export var WSAENETRESET: number;
+  export var WSAECONNABORTED: number;
+  export var WSAECONNRESET: number;
+  export var WSAENOBUFS: number;
+  export var WSAEISCONN: number;
+  export var WSAENOTCONN: number;
+  export var WSAESHUTDOWN: number;
+  export var WSAETOOMANYREFS: number;
+  export var WSAETIMEDOUT: number;
+  export var WSAECONNREFUSED: number;
+  export var WSAELOOP: number;
+  export var WSAENAMETOOLONG: number;
+  export var WSAEHOSTDOWN: number;
+  export var WSAEHOSTUNREACH: number;
+  export var WSAENOTEMPTY: number;
+  export var WSAEPROCLIM: number;
+  export var WSAEUSERS: number;
+  export var WSAEDQUOT: number;
+  export var WSAESTALE: number;
+  export var WSAEREMOTE: number;
+  export var WSASYSNOTREADY: number;
+  export var WSAVERNOTSUPPORTED: number;
+  export var WSANOTINITIALISED: number;
+  export var WSAEDISCON: number;
+  export var WSAENOMORE: number;
+  export var WSAECANCELLED: number;
+  export var WSAEINVALIDPROCTABLE: number;
+  export var WSAEINVALIDPROVIDER: number;
+  export var WSAEPROVIDERFAILEDINIT: number;
+  export var WSASYSCALLFAILURE: number;
+  export var WSASERVICE_NOT_FOUND: number;
+  export var WSATYPE_NOT_FOUND: number;
+  export var WSA_E_NO_MORE: number;
+  export var WSA_E_CANCELLED: number;
+  export var WSAEREFUSED: number;
+  export var SIGHUP: number;
+  export var SIGINT: number;
+  export var SIGILL: number;
+  export var SIGABRT: number;
+  export var SIGFPE: number;
+  export var SIGKILL: number;
+  export var SIGSEGV: number;
+  export var SIGTERM: number;
+  export var SIGBREAK: number;
+  export var SIGWINCH: number;
+  export var SSL_OP_ALL: number;
+  export var SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: number;
+  export var SSL_OP_CIPHER_SERVER_PREFERENCE: number;
+  export var SSL_OP_CISCO_ANYCONNECT: number;
+  export var SSL_OP_COOKIE_EXCHANGE: number;
+  export var SSL_OP_CRYPTOPRO_TLSEXT_BUG: number;
+  export var SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: number;
+  export var SSL_OP_EPHEMERAL_RSA: number;
+  export var SSL_OP_LEGACY_SERVER_CONNECT: number;
+  export var SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: number;
+  export var SSL_OP_MICROSOFT_SESS_ID_BUG: number;
+  export var SSL_OP_MSIE_SSLV2_RSA_PADDING: number;
+  export var SSL_OP_NETSCAPE_CA_DN_BUG: number;
+  export var SSL_OP_NETSCAPE_CHALLENGE_BUG: number;
+  export var SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: number;
+  export var SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: number;
+  export var SSL_OP_NO_COMPRESSION: number;
+  export var SSL_OP_NO_QUERY_MTU: number;
+  export var SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: number;
+  export var SSL_OP_NO_SSLv2: number;
+  export var SSL_OP_NO_SSLv3: number;
+  export var SSL_OP_NO_TICKET: number;
+  export var SSL_OP_NO_TLSv1: number;
+  export var SSL_OP_NO_TLSv1_1: number;
+  export var SSL_OP_NO_TLSv1_2: number;
+  export var SSL_OP_PKCS1_CHECK_1: number;
+  export var SSL_OP_PKCS1_CHECK_2: number;
+  export var SSL_OP_SINGLE_DH_USE: number;
+  export var SSL_OP_SINGLE_ECDH_USE: number;
+  export var SSL_OP_SSLEAY_080_CLIENT_DH_BUG: number;
+  export var SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: number;
+  export var SSL_OP_TLS_BLOCK_PADDING_BUG: number;
+  export var SSL_OP_TLS_D5_BUG: number;
+  export var SSL_OP_TLS_ROLLBACK_BUG: number;
+  export var ENGINE_METHOD_DSA: number;
+  export var ENGINE_METHOD_DH: number;
+  export var ENGINE_METHOD_RAND: number;
+  export var ENGINE_METHOD_ECDH: number;
+  export var ENGINE_METHOD_ECDSA: number;
+  export var ENGINE_METHOD_CIPHERS: number;
+  export var ENGINE_METHOD_DIGESTS: number;
+  export var ENGINE_METHOD_STORE: number;
+  export var ENGINE_METHOD_PKEY_METHS: number;
+  export var ENGINE_METHOD_PKEY_ASN1_METHS: number;
+  export var ENGINE_METHOD_ALL: number;
+  export var ENGINE_METHOD_NONE: number;
+  export var DH_CHECK_P_NOT_SAFE_PRIME: number;
+  export var DH_CHECK_P_NOT_PRIME: number;
+  export var DH_UNABLE_TO_CHECK_GENERATOR: number;
+  export var DH_NOT_SUITABLE_GENERATOR: number;
+  export var NPN_ENABLED: number;
+  export var RSA_PKCS1_PADDING: number;
+  export var RSA_SSLV23_PADDING: number;
+  export var RSA_NO_PADDING: number;
+  export var RSA_PKCS1_OAEP_PADDING: number;
+  export var RSA_X931_PADDING: number;
+  export var RSA_PKCS1_PSS_PADDING: number;
+  export var POINT_CONVERSION_COMPRESSED: number;
+  export var POINT_CONVERSION_UNCOMPRESSED: number;
+  export var POINT_CONVERSION_HYBRID: number;
+  export var O_RDONLY: number;
+  export var O_WRONLY: number;
+  export var O_RDWR: number;
+  export var S_IFMT: number;
+  export var S_IFREG: number;
+  export var S_IFDIR: number;
+  export var S_IFCHR: number;
+  export var S_IFLNK: number;
+  export var O_CREAT: number;
+  export var O_EXCL: number;
+  export var O_TRUNC: number;
+  export var O_APPEND: number;
+  export var F_OK: number;
+  export var R_OK: number;
+  export var W_OK: number;
+  export var X_OK: number;
+  export var UV_UDP_REUSEADDR: number;
+}
+
+declare module "module" {
+  export = NodeModule;
+}
diff --git a/typings/globals/node/typings.json b/typings/globals/node/typings.json
new file mode 100644
index 0000000..18457a8
--- /dev/null
+++ b/typings/globals/node/typings.json
@@ -0,0 +1,13 @@
+{
+  "resolution": "main",
+  "tree": {
+    "src": "https://raw.githubusercontent.com/types/env-node/374f42213af406d9f76e9181da371df3f9e93903/6.0/typings.json",
+    "raw": "registry:env/node#6.0.0+20161019193037",
+    "version": "6",
+    "files": [
+      "node.d.ts"
+    ],
+    "name": "node",
+    "type": "typings"
+  }
+}
diff --git a/typings/index.d.ts b/typings/index.d.ts
new file mode 100644
index 0000000..f13be9c
--- /dev/null
+++ b/typings/index.d.ts
@@ -0,0 +1,3 @@
+/// <reference path="globals/meteor/index.d.ts" />
+/// <reference path="globals/node/index.d.ts" />
+/// <reference path="modules/chai-spies/index.d.ts" />
diff --git a/typings/modules/chai-spies/index.d.ts b/typings/modules/chai-spies/index.d.ts
new file mode 100644
index 0000000..c087d80
--- /dev/null
+++ b/typings/modules/chai-spies/index.d.ts
@@ -0,0 +1,194 @@
+// Generated by typings
+// Source: https://raw.githubusercontent.com/whenther/typed-chai-spies/d5dbba153d3995984edf74cf1562b9eb8436841b/index.d.ts
+declare module 'chai-spies' {
+// Type definitions for chai-spies 0.7.1
+// Project: https://github.com/chaijs/chai-spies
+// Definitions by: Will Lee-Wagner <http://whentheresawill.net/>
+// Definitions: https://github.com/whenther/typed-chai-spies
+
+import {Assertion} from '~chai/lib/Assertion';
+import * as Utils from '~chai/lib/Utils';
+
+interface InternalSpy {
+  calls: any[];
+  called: boolean;
+  name: string;
+}
+
+interface ChaiProxy extends Function {
+  (...args: any[]): any;
+  /**
+   * Resets __spy object parameters for instantiation and reuse
+   * @returns proxy spy object
+   */
+  reset(): ChaiProxy;
+
+  /**
+   * The internal __spy object, that tracks calls to the spy.
+   */
+  __spy: InternalSpy;
+}
+
+interface ChaiSpy {
+  (name: SpyName, fn: SpyFunction): ChaiProxy;
+  (name: SpyName): ChaiProxy;
+  (fn: SpyFunction): ChaiProxy;
+  (): ChaiProxy;
+  /**
+   * Wraps an object method into spy. All calls will
+   * pass through to the original function.
+   *
+   *      var spy = chai.spy.on(Array, 'isArray');
+   *
+   * @param {Object} object
+   * @param {String} method name to spy on
+   * @returns function to actually call
+   * @api public
+   */
+  on(object: any, methodName: string): ChaiProxy;
+  /**
+   * Creates an object with spied methods.
+   *
+   *      var object = chai.spy.object('Array', [ 'push', 'pop' ]);
+   *
+   * @param {String} [name] object name
+   * @param {String[]|Object} method names or method definitions
+   * @returns object with spied methods
+   * @api public
+   */
+  object<T>(name: string, spies: string[]): T & Object;
+  object<T>(name: string, spies: T): T & Object;
+  object<T>(spies: string[]): T & Object;
+  object<T>(spies: T): T & Object;
+  /**
+   * Creates a spy which returns static value.
+   *
+   *      var method = chai.spy.returns(true);
+   *
+   * @param {*} value static value which is returned by spy
+   * @returns new spy function which returns static value
+   * @api public
+   */
+  returns(value: any): ChaiProxy;
+}
+
+interface SpyCalledWith extends Assertion {
+  (...args: any[]): void;
+  exactly(...args: any[]): void;
+}
+
+interface SpyCalledAlways extends Assertion {
+  with: SpyCalledWith;
+}
+
+interface SpyCalledAt {
+  most(n: number): void;
+  least(n: number): void;
+}
+
+interface SpyCalled {
+  (n?: number): void;
+  /**
+   * Assert that a spy has been called exactly once
+   *
+   * @api public
+   */
+  once: any;
+  /**
+   * Assert that a spy has been called exactly twice.
+   *
+   * @api public
+   */
+  twice: any;
+  /**
+   * Assert that a spy has been called exactly `n` times.
+   *
+   * @param {Number} n times
+   * @api public
+   */
+  exactly(n: number): void;
+  with: SpyCalledWith;
+  /**
+   * Assert that a spy has been called `n` or more times.
+   *
+   * @param {Number} n times
+   * @api public
+   */
+  min(n: number): void;
+  /**
+   * Assert that a spy has been called `n` or fewer times.
+   *
+   * @param {Number} n times
+   * @api public
+   */
+  max(n: number): void;
+  at: SpyCalledAt;
+  above(n: number): void;
+  /**
+   * Assert that a spy has been called more than `n` times.
+   *
+   * @param {Number} n times
+   * @api public
+   */
+  gt(n: number): void;
+  below(n: number): void;
+  /**
+   * Assert that a spy has been called less than `n` times.
+   *
+   * @param {Number} n times
+   * @api public
+   */
+  lt(n: number): void;
+}
+
+type SpyName = string | number;
+
+interface SpyFunction {
+  (...args: any[]): any;
+}
+
+module '~chai/lib/Chai' {
+  /**
+   * Wraps a function in a proxy function. All calls will
+   * pass through to the original function.
+   *
+   *      function original() {}
+   *      var spy = chai.spy(original)
+   *        , e_spy = chai.spy();
+   *
+   * @param {Function} function to spy on
+   * @returns function to actually call
+   * @api public
+   */
+  export var spy: ChaiSpy;
+}
+
+module '~chai/lib/Assertion' {
+  export interface TypeComparison {
+    /**
+     * Assert the the object in question is an chai.spy
+     * wrapped function by looking for internals.
+     *
+     *      expect(spy).to.be.spy;
+     *      spy.should.be.spy;
+     *
+     * @api public
+     */
+    spy: Assertion;
+  }
+
+  export interface Assertion {
+    /**
+     * Assert that a spy has been called. Does not negate to allow for
+     * pass through language.
+     *
+     * @api public
+     */
+    called: SpyCalled;
+    always: SpyCalledAlways;
+  }
+}
+
+function ChaiSpies(chai: any, _: Utils.Utils): void;
+export = ChaiSpies;
+}
diff --git a/typings/modules/chai-spies/typings.json b/typings/modules/chai-spies/typings.json
new file mode 100644
index 0000000..804afbe
--- /dev/null
+++ b/typings/modules/chai-spies/typings.json
@@ -0,0 +1,29 @@
+{
+  "resolution": "main",
+  "tree": {
+    "src": "https://raw.githubusercontent.com/whenther/typed-chai-spies/d5dbba153d3995984edf74cf1562b9eb8436841b/typings.json",
+    "raw": "registry:npm/chai-spies#0.7.1+20160614064916",
+    "main": "index.d.ts",
+    "version": "0.7.1",
+    "dependencies": {
+      "chai": {
+        "src": "https://raw.githubusercontent.com/typed-typings/npm-chai/793bee097a6a644e078a033603d88ac89eb7b560/typings.json",
+        "raw": "registry:npm/chai#3.5.0+20160415060238",
+        "main": "index.d.ts",
+        "dependencies": {
+          "assertion-error": {
+            "src": "https://raw.githubusercontent.com/typed-typings/npm-assertion-error/105841317bd2bdd5d110bfb763e49e482a77230d/typings.json",
+            "raw": "github:typed-typings/npm-assertion-error#105841317bd2bdd5d110bfb763e49e482a77230d",
+            "main": "main.d.ts",
+            "name": "assertion-error",
+            "type": "typings"
+          }
+        },
+        "name": "chai",
+        "type": "typings"
+      }
+    },
+    "name": "chai-spies",
+    "type": "typings"
+  }
+}
-- 
2.7.4


From 11881df9df71bfd798db768a8a4182dae7387bfd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 17:46:33 +0200
Subject: [PATCH 379/414] Step 23.4: Rename main file and make few changes to
 support typescript

---
 client/main.js | 19 -------------------
 client/main.ts | 57 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 19 deletions(-)
 delete mode 100644 client/main.js
 create mode 100644 client/main.ts

diff --git a/client/main.js b/client/main.js
deleted file mode 100644
index 06731e1..0000000
--- a/client/main.js
+++ /dev/null
@@ -1,19 +0,0 @@
-import angular from 'angular';
-
-import { Meteor } from 'meteor/meteor';
-
-import { name as Socially } from '../imports/ui/components/socially/socially';
-
-function onReady() {
-  angular.bootstrap(document, [
-    Socially
-  ], {
-    strictDi: true
-  });
-}
-
-if (Meteor.isCordova) {
-  angular.element(document).on('deviceready', onReady);
-} else {
-  angular.element(document).ready(onReady);
-}
diff --git a/client/main.ts b/client/main.ts
new file mode 100644
index 0000000..1a17992
--- /dev/null
+++ b/client/main.ts
@@ -0,0 +1,57 @@
+import * as angular from 'angular';
+
+import { Meteor } from 'meteor/meteor';
+
+import { registerAuth } from '../imports/ui/components/auth/auth';
+import { registerLogin } from '../imports/ui/components/login/login';
+import { registerNavigation } from '../imports/ui/components/navigation/navigation';
+import { registerPartiesList } from '../imports/ui/components/partiesList/partiesList';
+import { registerPartiesMap } from '../imports/ui/components/partiesMap/partiesMap';
+import { registerPartiesSort } from '../imports/ui/components/partiesSort/partiesSort';
+import { registerPartyAdd } from '../imports/ui/components/partyAdd/partyAdd';
+import { registerPartyAddButton } from '../imports/ui/components/partyAddButton/partyAddButton';
+import { registerPartyCreator } from '../imports/ui/components/partyCreator/partyCreator';
+import { registerPartyDetails } from '../imports/ui/components/partyDetails/partyDetails';
+import { registerPartyImage } from '../imports/ui/components/partyImage/partyImage';
+import { registerPartyMap } from '../imports/ui/components/partyMap/partyMap';
+import { registerPartyRemove } from '../imports/ui/components/partyRemove/partyRemove';
+import { registerPartyRsvp } from '../imports/ui/components/partyRsvp/partyRsvp';
+import { registerPartyRsvpsList } from '../imports/ui/components/partyRsvpsList/partyRsvpsList';
+import { registerPartyUninvited } from '../imports/ui/components/partyUninvited/partyUninvited';
+import { registerPartyUpload } from '../imports/ui/components/partyUpload/partyUpload';
+import { registerPassword } from '../imports/ui/components/password/password';
+import { registerRegister } from '../imports/ui/components/register/register';
+import { registerSocially, SociallyNg1Module } from '../imports/ui/components/socially/socially';
+
+registerAuth();
+registerLogin();
+registerNavigation();
+registerPartiesList();
+registerPartiesMap();
+registerPartiesSort();
+registerPartyAdd();
+registerPartyAddButton();
+registerPartyCreator();
+registerPartyDetails();
+registerPartyImage();
+registerPartyMap();
+registerPartyRemove();
+registerPartyRsvp();
+registerPartyRsvpsList();
+registerPartyUninvited();
+registerPartyUpload();
+registerPassword();
+registerRegister();
+registerSocially();
+
+function onReady() {
+  angular.bootstrap(document, [
+    SociallyNg1Module.name
+  ]);
+}
+
+if (Meteor.isCordova) {
+  angular.element(document).on('deviceready', onReady);
+} else {
+  angular.element(document).ready(onReady);
+}
-- 
2.7.4


From 575accafc4cc4b98a2915a5d372bb03480e8db94 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 17:49:27 +0200
Subject: [PATCH 380/414] Step 23.5: Default imports of libraries inside
 Socially component

---
 imports/ui/components/socially/socially.js | 80 ------------------------------
 imports/ui/components/socially/socially.ts | 80 ++++++++++++++++++++++++++++++
 2 files changed, 80 insertions(+), 80 deletions(-)
 delete mode 100644 imports/ui/components/socially/socially.js
 create mode 100644 imports/ui/components/socially/socially.ts

diff --git a/imports/ui/components/socially/socially.js b/imports/ui/components/socially/socially.js
deleted file mode 100644
index ff140a5..0000000
--- a/imports/ui/components/socially/socially.js
+++ /dev/null
@@ -1,80 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import ngMaterial from 'angular-material';
-import ngSanitize from 'angular-sanitize';
-import uiRouter from 'angular-ui-router';
-import 'ionic-sdk/release/js/ionic';
-import 'ionic-sdk/release/js/ionic-angular';
-import 'ionic-sdk/release/css/ionic.css';
-
-import { Meteor } from 'meteor/meteor';
-
-import webTemplate from './web.html';
-import mobileTemplate from './mobile.html';
-import { name as PartiesList } from '../partiesList/partiesList';
-import { name as PartyDetails } from '../partyDetails/partyDetails';
-import { name as Navigation } from '../navigation/navigation';
-import { name as Auth } from '../auth/auth';
-
-class Socially {}
-
-const name = 'socially';
-const template = Meteor.isCordova ? mobileTemplate : webTemplate;
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  ngMaterial,
-  ngSanitize,
-  uiRouter,
-  PartiesList,
-  PartyDetails,
-  Navigation,
-  Auth,
-  'accounts.ui',
-  'ionic'
-]).component(name, {
-  template,
-  controllerAs: name,
-  controller: Socially
-})
-  .config(config)
-  .run(run);
-
-function config($locationProvider, $urlRouterProvider, $mdIconProvider) {
-  'ngInject';
-
-  $locationProvider.html5Mode(true);
-
-  $urlRouterProvider.otherwise('/parties');
-
-  const iconPath =  '/packages/planettraining_material-design-icons/bower_components/material-design-icons/sprites/svg-sprite/';
-
-  $mdIconProvider
-    .iconSet('social',
-      iconPath + 'svg-sprite-social.svg')
-    .iconSet('action',
-      iconPath + 'svg-sprite-action.svg')
-    .iconSet('communication',
-      iconPath + 'svg-sprite-communication.svg')
-    .iconSet('content',
-      iconPath + 'svg-sprite-content.svg')
-    .iconSet('toggle',
-      iconPath + 'svg-sprite-toggle.svg')
-    .iconSet('navigation',
-      iconPath + 'svg-sprite-navigation.svg')
-    .iconSet('image',
-      iconPath + 'svg-sprite-image.svg');
-}
-
-function run($rootScope, $state) {
-  'ngInject';
-
-  $rootScope.$on('$stateChangeError',
-    (event, toState, toParams, fromState, fromParams, error) => {
-      if (error === 'AUTH_REQUIRED') {
-        $state.go('parties');
-      }
-    }
-  );
-}
diff --git a/imports/ui/components/socially/socially.ts b/imports/ui/components/socially/socially.ts
new file mode 100644
index 0000000..35393c3
--- /dev/null
+++ b/imports/ui/components/socially/socially.ts
@@ -0,0 +1,80 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as ngMaterial from 'angular-material';
+import * as ngSanitize from 'angular-sanitize';
+import * as uiRouter from 'angular-ui-router';
+import 'ionic-sdk/release/js/ionic';
+import 'ionic-sdk/release/js/ionic-angular';
+import 'ionic-sdk/release/css/ionic.css';
+
+import { Meteor } from 'meteor/meteor';
+
+import webTemplate from './web.html';
+import mobileTemplate from './mobile.html';
+import { name as PartiesList } from '../partiesList/partiesList';
+import { name as PartyDetails } from '../partyDetails/partyDetails';
+import { name as Navigation } from '../navigation/navigation';
+import { name as Auth } from '../auth/auth';
+
+class Socially {}
+
+const name = 'socially';
+const template = Meteor.isCordova ? mobileTemplate : webTemplate;
+
+// create a module
+export default angular.module(name, [
+  angularMeteor,
+  ngMaterial,
+  ngSanitize,
+  uiRouter,
+  PartiesList,
+  PartyDetails,
+  Navigation,
+  Auth,
+  'accounts.ui',
+  'ionic'
+]).component(name, {
+  template,
+  controllerAs: name,
+  controller: Socially
+})
+  .config(config)
+  .run(run);
+
+function config($locationProvider, $urlRouterProvider, $mdIconProvider) {
+  'ngInject';
+
+  $locationProvider.html5Mode(true);
+
+  $urlRouterProvider.otherwise('/parties');
+
+  const iconPath =  '/packages/planettraining_material-design-icons/bower_components/material-design-icons/sprites/svg-sprite/';
+
+  $mdIconProvider
+    .iconSet('social',
+      iconPath + 'svg-sprite-social.svg')
+    .iconSet('action',
+      iconPath + 'svg-sprite-action.svg')
+    .iconSet('communication',
+      iconPath + 'svg-sprite-communication.svg')
+    .iconSet('content',
+      iconPath + 'svg-sprite-content.svg')
+    .iconSet('toggle',
+      iconPath + 'svg-sprite-toggle.svg')
+    .iconSet('navigation',
+      iconPath + 'svg-sprite-navigation.svg')
+    .iconSet('image',
+      iconPath + 'svg-sprite-image.svg');
+}
+
+function run($rootScope, $state) {
+  'ngInject';
+
+  $rootScope.$on('$stateChangeError',
+    (event, toState, toParams, fromState, fromParams, error) => {
+      if (error === 'AUTH_REQUIRED') {
+        $state.go('parties');
+      }
+    }
+  );
+}
-- 
2.7.4


From 60fd98e4e5f2135ec8a10db2e009ea4989101a36 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 17:50:49 +0200
Subject: [PATCH 381/414] Step 23.6: Default imports of components

---
 imports/ui/components/socially/socially.ts | 37 +++++++++++++++++-------------
 1 file changed, 21 insertions(+), 16 deletions(-)

diff --git a/imports/ui/components/socially/socially.ts b/imports/ui/components/socially/socially.ts
index 35393c3..775dd07 100644
--- a/imports/ui/components/socially/socially.ts
+++ b/imports/ui/components/socially/socially.ts
@@ -11,10 +11,10 @@ import { Meteor } from 'meteor/meteor';
 
 import webTemplate from './web.html';
 import mobileTemplate from './mobile.html';
-import { name as PartiesList } from '../partiesList/partiesList';
-import { name as PartyDetails } from '../partyDetails/partyDetails';
-import { name as Navigation } from '../navigation/navigation';
-import { name as Auth } from '../auth/auth';
+import { PartiesListNg1Module } from '../partiesList/partiesList';
+import { PartyDetailsNg1Module } from '../partyDetails/partyDetails';
+import { NavigationNg1Module } from '../navigation/navigation';
+import { AuthNg1Module } from '../auth/auth';
 
 class Socially {}
 
@@ -22,24 +22,29 @@ const name = 'socially';
 const template = Meteor.isCordova ? mobileTemplate : webTemplate;
 
 // create a module
-export default angular.module(name, [
+export const SociallyNg1Module = angular.module(name, [
   angularMeteor,
   ngMaterial,
   ngSanitize,
   uiRouter,
-  PartiesList,
-  PartyDetails,
-  Navigation,
-  Auth,
+  PartiesListNg1Module.name,
+  PartyDetailsNg1Module.name,
+  NavigationNg1Module.name,
+  AuthNg1Module.name,
   'accounts.ui',
   'ionic'
-]).component(name, {
-  template,
-  controllerAs: name,
-  controller: Socially
-})
-  .config(config)
-  .run(run);
+]);
+
+export function registerSocially() {
+  SociallyNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      controller: Socially
+    })
+    .config(config)
+    .run(run);
+}
 
 function config($locationProvider, $urlRouterProvider, $mdIconProvider) {
   'ngInject';
-- 
2.7.4


From 085a31ab343ec2d97ed11e4b75b19fcb1a64cfc1 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:19:19 +0200
Subject: [PATCH 382/414] Step 23.7: Move everything to typescript

---
 imports/api/images/collection.js                   |  21 ---
 imports/api/images/collection.ts                   |  21 +++
 imports/api/images/helpers.js                      |  54 -------
 imports/api/images/helpers.ts                      |  54 +++++++
 imports/api/images/index.js                        |   4 -
 imports/api/images/index.ts                        |   4 +
 imports/api/images/methods.js                      |  33 ----
 imports/api/images/methods.ts                      |  33 ++++
 imports/api/images/publish.js                      |  17 --
 imports/api/images/publish.ts                      |  17 ++
 imports/api/images/store.js                        |  30 ----
 imports/api/images/store.ts                        |  30 ++++
 imports/api/parties/collection.js                  |  15 --
 imports/api/parties/collection.ts                  |  15 ++
 imports/api/parties/index.js                       |   4 -
 imports/api/parties/index.ts                       |   4 +
 imports/api/parties/methods.js                     | 144 -----------------
 imports/api/parties/methods.tests.js               | 178 ---------------------
 imports/api/parties/methods.tests.ts               | 178 +++++++++++++++++++++
 imports/api/parties/methods.ts                     | 144 +++++++++++++++++
 imports/api/parties/publish.js                     |  52 ------
 imports/api/parties/publish.ts                     |  52 ++++++
 imports/api/users.js                               |  12 --
 imports/api/users.ts                               |  12 ++
 imports/startup/fixtures.js                        |  21 ---
 imports/startup/fixtures.ts                        |  21 +++
 imports/ui/components/auth/auth.js                 |  47 ------
 imports/ui/components/auth/auth.ts                 |  52 ++++++
 imports/ui/components/login/login.js               |  35 ----
 imports/ui/components/login/login.ts               |  39 +++++
 imports/ui/components/login/mobile.js              |  40 -----
 imports/ui/components/login/mobile.ts              |  40 +++++
 imports/ui/components/login/web.js                 |  30 ----
 imports/ui/components/login/web.ts                 |  30 ++++
 imports/ui/components/navigation/navigation.js     |  14 --
 imports/ui/components/navigation/navigation.ts     |  19 +++
 .../partiesList/client/partiesList.tests.js        |  50 ------
 .../partiesList/client/partiesList.tests.ts        |  50 ++++++
 imports/ui/components/partiesList/partiesList.js   | 105 ------------
 imports/ui/components/partiesList/partiesList.ts   | 110 +++++++++++++
 imports/ui/components/partiesMap/partiesMap.js     |  37 -----
 imports/ui/components/partiesMap/partiesMap.ts     |  42 +++++
 .../partiesSort/client/partiesSort.tests.js        |  54 -------
 .../partiesSort/client/partiesSort.tests.ts        |  54 +++++++
 imports/ui/components/partiesSort/partiesSort.js   |  34 ----
 imports/ui/components/partiesSort/partiesSort.ts   |  39 +++++
 .../components/partyAdd/client/partyAdd.tests.js   |  65 --------
 .../components/partyAdd/client/partyAdd.tests.ts   |  65 ++++++++
 imports/ui/components/partyAdd/partyAdd.js         |  44 -----
 imports/ui/components/partyAdd/partyAdd.ts         |  49 ++++++
 .../ui/components/partyAddButton/partyAddButton.js |  45 ------
 .../ui/components/partyAddButton/partyAddButton.ts |  50 ++++++
 .../partyCreator/client/partyCreator.tests.js      |  81 ----------
 .../partyCreator/client/partyCreator.tests.ts      |  81 ++++++++++
 imports/ui/components/partyCreator/partyCreator.js |  51 ------
 imports/ui/components/partyCreator/partyCreator.ts |  56 +++++++
 .../partyDetails/client/partyDetails.tests.js      |  51 ------
 .../partyDetails/client/partyDetails.tests.ts      |  51 ++++++
 imports/ui/components/partyDetails/partyDetails.js | 104 ------------
 imports/ui/components/partyDetails/partyDetails.ts | 109 +++++++++++++
 imports/ui/components/partyImage/partyImage.js     |  39 -----
 imports/ui/components/partyImage/partyImage.ts     |  44 +++++
 imports/ui/components/partyMap/partyMap.js         |  61 -------
 imports/ui/components/partyMap/partyMap.ts         |  66 ++++++++
 .../partyRemove/client/partyRemove.tests.js        |  37 -----
 .../partyRemove/client/partyRemove.tests.ts        |  37 +++++
 imports/ui/components/partyRemove/partyRemove.js   |  27 ----
 imports/ui/components/partyRemove/partyRemove.ts   |  32 ++++
 imports/ui/components/partyRsvp/partyRsvp.js       |  62 -------
 imports/ui/components/partyRsvp/partyRsvp.ts       |  67 ++++++++
 .../ui/components/partyRsvpsList/partyRsvpsList.js |  20 ---
 .../ui/components/partyRsvpsList/partyRsvpsList.ts |  25 +++
 .../ui/components/partyUninvited/partyUninvited.js |  50 ------
 .../ui/components/partyUninvited/partyUninvited.ts |  55 +++++++
 imports/ui/components/partyUpload/partyUpload.js   |  91 -----------
 imports/ui/components/partyUpload/partyUpload.ts   |  96 +++++++++++
 imports/ui/components/password/password.js         |  56 -------
 imports/ui/components/password/password.ts         |  60 +++++++
 imports/ui/components/register/register.js         |  58 -------
 imports/ui/components/register/register.ts         |  62 +++++++
 imports/ui/filters/displayImageFilter.js           |  26 ---
 imports/ui/filters/displayImageFilter.ts           |  26 +++
 imports/ui/filters/displayNameFilter.js            |  25 ---
 imports/ui/filters/displayNameFilter.ts            |  25 +++
 imports/ui/filters/uninvitedFilter.js              |  21 ---
 imports/ui/filters/uninvitedFilter.ts              |  21 +++
 server/main.js                                     |   4 -
 server/main.ts                                     |   4 +
 88 files changed, 2141 insertions(+), 2049 deletions(-)
 delete mode 100644 imports/api/images/collection.js
 create mode 100644 imports/api/images/collection.ts
 delete mode 100644 imports/api/images/helpers.js
 create mode 100644 imports/api/images/helpers.ts
 delete mode 100644 imports/api/images/index.js
 create mode 100644 imports/api/images/index.ts
 delete mode 100644 imports/api/images/methods.js
 create mode 100644 imports/api/images/methods.ts
 delete mode 100644 imports/api/images/publish.js
 create mode 100644 imports/api/images/publish.ts
 delete mode 100644 imports/api/images/store.js
 create mode 100644 imports/api/images/store.ts
 delete mode 100644 imports/api/parties/collection.js
 create mode 100644 imports/api/parties/collection.ts
 delete mode 100644 imports/api/parties/index.js
 create mode 100644 imports/api/parties/index.ts
 delete mode 100644 imports/api/parties/methods.js
 delete mode 100644 imports/api/parties/methods.tests.js
 create mode 100644 imports/api/parties/methods.tests.ts
 create mode 100644 imports/api/parties/methods.ts
 delete mode 100644 imports/api/parties/publish.js
 create mode 100644 imports/api/parties/publish.ts
 delete mode 100644 imports/api/users.js
 create mode 100644 imports/api/users.ts
 delete mode 100644 imports/startup/fixtures.js
 create mode 100644 imports/startup/fixtures.ts
 delete mode 100644 imports/ui/components/auth/auth.js
 create mode 100644 imports/ui/components/auth/auth.ts
 delete mode 100644 imports/ui/components/login/login.js
 create mode 100644 imports/ui/components/login/login.ts
 delete mode 100644 imports/ui/components/login/mobile.js
 create mode 100644 imports/ui/components/login/mobile.ts
 delete mode 100644 imports/ui/components/login/web.js
 create mode 100644 imports/ui/components/login/web.ts
 delete mode 100644 imports/ui/components/navigation/navigation.js
 create mode 100644 imports/ui/components/navigation/navigation.ts
 delete mode 100644 imports/ui/components/partiesList/client/partiesList.tests.js
 create mode 100644 imports/ui/components/partiesList/client/partiesList.tests.ts
 delete mode 100644 imports/ui/components/partiesList/partiesList.js
 create mode 100644 imports/ui/components/partiesList/partiesList.ts
 delete mode 100644 imports/ui/components/partiesMap/partiesMap.js
 create mode 100644 imports/ui/components/partiesMap/partiesMap.ts
 delete mode 100644 imports/ui/components/partiesSort/client/partiesSort.tests.js
 create mode 100644 imports/ui/components/partiesSort/client/partiesSort.tests.ts
 delete mode 100644 imports/ui/components/partiesSort/partiesSort.js
 create mode 100644 imports/ui/components/partiesSort/partiesSort.ts
 delete mode 100644 imports/ui/components/partyAdd/client/partyAdd.tests.js
 create mode 100644 imports/ui/components/partyAdd/client/partyAdd.tests.ts
 delete mode 100644 imports/ui/components/partyAdd/partyAdd.js
 create mode 100644 imports/ui/components/partyAdd/partyAdd.ts
 delete mode 100644 imports/ui/components/partyAddButton/partyAddButton.js
 create mode 100644 imports/ui/components/partyAddButton/partyAddButton.ts
 delete mode 100644 imports/ui/components/partyCreator/client/partyCreator.tests.js
 create mode 100644 imports/ui/components/partyCreator/client/partyCreator.tests.ts
 delete mode 100644 imports/ui/components/partyCreator/partyCreator.js
 create mode 100644 imports/ui/components/partyCreator/partyCreator.ts
 delete mode 100644 imports/ui/components/partyDetails/client/partyDetails.tests.js
 create mode 100644 imports/ui/components/partyDetails/client/partyDetails.tests.ts
 delete mode 100644 imports/ui/components/partyDetails/partyDetails.js
 create mode 100644 imports/ui/components/partyDetails/partyDetails.ts
 delete mode 100644 imports/ui/components/partyImage/partyImage.js
 create mode 100644 imports/ui/components/partyImage/partyImage.ts
 delete mode 100644 imports/ui/components/partyMap/partyMap.js
 create mode 100644 imports/ui/components/partyMap/partyMap.ts
 delete mode 100644 imports/ui/components/partyRemove/client/partyRemove.tests.js
 create mode 100644 imports/ui/components/partyRemove/client/partyRemove.tests.ts
 delete mode 100644 imports/ui/components/partyRemove/partyRemove.js
 create mode 100644 imports/ui/components/partyRemove/partyRemove.ts
 delete mode 100644 imports/ui/components/partyRsvp/partyRsvp.js
 create mode 100644 imports/ui/components/partyRsvp/partyRsvp.ts
 delete mode 100644 imports/ui/components/partyRsvpsList/partyRsvpsList.js
 create mode 100644 imports/ui/components/partyRsvpsList/partyRsvpsList.ts
 delete mode 100644 imports/ui/components/partyUninvited/partyUninvited.js
 create mode 100644 imports/ui/components/partyUninvited/partyUninvited.ts
 delete mode 100644 imports/ui/components/partyUpload/partyUpload.js
 create mode 100644 imports/ui/components/partyUpload/partyUpload.ts
 delete mode 100644 imports/ui/components/password/password.js
 create mode 100644 imports/ui/components/password/password.ts
 delete mode 100644 imports/ui/components/register/register.js
 create mode 100644 imports/ui/components/register/register.ts
 delete mode 100644 imports/ui/filters/displayImageFilter.js
 create mode 100644 imports/ui/filters/displayImageFilter.ts
 delete mode 100644 imports/ui/filters/displayNameFilter.js
 create mode 100644 imports/ui/filters/displayNameFilter.ts
 delete mode 100644 imports/ui/filters/uninvitedFilter.js
 create mode 100644 imports/ui/filters/uninvitedFilter.ts
 delete mode 100644 server/main.js
 create mode 100644 server/main.ts

diff --git a/imports/api/images/collection.js b/imports/api/images/collection.js
deleted file mode 100644
index a522111..0000000
--- a/imports/api/images/collection.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-import { Mongo } from 'meteor/mongo';
-
-export const Images = new Mongo.Collection('images');
-export const Thumbs = new Mongo.Collection('thumbs');
-
-function loggedIn(userId) {
-  return !!userId;
-}
-
-Thumbs.allow({
-  insert: loggedIn,
-  update: loggedIn,
-  remove: loggedIn
-});
-
-Images.allow({
-  insert: loggedIn,
-  update: loggedIn,
-  remove: loggedIn
-});
diff --git a/imports/api/images/collection.ts b/imports/api/images/collection.ts
new file mode 100644
index 0000000..a522111
--- /dev/null
+++ b/imports/api/images/collection.ts
@@ -0,0 +1,21 @@
+import { Meteor } from 'meteor/meteor';
+import { Mongo } from 'meteor/mongo';
+
+export const Images = new Mongo.Collection('images');
+export const Thumbs = new Mongo.Collection('thumbs');
+
+function loggedIn(userId) {
+  return !!userId;
+}
+
+Thumbs.allow({
+  insert: loggedIn,
+  update: loggedIn,
+  remove: loggedIn
+});
+
+Images.allow({
+  insert: loggedIn,
+  update: loggedIn,
+  remove: loggedIn
+});
diff --git a/imports/api/images/helpers.js b/imports/api/images/helpers.js
deleted file mode 100644
index 448f932..0000000
--- a/imports/api/images/helpers.js
+++ /dev/null
@@ -1,54 +0,0 @@
-/**
- * Converts DataURL to Blob object
- *
- * https://github.com/ebidel/filer.js/blob/master/src/filer.js#L137
- *
- * @param  {String} dataURL
- * @return {Blob}
- */
-export function dataURLToBlob(dataURL) {
-    const BASE64_MARKER = ';base64,';
-
-    if (dataURL.indexOf(BASE64_MARKER) === -1) {
-      const parts = dataURL.split(',');
-      const contentType = parts[0].split(':')[1];
-      const raw = decodeURIComponent(parts[1]);
-
-      return new Blob([raw], {type: contentType});
-    }
-
-    const parts = dataURL.split(BASE64_MARKER);
-    const contentType = parts[0].split(':')[1];
-    const raw = window.atob(parts[1]);
-    const rawLength = raw.length;
-    const uInt8Array = new Uint8Array(rawLength);
-
-    for (let i = 0; i < rawLength; ++i) {
-      uInt8Array[i] = raw.charCodeAt(i);
-    }
-
-    return new Blob([uInt8Array], {type: contentType});
-}
-
-/**
- * Converts Blob object to ArrayBuffer
- *
- * @param  {Blob}       blob          Source file
- * @param  {Function}   callback      Success callback with converted object as a first argument
- * @param  {Function}   errorCallback Error callback with error as a first argument
- */
-export function blobToArrayBuffer(blob, callback, errorCallback) {
-  const reader = new FileReader();
-
-  reader.onload = (e) => {
-    callback(e.target.result);
-  };
-
-  reader.onerror = (e) => {
-    if (errorCallback) {
-      errorCallback(e);
-    }
-  };
-
-  reader.readAsArrayBuffer(blob);
-}
diff --git a/imports/api/images/helpers.ts b/imports/api/images/helpers.ts
new file mode 100644
index 0000000..448f932
--- /dev/null
+++ b/imports/api/images/helpers.ts
@@ -0,0 +1,54 @@
+/**
+ * Converts DataURL to Blob object
+ *
+ * https://github.com/ebidel/filer.js/blob/master/src/filer.js#L137
+ *
+ * @param  {String} dataURL
+ * @return {Blob}
+ */
+export function dataURLToBlob(dataURL) {
+    const BASE64_MARKER = ';base64,';
+
+    if (dataURL.indexOf(BASE64_MARKER) === -1) {
+      const parts = dataURL.split(',');
+      const contentType = parts[0].split(':')[1];
+      const raw = decodeURIComponent(parts[1]);
+
+      return new Blob([raw], {type: contentType});
+    }
+
+    const parts = dataURL.split(BASE64_MARKER);
+    const contentType = parts[0].split(':')[1];
+    const raw = window.atob(parts[1]);
+    const rawLength = raw.length;
+    const uInt8Array = new Uint8Array(rawLength);
+
+    for (let i = 0; i < rawLength; ++i) {
+      uInt8Array[i] = raw.charCodeAt(i);
+    }
+
+    return new Blob([uInt8Array], {type: contentType});
+}
+
+/**
+ * Converts Blob object to ArrayBuffer
+ *
+ * @param  {Blob}       blob          Source file
+ * @param  {Function}   callback      Success callback with converted object as a first argument
+ * @param  {Function}   errorCallback Error callback with error as a first argument
+ */
+export function blobToArrayBuffer(blob, callback, errorCallback) {
+  const reader = new FileReader();
+
+  reader.onload = (e) => {
+    callback(e.target.result);
+  };
+
+  reader.onerror = (e) => {
+    if (errorCallback) {
+      errorCallback(e);
+    }
+  };
+
+  reader.readAsArrayBuffer(blob);
+}
diff --git a/imports/api/images/index.js b/imports/api/images/index.js
deleted file mode 100644
index 57692b3..0000000
--- a/imports/api/images/index.js
+++ /dev/null
@@ -1,4 +0,0 @@
-import './publish';
-export * from './collection';
-export * from './store';
-export * from './methods';
diff --git a/imports/api/images/index.ts b/imports/api/images/index.ts
new file mode 100644
index 0000000..57692b3
--- /dev/null
+++ b/imports/api/images/index.ts
@@ -0,0 +1,4 @@
+import './publish';
+export * from './collection';
+export * from './store';
+export * from './methods';
diff --git a/imports/api/images/methods.js b/imports/api/images/methods.js
deleted file mode 100644
index e634901..0000000
--- a/imports/api/images/methods.js
+++ /dev/null
@@ -1,33 +0,0 @@
-import { UploadFS } from 'meteor/jalik:ufs';
-import { ImagesStore } from './store';
-import { dataURLToBlob, blobToArrayBuffer } from './helpers';
-
-/**
- * Uploads a new file
- *
- * @param  {String}   dataUrl [description]
- * @param  {String}   name    [description]
- * @param  {Function} resolve [description]
- * @param  {Function} reject  [description]
- */
-export function upload(dataUrl, name, resolve, reject) {
-  // convert to Blob
-  const blob = dataURLToBlob(dataUrl);
-  blob.name = name;
-
-  // pick from an object only: name, type and size
-  const file = _.pick(blob, 'name', 'type', 'size');
-
-  // convert to ArrayBuffer
-  blobToArrayBuffer(blob, (data) => {
-    const upload = new UploadFS.Uploader({
-      data,
-      file,
-      store: ImagesStore,
-      onError: reject,
-      onComplete: resolve
-    });
-
-    upload.start();
-  }, reject);
-}
diff --git a/imports/api/images/methods.ts b/imports/api/images/methods.ts
new file mode 100644
index 0000000..e634901
--- /dev/null
+++ b/imports/api/images/methods.ts
@@ -0,0 +1,33 @@
+import { UploadFS } from 'meteor/jalik:ufs';
+import { ImagesStore } from './store';
+import { dataURLToBlob, blobToArrayBuffer } from './helpers';
+
+/**
+ * Uploads a new file
+ *
+ * @param  {String}   dataUrl [description]
+ * @param  {String}   name    [description]
+ * @param  {Function} resolve [description]
+ * @param  {Function} reject  [description]
+ */
+export function upload(dataUrl, name, resolve, reject) {
+  // convert to Blob
+  const blob = dataURLToBlob(dataUrl);
+  blob.name = name;
+
+  // pick from an object only: name, type and size
+  const file = _.pick(blob, 'name', 'type', 'size');
+
+  // convert to ArrayBuffer
+  blobToArrayBuffer(blob, (data) => {
+    const upload = new UploadFS.Uploader({
+      data,
+      file,
+      store: ImagesStore,
+      onError: reject,
+      onComplete: resolve
+    });
+
+    upload.start();
+  }, reject);
+}
diff --git a/imports/api/images/publish.js b/imports/api/images/publish.js
deleted file mode 100644
index 5949c72..0000000
--- a/imports/api/images/publish.js
+++ /dev/null
@@ -1,17 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-import { Thumbs, Images } from './collection';
-
-if (Meteor.isServer) {
-  Meteor.publish('thumbs', function(ids) {
-    return Thumbs.find({
-      originalStore: 'images',
-      originalId: {
-        $in: ids
-      }
-    });
-  });
-
-  Meteor.publish('images', function() {
-    return Images.find({});
-  });
-}
diff --git a/imports/api/images/publish.ts b/imports/api/images/publish.ts
new file mode 100644
index 0000000..5949c72
--- /dev/null
+++ b/imports/api/images/publish.ts
@@ -0,0 +1,17 @@
+import { Meteor } from 'meteor/meteor';
+import { Thumbs, Images } from './collection';
+
+if (Meteor.isServer) {
+  Meteor.publish('thumbs', function(ids) {
+    return Thumbs.find({
+      originalStore: 'images',
+      originalId: {
+        $in: ids
+      }
+    });
+  });
+
+  Meteor.publish('images', function() {
+    return Images.find({});
+  });
+}
diff --git a/imports/api/images/store.js b/imports/api/images/store.js
deleted file mode 100644
index a0fa6d6..0000000
--- a/imports/api/images/store.js
+++ /dev/null
@@ -1,30 +0,0 @@
-import { UploadFS } from 'meteor/jalik:ufs';
-import { Images, Thumbs } from './collection';
-
-export const ThumbsStore = new UploadFS.store.GridFS({
-  collection: Thumbs,
-  name: 'thumbs',
-  transformWrite(from, to, fileId, file) {
-    // Resize to 32x32
-    const gm = require('gm');
-
-    gm(from, file.name)
-      .resize(32, 32)
-      .gravity('Center')
-      .extent(32, 32)
-      .quality(75)
-      .stream()
-      .pipe(to);
-  }
-});
-
-export const ImagesStore = new UploadFS.store.GridFS({
-  collection: Images,
-  name: 'images',
-  filter: new UploadFS.Filter({
-    contentTypes: ['image/*']
-  }),
-  copyTo: [
-    ThumbsStore
-  ]
-});
diff --git a/imports/api/images/store.ts b/imports/api/images/store.ts
new file mode 100644
index 0000000..a0fa6d6
--- /dev/null
+++ b/imports/api/images/store.ts
@@ -0,0 +1,30 @@
+import { UploadFS } from 'meteor/jalik:ufs';
+import { Images, Thumbs } from './collection';
+
+export const ThumbsStore = new UploadFS.store.GridFS({
+  collection: Thumbs,
+  name: 'thumbs',
+  transformWrite(from, to, fileId, file) {
+    // Resize to 32x32
+    const gm = require('gm');
+
+    gm(from, file.name)
+      .resize(32, 32)
+      .gravity('Center')
+      .extent(32, 32)
+      .quality(75)
+      .stream()
+      .pipe(to);
+  }
+});
+
+export const ImagesStore = new UploadFS.store.GridFS({
+  collection: Images,
+  name: 'images',
+  filter: new UploadFS.Filter({
+    contentTypes: ['image/*']
+  }),
+  copyTo: [
+    ThumbsStore
+  ]
+});
diff --git a/imports/api/parties/collection.js b/imports/api/parties/collection.js
deleted file mode 100644
index 3e283c1..0000000
--- a/imports/api/parties/collection.js
+++ /dev/null
@@ -1,15 +0,0 @@
-import { Mongo } from 'meteor/mongo';
-
-export const Parties = new Mongo.Collection('parties');
-
-Parties.allow({
-  insert(userId, party) {
-    return userId && party.owner === userId;
-  },
-  update(userId, party, fields, modifier) {
-    return userId && party.owner === userId;
-  },
-  remove(userId, party) {
-    return userId && party.owner === userId;
-  }
-});
diff --git a/imports/api/parties/collection.ts b/imports/api/parties/collection.ts
new file mode 100644
index 0000000..3e283c1
--- /dev/null
+++ b/imports/api/parties/collection.ts
@@ -0,0 +1,15 @@
+import { Mongo } from 'meteor/mongo';
+
+export const Parties = new Mongo.Collection('parties');
+
+Parties.allow({
+  insert(userId, party) {
+    return userId && party.owner === userId;
+  },
+  update(userId, party, fields, modifier) {
+    return userId && party.owner === userId;
+  },
+  remove(userId, party) {
+    return userId && party.owner === userId;
+  }
+});
diff --git a/imports/api/parties/index.js b/imports/api/parties/index.js
deleted file mode 100644
index 96b72b2..0000000
--- a/imports/api/parties/index.js
+++ /dev/null
@@ -1,4 +0,0 @@
-import './publish';
-import './methods';
-
-export * from './collection';
diff --git a/imports/api/parties/index.ts b/imports/api/parties/index.ts
new file mode 100644
index 0000000..96b72b2
--- /dev/null
+++ b/imports/api/parties/index.ts
@@ -0,0 +1,4 @@
+import './publish';
+import './methods';
+
+export * from './collection';
diff --git a/imports/api/parties/methods.js b/imports/api/parties/methods.js
deleted file mode 100644
index e8aa1ad..0000000
--- a/imports/api/parties/methods.js
+++ /dev/null
@@ -1,144 +0,0 @@
-import _ from 'underscore';
-import { Meteor } from 'meteor/meteor';
-import { check } from 'meteor/check';
-import { Email } from 'meteor/email';
-
-import { Parties } from './collection';
-
-function getContactEmail(user) {
-  if (user.emails && user.emails.length)
-    return user.emails[0].address;
-
-  if (user.services && user.services.facebook && user.services.facebook.email)
-    return user.services.facebook.email;
-
-  return null;
-}
-
-export function invite(partyId, userId) {
-  check(partyId, String);
-  check(userId, String);
-
-  if (!this.userId) {
-    throw new Meteor.Error(400, 'You have to be logged in!');
-  }
-
-  const party = Parties.findOne(partyId);
-
-  if (!party) {
-    throw new Meteor.Error(404, 'No such party!');
-  }
-
-  if (party.owner !== this.userId) {
-    throw new Meteor.Error(404, 'No permissions!');
-  }
-
-  if (party.public) {
-    throw new Meteor.Error(400, 'That party is public. No need to invite people.');
-  }
-
-  if (userId !== party.owner && ! _.contains(party.invited, userId)) {
-    Parties.update(partyId, {
-      $addToSet: {
-        invited: userId
-      }
-    });
-
-    const replyTo = getContactEmail(Meteor.users.findOne(this.userId));
-    const to = getContactEmail(Meteor.users.findOne(userId));
-
-    if (Meteor.isServer && to) {
-      Email.send({
-        to,
-        replyTo,
-        from: 'noreply@socially.com',
-        subject: `PARTY: ${party.title}`,
-        text: `
-          Hey, I just invited you to ${party.title} on Socially.
-          Come check it out: ${Meteor.absoluteUrl()}
-        `
-      });
-    }
-  }
-}
-
-export function rsvp(partyId, rsvp) {
-  check(partyId, String);
-  check(rsvp, String);
-
-  if (!this.userId) {
-    throw new Meteor.Error(403, 'You must be logged in to RSVP');
-  }
-
-  if (!_.contains(['yes', 'no', 'maybe'], rsvp)) {
-    throw new Meteor.Error(400, 'Invalid RSVP');
-  }
-
-  const party = Parties.findOne({
-    _id: partyId,
-    $or: [{
-      // is public
-      $and: [{
-        public: true
-      }, {
-        public: {
-          $exists: true
-        }
-      }]
-    },{
-      // is owner
-      $and: [{
-        owner: this.userId
-      }, {
-        owner: {
-          $exists: true
-        }
-      }]
-    }, {
-      // is invited
-      $and: [{
-        invited: this.userId
-      }, {
-        invited: {
-          $exists: true
-        }
-      }]
-    }]
-  });
-
-  if (!party) {
-    throw new Meteor.Error(404, 'No such party');
-  }
-
-  const hasUserRsvp = _.findWhere(party.rsvps, {
-    user: this.userId
-  });
-
-  if (!hasUserRsvp) {
-    // add new rsvp entry
-    Parties.update(partyId, {
-      $push: {
-        rsvps: {
-          rsvp,
-          user: this.userId
-        }
-      }
-    });
-  } else {
-    // update rsvp entry
-    const userId = this.userId;
-    Parties.update({
-      _id: partyId,
-      'rsvps.user': userId
-    }, {
-      $set: {
-        'rsvps.$.rsvp': rsvp
-      }
-    });
-  }
-}
-
-Meteor.methods({
-  invite,
-  rsvp
-});
diff --git a/imports/api/parties/methods.tests.js b/imports/api/parties/methods.tests.js
deleted file mode 100644
index 536a2b0..0000000
--- a/imports/api/parties/methods.tests.js
+++ /dev/null
@@ -1,178 +0,0 @@
-import { invite, rsvp } from './methods';
-import { Parties } from './collection';
-
-import { Meteor } from 'meteor/meteor';
-
-if (Meteor.isServer) {
-  describe('Parties / Methods', () => {
-    describe('invite', () => {
-      function loggedIn(userId = 'userId') {
-        return {
-          userId
-        };
-      }
-
-      it('should be called from Method', () => {
-        spyOn(invite, 'apply');
-
-        try {
-          Meteor.call('invite');
-        } catch (e) {}
-
-        expect(invite.apply).toHaveBeenCalled();
-      });
-
-      it('should fail on missing partyId', () => {
-        expect(() => {
-          invite.call({});
-        }).toThrowError();
-      });
-
-      it('should fail on missing userId', () => {
-        expect(() => {
-          invite.call({}, 'partyId');
-        }).toThrowError();
-      });
-
-      it('should fail on not logged in', () => {
-        expect(() => {
-          invite.call({}, 'partyId', 'userId');
-        }).toThrowError(/logged in/i);
-      });
-
-      it('should look for a party', () => {
-        const partyId = 'partyId';
-        spyOn(Parties, 'findOne');
-
-        try {
-          invite.call(loggedIn(), partyId, 'userId');
-        } catch (e) {}
-
-        expect(Parties.findOne).toHaveBeenCalledWith(partyId);
-      });
-
-      it('should fail if party does not exist', () => {
-        spyOn(Parties, 'findOne').and.returnValue(undefined);
-
-        expect(() => {
-          invite.call(loggedIn(), 'partyId', 'userId');
-        }).toThrowError(/404/);
-      });
-
-      it('should fail if logged in user is not the owner', () => {
-        spyOn(Parties, 'findOne').and.returnValue({
-          owner: 'notUserId'
-        });
-
-        expect(() => {
-          invite.call(loggedIn(), 'partyId', 'userId');
-        }).toThrowError(/404/);
-      });
-
-      it('should fail on public party', () => {
-        spyOn(Parties, 'findOne').and.returnValue({
-          owner: 'userId',
-          public: true
-        });
-
-        expect(() => {
-          invite.call(loggedIn(), 'partyId', 'userId');
-        }).toThrowError(/400/);
-      });
-
-      it('should NOT invite user who is the owner', () => {
-        spyOn(Parties, 'findOne').and.returnValue({
-          owner: 'userId'
-        });
-        spyOn(Parties, 'update');
-
-        invite.call(loggedIn(), 'partyId', 'userId');
-
-        expect(Parties.update).not.toHaveBeenCalled();
-      });
-
-      it('should NOT invite user who has been already invited', () => {
-        spyOn(Parties, 'findOne').and.returnValue({
-          owner: 'userId',
-          invited: ['invitedId']
-        });
-        spyOn(Parties, 'update');
-
-        invite.call(loggedIn(), 'partyId', 'invitedId');
-
-        expect(Parties.update).not.toHaveBeenCalled();
-      });
-
-      it('should invite user who has not been invited and is not the owner', () => {
-        const partyId = 'partyId';
-        const userId = 'notInvitedId';
-        spyOn(Parties, 'findOne').and.returnValue({
-          owner: 'userId',
-          invited: ['invitedId']
-        });
-        spyOn(Parties, 'update');
-        spyOn(Meteor.users, 'findOne').and.returnValue({});
-
-        invite.call(loggedIn(), partyId, userId);
-
-        expect(Parties.update).toHaveBeenCalledWith(partyId, {
-          $addToSet: {
-            invited: userId
-          }
-        });
-      });
-    });
-
-    describe('rsvp', () => {
-      function loggedIn(userId = 'userId') {
-        return {
-          userId
-        };
-      }
-
-      it('should be called from Method', () => {
-        spyOn(rsvp, 'apply');
-
-        try {
-          Meteor.call('rsvp');
-        } catch (e) {}
-
-        expect(rsvp.apply).toHaveBeenCalled();
-      });
-
-      it('should fail on missing partyId', () => {
-        expect(() => {
-          rsvp.call({});
-        }).toThrowError();
-      });
-
-      it('should fail on missing rsvp', () => {
-        expect(() => {
-          rsvp.call({}, 'partyId');
-        }).toThrowError();
-      });
-
-      it('should fail if not logged in', () => {
-        expect(() => {
-          rsvp.call({}, 'partyId', 'rsvp');
-        }).toThrowError(/403/);
-      });
-
-      it('should fail on wrong answer', () => {
-        expect(() => {
-          rsvp.call(loggedIn(), 'partyId', 'wrong');
-        }).toThrowError(/400/);
-      });
-
-      ['yes', 'maybe', 'no'].forEach((answer) => {
-        it(`should pass on '${answer}'`, () => {
-          expect(() => {
-            rsvp.call(loggedIn(), 'partyId', answer);
-          }).not.toThrowError(/400/);
-        });
-      });
-
-      // TODO: more tests  
-    });
-  });
-}
diff --git a/imports/api/parties/methods.tests.ts b/imports/api/parties/methods.tests.ts
new file mode 100644
index 0000000..536a2b0
--- /dev/null
+++ b/imports/api/parties/methods.tests.ts
@@ -0,0 +1,178 @@
+import { invite, rsvp } from './methods';
+import { Parties } from './collection';
+
+import { Meteor } from 'meteor/meteor';
+
+if (Meteor.isServer) {
+  describe('Parties / Methods', () => {
+    describe('invite', () => {
+      function loggedIn(userId = 'userId') {
+        return {
+          userId
+        };
+      }
+
+      it('should be called from Method', () => {
+        spyOn(invite, 'apply');
+
+        try {
+          Meteor.call('invite');
+        } catch (e) {}
+
+        expect(invite.apply).toHaveBeenCalled();
+      });
+
+      it('should fail on missing partyId', () => {
+        expect(() => {
+          invite.call({});
+        }).toThrowError();
+      });
+
+      it('should fail on missing userId', () => {
+        expect(() => {
+          invite.call({}, 'partyId');
+        }).toThrowError();
+      });
+
+      it('should fail on not logged in', () => {
+        expect(() => {
+          invite.call({}, 'partyId', 'userId');
+        }).toThrowError(/logged in/i);
+      });
+
+      it('should look for a party', () => {
+        const partyId = 'partyId';
+        spyOn(Parties, 'findOne');
+
+        try {
+          invite.call(loggedIn(), partyId, 'userId');
+        } catch (e) {}
+
+        expect(Parties.findOne).toHaveBeenCalledWith(partyId);
+      });
+
+      it('should fail if party does not exist', () => {
+        spyOn(Parties, 'findOne').and.returnValue(undefined);
+
+        expect(() => {
+          invite.call(loggedIn(), 'partyId', 'userId');
+        }).toThrowError(/404/);
+      });
+
+      it('should fail if logged in user is not the owner', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'notUserId'
+        });
+
+        expect(() => {
+          invite.call(loggedIn(), 'partyId', 'userId');
+        }).toThrowError(/404/);
+      });
+
+      it('should fail on public party', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId',
+          public: true
+        });
+
+        expect(() => {
+          invite.call(loggedIn(), 'partyId', 'userId');
+        }).toThrowError(/400/);
+      });
+
+      it('should NOT invite user who is the owner', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId'
+        });
+        spyOn(Parties, 'update');
+
+        invite.call(loggedIn(), 'partyId', 'userId');
+
+        expect(Parties.update).not.toHaveBeenCalled();
+      });
+
+      it('should NOT invite user who has been already invited', () => {
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId',
+          invited: ['invitedId']
+        });
+        spyOn(Parties, 'update');
+
+        invite.call(loggedIn(), 'partyId', 'invitedId');
+
+        expect(Parties.update).not.toHaveBeenCalled();
+      });
+
+      it('should invite user who has not been invited and is not the owner', () => {
+        const partyId = 'partyId';
+        const userId = 'notInvitedId';
+        spyOn(Parties, 'findOne').and.returnValue({
+          owner: 'userId',
+          invited: ['invitedId']
+        });
+        spyOn(Parties, 'update');
+        spyOn(Meteor.users, 'findOne').and.returnValue({});
+
+        invite.call(loggedIn(), partyId, userId);
+
+        expect(Parties.update).toHaveBeenCalledWith(partyId, {
+          $addToSet: {
+            invited: userId
+          }
+        });
+      });
+    });
+
+    describe('rsvp', () => {
+      function loggedIn(userId = 'userId') {
+        return {
+          userId
+        };
+      }
+
+      it('should be called from Method', () => {
+        spyOn(rsvp, 'apply');
+
+        try {
+          Meteor.call('rsvp');
+        } catch (e) {}
+
+        expect(rsvp.apply).toHaveBeenCalled();
+      });
+
+      it('should fail on missing partyId', () => {
+        expect(() => {
+          rsvp.call({});
+        }).toThrowError();
+      });
+
+      it('should fail on missing rsvp', () => {
+        expect(() => {
+          rsvp.call({}, 'partyId');
+        }).toThrowError();
+      });
+
+      it('should fail if not logged in', () => {
+        expect(() => {
+          rsvp.call({}, 'partyId', 'rsvp');
+        }).toThrowError(/403/);
+      });
+
+      it('should fail on wrong answer', () => {
+        expect(() => {
+          rsvp.call(loggedIn(), 'partyId', 'wrong');
+        }).toThrowError(/400/);
+      });
+
+      ['yes', 'maybe', 'no'].forEach((answer) => {
+        it(`should pass on '${answer}'`, () => {
+          expect(() => {
+            rsvp.call(loggedIn(), 'partyId', answer);
+          }).not.toThrowError(/400/);
+        });
+      });
+
+      // TODO: more tests  
+    });
+  });
+}
diff --git a/imports/api/parties/methods.ts b/imports/api/parties/methods.ts
new file mode 100644
index 0000000..e8aa1ad
--- /dev/null
+++ b/imports/api/parties/methods.ts
@@ -0,0 +1,144 @@
+import _ from 'underscore';
+import { Meteor } from 'meteor/meteor';
+import { check } from 'meteor/check';
+import { Email } from 'meteor/email';
+
+import { Parties } from './collection';
+
+function getContactEmail(user) {
+  if (user.emails && user.emails.length)
+    return user.emails[0].address;
+
+  if (user.services && user.services.facebook && user.services.facebook.email)
+    return user.services.facebook.email;
+
+  return null;
+}
+
+export function invite(partyId, userId) {
+  check(partyId, String);
+  check(userId, String);
+
+  if (!this.userId) {
+    throw new Meteor.Error(400, 'You have to be logged in!');
+  }
+
+  const party = Parties.findOne(partyId);
+
+  if (!party) {
+    throw new Meteor.Error(404, 'No such party!');
+  }
+
+  if (party.owner !== this.userId) {
+    throw new Meteor.Error(404, 'No permissions!');
+  }
+
+  if (party.public) {
+    throw new Meteor.Error(400, 'That party is public. No need to invite people.');
+  }
+
+  if (userId !== party.owner && ! _.contains(party.invited, userId)) {
+    Parties.update(partyId, {
+      $addToSet: {
+        invited: userId
+      }
+    });
+
+    const replyTo = getContactEmail(Meteor.users.findOne(this.userId));
+    const to = getContactEmail(Meteor.users.findOne(userId));
+
+    if (Meteor.isServer && to) {
+      Email.send({
+        to,
+        replyTo,
+        from: 'noreply@socially.com',
+        subject: `PARTY: ${party.title}`,
+        text: `
+          Hey, I just invited you to ${party.title} on Socially.
+          Come check it out: ${Meteor.absoluteUrl()}
+        `
+      });
+    }
+  }
+}
+
+export function rsvp(partyId, rsvp) {
+  check(partyId, String);
+  check(rsvp, String);
+
+  if (!this.userId) {
+    throw new Meteor.Error(403, 'You must be logged in to RSVP');
+  }
+
+  if (!_.contains(['yes', 'no', 'maybe'], rsvp)) {
+    throw new Meteor.Error(400, 'Invalid RSVP');
+  }
+
+  const party = Parties.findOne({
+    _id: partyId,
+    $or: [{
+      // is public
+      $and: [{
+        public: true
+      }, {
+        public: {
+          $exists: true
+        }
+      }]
+    },{
+      // is owner
+      $and: [{
+        owner: this.userId
+      }, {
+        owner: {
+          $exists: true
+        }
+      }]
+    }, {
+      // is invited
+      $and: [{
+        invited: this.userId
+      }, {
+        invited: {
+          $exists: true
+        }
+      }]
+    }]
+  });
+
+  if (!party) {
+    throw new Meteor.Error(404, 'No such party');
+  }
+
+  const hasUserRsvp = _.findWhere(party.rsvps, {
+    user: this.userId
+  });
+
+  if (!hasUserRsvp) {
+    // add new rsvp entry
+    Parties.update(partyId, {
+      $push: {
+        rsvps: {
+          rsvp,
+          user: this.userId
+        }
+      }
+    });
+  } else {
+    // update rsvp entry
+    const userId = this.userId;
+    Parties.update({
+      _id: partyId,
+      'rsvps.user': userId
+    }, {
+      $set: {
+        'rsvps.$.rsvp': rsvp
+      }
+    });
+  }
+}
+
+Meteor.methods({
+  invite,
+  rsvp
+});
diff --git a/imports/api/parties/publish.js b/imports/api/parties/publish.js
deleted file mode 100644
index 0d4d340..0000000
--- a/imports/api/parties/publish.js
+++ /dev/null
@@ -1,52 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-import { Counts } from 'meteor/tmeasday:publish-counts';
-
-import { Parties } from './collection';
-
-if (Meteor.isServer) {
-  Meteor.publish('parties', function(options, searchString) {
-    const selector = {
-      $or: [{
-        // the public parties
-        $and: [{
-          public: true
-        }, {
-          public: {
-            $exists: true
-          }
-        }]
-      }, {
-        // when logged in user is the owner
-        $and: [{
-          owner: this.userId
-        }, {
-          owner: {
-            $exists: true
-          }
-        }]
-      }, {
-        // when logged in user is one of invited
-        $and: [{
-          invited: this.userId
-        }, {
-          invited: {
-            $exists: true
-          }
-        }]
-      }]
-    };
-
-    if (typeof searchString === 'string' && searchString.length) {
-      selector.name = {
-        $regex: `.*${searchString}.*`,
-        $options : 'i'
-      };
-    }
-
-    Counts.publish(this, 'numberOfParties', Parties.find(selector), {
-      noReady: true
-    });
-
-    return Parties.find(selector, options);
-  });
-}
diff --git a/imports/api/parties/publish.ts b/imports/api/parties/publish.ts
new file mode 100644
index 0000000..0d4d340
--- /dev/null
+++ b/imports/api/parties/publish.ts
@@ -0,0 +1,52 @@
+import { Meteor } from 'meteor/meteor';
+import { Counts } from 'meteor/tmeasday:publish-counts';
+
+import { Parties } from './collection';
+
+if (Meteor.isServer) {
+  Meteor.publish('parties', function(options, searchString) {
+    const selector = {
+      $or: [{
+        // the public parties
+        $and: [{
+          public: true
+        }, {
+          public: {
+            $exists: true
+          }
+        }]
+      }, {
+        // when logged in user is the owner
+        $and: [{
+          owner: this.userId
+        }, {
+          owner: {
+            $exists: true
+          }
+        }]
+      }, {
+        // when logged in user is one of invited
+        $and: [{
+          invited: this.userId
+        }, {
+          invited: {
+            $exists: true
+          }
+        }]
+      }]
+    };
+
+    if (typeof searchString === 'string' && searchString.length) {
+      selector.name = {
+        $regex: `.*${searchString}.*`,
+        $options : 'i'
+      };
+    }
+
+    Counts.publish(this, 'numberOfParties', Parties.find(selector), {
+      noReady: true
+    });
+
+    return Parties.find(selector, options);
+  });
+}
diff --git a/imports/api/users.js b/imports/api/users.js
deleted file mode 100644
index 4c9fee9..0000000
--- a/imports/api/users.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-
-if (Meteor.isServer) {
-  Meteor.publish('users', function() {
-    return Meteor.users.find({}, {
-      fields: {
-        emails: 1,
-        profile: 1
-      }
-    });
-  });
-}
diff --git a/imports/api/users.ts b/imports/api/users.ts
new file mode 100644
index 0000000..4c9fee9
--- /dev/null
+++ b/imports/api/users.ts
@@ -0,0 +1,12 @@
+import { Meteor } from 'meteor/meteor';
+
+if (Meteor.isServer) {
+  Meteor.publish('users', function() {
+    return Meteor.users.find({}, {
+      fields: {
+        emails: 1,
+        profile: 1
+      }
+    });
+  });
+}
diff --git a/imports/startup/fixtures.js b/imports/startup/fixtures.js
deleted file mode 100644
index d92fb48..0000000
--- a/imports/startup/fixtures.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-import { Parties } from '../api/parties';
-
-Meteor.startup(() => {
-  if (Parties.find().count() === 0) {
-    const parties = [{
-      'name': 'Dubstep-Free Zone',
-      'description': 'Fast just got faster with Nexus S.'
-    }, {
-      'name': 'All dubstep all the time',
-      'description': 'Get it on!'
-    }, {
-      'name': 'Savage lounging',
-      'description': 'Leisure suit required. And only fiercest manners.'
-    }];
-
-    parties.forEach((party) => {
-      Parties.insert(party)
-    });
-  }
-});
diff --git a/imports/startup/fixtures.ts b/imports/startup/fixtures.ts
new file mode 100644
index 0000000..d92fb48
--- /dev/null
+++ b/imports/startup/fixtures.ts
@@ -0,0 +1,21 @@
+import { Meteor } from 'meteor/meteor';
+import { Parties } from '../api/parties';
+
+Meteor.startup(() => {
+  if (Parties.find().count() === 0) {
+    const parties = [{
+      'name': 'Dubstep-Free Zone',
+      'description': 'Fast just got faster with Nexus S.'
+    }, {
+      'name': 'All dubstep all the time',
+      'description': 'Get it on!'
+    }, {
+      'name': 'Savage lounging',
+      'description': 'Leisure suit required. And only fiercest manners.'
+    }];
+
+    parties.forEach((party) => {
+      Parties.insert(party)
+    });
+  }
+});
diff --git a/imports/ui/components/auth/auth.js b/imports/ui/components/auth/auth.js
deleted file mode 100644
index a87dd5e..0000000
--- a/imports/ui/components/auth/auth.js
+++ /dev/null
@@ -1,47 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import { Meteor } from 'meteor/meteor';
-import { Accounts } from 'meteor/accounts-base';
-
-import template from './auth.html';
-import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
-import { name as Login } from '../login/login';
-import { name as Register } from '../register/register';
-import { name as Password } from '../password/password';
-
-const name = 'auth';
-
-class Auth {
-  constructor($scope, $reactive) {
-    'ngInject';
-
-    $reactive(this).attach($scope);
-
-    this.helpers({
-      isLoggedIn() {
-        return !!Meteor.userId();
-      },
-      currentUser() {
-        return Meteor.user();
-      }
-    });
-  }
-
-  logout() {
-    Accounts.logout();
-  }
-}
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  DisplayNameFilter,
-  Login,
-  Register,
-  Password
-]).component(name, {
-  template,
-  controllerAs: name,
-  controller: Auth
-});
diff --git a/imports/ui/components/auth/auth.ts b/imports/ui/components/auth/auth.ts
new file mode 100644
index 0000000..b091db2
--- /dev/null
+++ b/imports/ui/components/auth/auth.ts
@@ -0,0 +1,52 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+import { Accounts } from 'meteor/accounts-base';
+
+import template from './auth.html';
+import DisplayNameFilter from '../../filters/displayNameFilter';
+import { LoginNg1Module } from '../login/login';
+import { RegisterNg1Module } from '../register/register';
+import { PasswordNg1Module } from '../password/password';
+
+const name = 'auth';
+
+class Auth {
+  constructor($scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+
+    this.helpers({
+      isLoggedIn() {
+        return !!Meteor.userId();
+      },
+      currentUser() {
+        return Meteor.user();
+      }
+    });
+  }
+
+  logout() {
+    Accounts.logout();
+  }
+}
+
+// create a module
+export const AuthNg1Module = angular.module(name, [
+  angularMeteor,
+  DisplayNameFilter.name,
+  LoginNg1Module.name,
+  RegisterNg1Module.name,
+  PasswordNg1Module.name
+]);
+
+export function registerAuth() {
+  AuthNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      controller: Auth
+    });
+}
diff --git a/imports/ui/components/login/login.js b/imports/ui/components/login/login.js
deleted file mode 100644
index 376fcaf..0000000
--- a/imports/ui/components/login/login.js
+++ /dev/null
@@ -1,35 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import uiRouter from 'angular-ui-router';
-
-import { Meteor } from 'meteor/meteor';
-
-import webTemplate from './web.html';
-import { Login as LoginWeb } from './web';
-import mobileTemplate from './mobile.html';
-import { Login as LoginMobile } from './mobile';
-
-const name = 'login';
-const template = Meteor.isCordova ? mobileTemplate : webTemplate;
-const controller = Meteor.isCordova ? LoginMobile : LoginWeb;
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  uiRouter
-])
-  .component(name, {
-    template,
-    controller,
-    controllerAs: name
-  })
-  .config(config);
-
-function config($stateProvider) {
-  'ngInject';
-
-  $stateProvider.state('login', {
-    url: '/login',
-    template: '<login></login>'
-  });
-}
diff --git a/imports/ui/components/login/login.ts b/imports/ui/components/login/login.ts
new file mode 100644
index 0000000..31c0f92
--- /dev/null
+++ b/imports/ui/components/login/login.ts
@@ -0,0 +1,39 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as uiRouter from 'angular-ui-router';
+
+import { Meteor } from 'meteor/meteor';
+
+import webTemplate from './web.html';
+import LoginWeb from './web';
+import mobileTemplate from './mobile.html';
+import LoginMobile from './mobile';
+
+const name = 'login';
+const template = Meteor.isCordova ? mobileTemplate : webTemplate;
+const controller = Meteor.isCordova ? LoginMobile : LoginWeb;
+
+// create a module
+export const LoginNg1Module = angular.module(name, [
+  angularMeteor,
+  uiRouter
+]);
+
+export function registerLogin() {
+  LoginNg1Module
+    .component(name, {
+      template,
+      controller,
+      controllerAs: name
+    })
+    .config(config);
+}
+
+function config($stateProvider) {
+  'ngInject';
+
+  $stateProvider.state('login', {
+    url: '/login',
+    template: '<login></login>'
+  });
+}
diff --git a/imports/ui/components/login/mobile.js b/imports/ui/components/login/mobile.js
deleted file mode 100644
index 798d563..0000000
--- a/imports/ui/components/login/mobile.js
+++ /dev/null
@@ -1,40 +0,0 @@
-import { Accounts } from 'meteor/accounts-base';
-
-export class Login {
-  constructor($scope, $reactive, $state) {
-    'ngInject';
-
-    this.$state = $state;
-
-    $reactive(this).attach($scope);
-
-    this.isStepTwo = false;
-    this.phoneNumber = '';
-    this.verificationCode = '';
-    this.error = '';
-  }
-
-  verifyPhone() {
-    Accounts.requestPhoneVerification(this.phoneNumber, this.$bindToContext((err) => {
-      if (err) {
-        // display also reason of Meteor.Error
-        this.error = err.reason || err;
-      } else {
-        this.error = '';
-        // move to code verification
-        this.isStepTwo = true;
-      }
-    }));
-  }
-
-  verifyCode() {
-    Accounts.verifyPhone(this.phoneNumber, this.verificationCode, this.$bindToContext((err) => {
-      if (err) {
-        this.error = err.reason || err;
-      } else {
-        // redirect to parties list
-        this.$state.go('parties');
-      }
-    }));
-  }
-}
diff --git a/imports/ui/components/login/mobile.ts b/imports/ui/components/login/mobile.ts
new file mode 100644
index 0000000..798d563
--- /dev/null
+++ b/imports/ui/components/login/mobile.ts
@@ -0,0 +1,40 @@
+import { Accounts } from 'meteor/accounts-base';
+
+export class Login {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.isStepTwo = false;
+    this.phoneNumber = '';
+    this.verificationCode = '';
+    this.error = '';
+  }
+
+  verifyPhone() {
+    Accounts.requestPhoneVerification(this.phoneNumber, this.$bindToContext((err) => {
+      if (err) {
+        // display also reason of Meteor.Error
+        this.error = err.reason || err;
+      } else {
+        this.error = '';
+        // move to code verification
+        this.isStepTwo = true;
+      }
+    }));
+  }
+
+  verifyCode() {
+    Accounts.verifyPhone(this.phoneNumber, this.verificationCode, this.$bindToContext((err) => {
+      if (err) {
+        this.error = err.reason || err;
+      } else {
+        // redirect to parties list
+        this.$state.go('parties');
+      }
+    }));
+  }
+}
diff --git a/imports/ui/components/login/web.js b/imports/ui/components/login/web.js
deleted file mode 100644
index bc7b752..0000000
--- a/imports/ui/components/login/web.js
+++ /dev/null
@@ -1,30 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-
-export class Login {
-  constructor($scope, $reactive, $state) {
-    'ngInject';
-
-    this.$state = $state;
-
-    $reactive(this).attach($scope);
-
-    this.credentials = {
-      email: '',
-      password: ''
-    };
-
-    this.error = '';
-  }
-
-  login() {
-    Meteor.loginWithPassword(this.credentials.email, this.credentials.password,
-      this.$bindToContext((err) => {
-        if (err) {
-          this.error = err;
-        } else {
-          this.$state.go('parties');
-        }
-      })
-    );
-  }
-}
diff --git a/imports/ui/components/login/web.ts b/imports/ui/components/login/web.ts
new file mode 100644
index 0000000..bc7b752
--- /dev/null
+++ b/imports/ui/components/login/web.ts
@@ -0,0 +1,30 @@
+import { Meteor } from 'meteor/meteor';
+
+export class Login {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.credentials = {
+      email: '',
+      password: ''
+    };
+
+    this.error = '';
+  }
+
+  login() {
+    Meteor.loginWithPassword(this.credentials.email, this.credentials.password,
+      this.$bindToContext((err) => {
+        if (err) {
+          this.error = err;
+        } else {
+          this.$state.go('parties');
+        }
+      })
+    );
+  }
+}
diff --git a/imports/ui/components/navigation/navigation.js b/imports/ui/components/navigation/navigation.js
deleted file mode 100644
index 5e33f59..0000000
--- a/imports/ui/components/navigation/navigation.js
+++ /dev/null
@@ -1,14 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import template from './navigation.html';
-
-const name = 'navigation';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor
-]).component(name, {
-  template,
-  controllerAs: name
-});
diff --git a/imports/ui/components/navigation/navigation.ts b/imports/ui/components/navigation/navigation.ts
new file mode 100644
index 0000000..67acb8a
--- /dev/null
+++ b/imports/ui/components/navigation/navigation.ts
@@ -0,0 +1,19 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import template from './navigation.html';
+
+const name = 'navigation';
+
+// create a module
+export const NavigationNg1Module = angular.module(name, [
+  angularMeteor
+]);
+
+export function registerNavigation() {
+  NavigationNg1Module
+    .component(name, {
+      template,
+      controllerAs: name
+    });
+}
diff --git a/imports/ui/components/partiesList/client/partiesList.tests.js b/imports/ui/components/partiesList/client/partiesList.tests.js
deleted file mode 100644
index 176da85..0000000
--- a/imports/ui/components/partiesList/client/partiesList.tests.js
+++ /dev/null
@@ -1,50 +0,0 @@
-import { name as PartiesList } from '../partiesList';
-import 'angular-mocks';
-
-describe('PartiesList', () => {
-  beforeEach(() => {
-    window.module(PartiesList);
-  });
-
-  describe('controller', () => {
-    let controller;
-
-    beforeEach(() => {
-      inject(($rootScope, $componentController) => {
-        controller = $componentController(PartiesList, {
-          $scope: $rootScope.$new(true)
-        });
-      });
-    });
-
-    it('should have perPage that equals 3 by default', () => {
-      expect(controller.perPage).toEqual(3);
-    });
-
-    it('should have page that equals 1 by default', () => {
-      expect(controller.page).toEqual(1);
-    });
-
-    it('should sort by name - ASC', () => {
-      expect(controller.sort).toEqual({
-        name: 1
-      });
-    });
-
-    it('should be able to change sorting', () => {
-      controller.sortChanged({
-        name: -1
-      });
-
-      expect(controller.sort).toEqual({
-        name: -1
-      });
-    });
-
-    it('should be able to change page', () => {
-      controller.pageChanged(2);
-
-      expect(controller.page).toEqual(2);
-    });
-  });
-});
diff --git a/imports/ui/components/partiesList/client/partiesList.tests.ts b/imports/ui/components/partiesList/client/partiesList.tests.ts
new file mode 100644
index 0000000..3bee850
--- /dev/null
+++ b/imports/ui/components/partiesList/client/partiesList.tests.ts
@@ -0,0 +1,50 @@
+import PartiesList from '../partiesList';
+import 'angular-mocks';
+
+describe('PartiesList', () => {
+  beforeEach(() => {
+    window.module(PartiesList.name);
+  });
+
+  describe('controller', () => {
+    let controller;
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartiesList.name, {
+          $scope: $rootScope.$new(true)
+        });
+      });
+    });
+
+    it('should have perPage that equals 3 by default', () => {
+      expect(controller.perPage).toEqual(3);
+    });
+
+    it('should have page that equals 1 by default', () => {
+      expect(controller.page).toEqual(1);
+    });
+
+    it('should sort by name - ASC', () => {
+      expect(controller.sort).toEqual({
+        name: 1
+      });
+    });
+
+    it('should be able to change sorting', () => {
+      controller.sortChanged({
+        name: -1
+      });
+
+      expect(controller.sort).toEqual({
+        name: -1
+      });
+    });
+
+    it('should be able to change page', () => {
+      controller.pageChanged(2);
+
+      expect(controller.page).toEqual(2);
+    });
+  });
+});
diff --git a/imports/ui/components/partiesList/partiesList.js b/imports/ui/components/partiesList/partiesList.js
deleted file mode 100644
index df916d9..0000000
--- a/imports/ui/components/partiesList/partiesList.js
+++ /dev/null
@@ -1,105 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import uiRouter from 'angular-ui-router';
-import utilsPagination from 'angular-utils-pagination';
-
-import { Counts } from 'meteor/tmeasday:publish-counts';
-import { Meteor } from 'meteor/meteor';
-
-import webTemplate from './web.html';
-import mobileTemplate from './mobile.html';
-import { Parties } from '../../../api/parties';
-import { name as PartiesSort } from '../partiesSort/partiesSort';
-import { name as PartiesMap } from '../partiesMap/partiesMap';
-import { name as PartyAddButton } from '../partyAddButton/partyAddButton';
-import { name as PartyRemove } from '../partyRemove/partyRemove';
-import { name as PartyCreator } from '../partyCreator/partyCreator';
-import { name as PartyRsvp } from '../partyRsvp/partyRsvp';
-import { name as PartyRsvpsList } from '../partyRsvpsList/partyRsvpsList';
-import { name as PartyImage } from '../partyImage/partyImage';
-
-class PartiesList {
-  constructor($scope, $reactive) {
-    'ngInject';
-
-    $reactive(this).attach($scope);
-
-    this.perPage = 3;
-    this.page = 1;
-    this.sort = {
-      name: 1
-    };
-    this.searchText = '';
-
-    this.subscribe('parties', () => [{
-        limit: parseInt(this.perPage),
-        skip: parseInt((this.getReactively('page') - 1) * this.perPage),
-        sort: this.getReactively('sort')
-      }, this.getReactively('searchText')
-    ]);
-
-    this.subscribe('users');
-    this.subscribe('images');
-
-    this.helpers({
-      parties() {
-        return Parties.find({}, {
-          sort : this.getReactively('sort')
-        });
-      },
-      partiesCount() {
-        return Counts.get('numberOfParties');
-      },
-      isLoggedIn() {
-        return !!Meteor.userId();
-      },
-      currentUserId() {
-        return Meteor.userId();
-      }
-    });
-  }
-
-  isOwner(party) {
-    return this.isLoggedIn && party.owner === this.currentUserId;
-  }
-
-  pageChanged(newPage) {
-    this.page = newPage;
-  }
-
-  sortChanged(sort) {
-    this.sort = sort;
-  }
-}
-
-const name = 'partiesList';
-const template = Meteor.isCordova ? mobileTemplate : webTemplate;
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  uiRouter,
-  utilsPagination,
-  PartiesSort,
-  PartiesMap,
-  PartyAddButton,
-  PartyRemove,
-  PartyCreator,
-  PartyRsvp,
-  PartyRsvpsList,
-  PartyImage
-]).component(name, {
-  template,
-  controllerAs: name,
-  controller: PartiesList
-})
-  .config(config);
-
-function config($stateProvider) {
-  'ngInject';
-  $stateProvider
-    .state('parties', {
-      url: '/parties',
-      template: '<parties-list></parties-list>'
-    });
-}
diff --git a/imports/ui/components/partiesList/partiesList.ts b/imports/ui/components/partiesList/partiesList.ts
new file mode 100644
index 0000000..0d2fb0f
--- /dev/null
+++ b/imports/ui/components/partiesList/partiesList.ts
@@ -0,0 +1,110 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as uiRouter from 'angular-ui-router';
+import * as utilsPagination from 'angular-utils-pagination';
+
+import { Counts } from 'meteor/tmeasday:publish-counts';
+import { Meteor } from 'meteor/meteor';
+
+import webTemplate from './web.html';
+import mobileTemplate from './mobile.html';
+import { Parties } from '../../../api/parties';
+import { PartiesSortNg1Module } from '../partiesSort/partiesSort';
+import { PartiesMapNg1Module } from '../partiesMap/partiesMap';
+import { PartyAddButtonNg1Module } from '../partyAddButton/partyAddButton';
+import { PartyRemoveNg1Module } from '../partyRemove/partyRemove';
+import { PartyCreatorNg1Module } from '../partyCreator/partyCreator';
+import { PartyRsvpNg1Module } from '../partyRsvp/partyRsvp';
+import { PartyRsvpsListNg1Module } from '../partyRsvpsList/partyRsvpsList';
+import { PartyImageNg1Module } from '../partyImage/partyImage';
+
+class PartiesList {
+  constructor($scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+
+    this.perPage = 3;
+    this.page = 1;
+    this.sort = {
+      name: 1
+    };
+    this.searchText = '';
+
+    this.subscribe('parties', () => [{
+        limit: parseInt(this.perPage),
+        skip: parseInt((this.getReactively('page') - 1) * this.perPage),
+        sort: this.getReactively('sort')
+      }, this.getReactively('searchText')
+    ]);
+
+    this.subscribe('users');
+    this.subscribe('images');
+
+    this.helpers({
+      parties() {
+        return Parties.find({}, {
+          sort : this.getReactively('sort')
+        });
+      },
+      partiesCount() {
+        return Counts.get('numberOfParties');
+      },
+      isLoggedIn() {
+        return !!Meteor.userId();
+      },
+      currentUserId() {
+        return Meteor.userId();
+      }
+    });
+  }
+
+  isOwner(party) {
+    return this.isLoggedIn && party.owner === this.currentUserId;
+  }
+
+  pageChanged(newPage) {
+    this.page = newPage;
+  }
+
+  sortChanged(sort) {
+    this.sort = sort;
+  }
+}
+
+const name = 'partiesList';
+const template = Meteor.isCordova ? mobileTemplate : webTemplate;
+
+// create a module
+export const PartiesListNg1Module = angular.module(name, [
+  angularMeteor,
+  uiRouter,
+  utilsPagination,
+  PartiesSortNg1Module.name,
+  PartiesMapNg1Module.name,
+  PartyAddButtonNg1Module.name,
+  PartyRemoveNg1Module.name,
+  PartyCreatorNg1Module.name,
+  PartyRsvpNg1Module.name,
+  PartyRsvpsListNg1Module.name,
+  PartyImageNg1Module.name
+]);
+
+export function registerPartiesList() {
+  PartiesListNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      controller: PartiesList
+    })
+    .config(config);
+}
+
+function config($stateProvider) {
+  'ngInject';
+  $stateProvider
+    .state('parties', {
+      url: '/parties',
+      template: '<parties-list></parties-list>'
+    });
+}
diff --git a/imports/ui/components/partiesMap/partiesMap.js b/imports/ui/components/partiesMap/partiesMap.js
deleted file mode 100644
index 1c94faf..0000000
--- a/imports/ui/components/partiesMap/partiesMap.js
+++ /dev/null
@@ -1,37 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import 'angular-simple-logger';
-import 'angular-google-maps';
-
-import template from './partiesMap.html';
-
-/**
- * PartiesMap component
- */
-class PartiesMap {
-  constructor() {
-    this.map = {
-      center: {
-        latitude: 45,
-        longitude: -73
-      },
-      zoom: 8
-    };
-  }
-}
-
-const name = 'partiesMap';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  'nemLogging', // https://github.com/angular-ui/angular-google-maps/issues/1633
-  'uiGmapgoogle-maps'
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    parties: '='
-  },
-  controller: PartiesMap
-});
diff --git a/imports/ui/components/partiesMap/partiesMap.ts b/imports/ui/components/partiesMap/partiesMap.ts
new file mode 100644
index 0000000..66543d7
--- /dev/null
+++ b/imports/ui/components/partiesMap/partiesMap.ts
@@ -0,0 +1,42 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import 'angular-simple-logger';
+import 'angular-google-maps';
+
+import template from './partiesMap.html';
+
+/**
+ * PartiesMap component
+ */
+class PartiesMap {
+  constructor() {
+    this.map = {
+      center: {
+        latitude: 45,
+        longitude: -73
+      },
+      zoom: 8
+    };
+  }
+}
+
+const name = 'partiesMap';
+
+// create a module
+export const PartiesMapNg1Module = angular.module(name, [
+  angularMeteor,
+  'nemLogging', // https://github.com/angular-ui/angular-google-maps/issues/1633
+  'uiGmapgoogle-maps'
+]);
+
+export function registerPartiesMap() {
+  PartiesMapNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      bindings: {
+        parties: '='
+      },
+      controller: PartiesMap
+    });
+}
diff --git a/imports/ui/components/partiesSort/client/partiesSort.tests.js b/imports/ui/components/partiesSort/client/partiesSort.tests.js
deleted file mode 100644
index 09d81b4..0000000
--- a/imports/ui/components/partiesSort/client/partiesSort.tests.js
+++ /dev/null
@@ -1,54 +0,0 @@
-import { name as PartiesSort } from '../partiesSort';
-import 'angular-mocks';
-
-describe('PartiesSort', () => {
-  beforeEach(() => {
-    window.module(PartiesSort);
-  });
-
-  describe('controller', () => {
-    let controller;
-    const onChange = function() {};
-    const property = 'name';
-    const order = -1;
-
-
-    beforeEach(() => {
-      inject(($rootScope, $componentController) => {
-        controller = $componentController(PartiesSort, {
-          $scope: $rootScope.$new(true)
-        }, {
-          onChange,
-          property,
-          order
-        });
-      });
-    });
-
-    it('should set property', () => {
-      expect(controller.property).toEqual(property);
-    });
-
-    it('should set order', () => {
-      expect(controller.order).toEqual(order);
-    });
-
-    it('should set onChange', () => {
-      expect(controller.onChange).toBe(onChange);
-    });
-
-    describe('changed()', () => {
-      it('should call onChange expression', () => {
-        spyOn(controller, 'onChange');
-
-        controller.changed();
-
-        expect(controller.onChange).toHaveBeenCalledWith({
-          sort: {
-            [property]: order
-          }
-        });
-      });
-    });
-  });
-});
diff --git a/imports/ui/components/partiesSort/client/partiesSort.tests.ts b/imports/ui/components/partiesSort/client/partiesSort.tests.ts
new file mode 100644
index 0000000..09d81b4
--- /dev/null
+++ b/imports/ui/components/partiesSort/client/partiesSort.tests.ts
@@ -0,0 +1,54 @@
+import { name as PartiesSort } from '../partiesSort';
+import 'angular-mocks';
+
+describe('PartiesSort', () => {
+  beforeEach(() => {
+    window.module(PartiesSort);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const onChange = function() {};
+    const property = 'name';
+    const order = -1;
+
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartiesSort, {
+          $scope: $rootScope.$new(true)
+        }, {
+          onChange,
+          property,
+          order
+        });
+      });
+    });
+
+    it('should set property', () => {
+      expect(controller.property).toEqual(property);
+    });
+
+    it('should set order', () => {
+      expect(controller.order).toEqual(order);
+    });
+
+    it('should set onChange', () => {
+      expect(controller.onChange).toBe(onChange);
+    });
+
+    describe('changed()', () => {
+      it('should call onChange expression', () => {
+        spyOn(controller, 'onChange');
+
+        controller.changed();
+
+        expect(controller.onChange).toHaveBeenCalledWith({
+          sort: {
+            [property]: order
+          }
+        });
+      });
+    });
+  });
+});
diff --git a/imports/ui/components/partiesSort/partiesSort.js b/imports/ui/components/partiesSort/partiesSort.js
deleted file mode 100644
index d5ff3fb..0000000
--- a/imports/ui/components/partiesSort/partiesSort.js
+++ /dev/null
@@ -1,34 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import template from './partiesSort.html';
-
-class PartiesSort {
-  constructor() {
-    this.changed();
-  }
-
-  changed() {
-    this.onChange({
-      sort: {
-        [this.property]: parseInt(this.order)
-      }
-    });
-  }
-}
-
-const name = 'partiesSort';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor
-]).component(name, {
-  template,
-  bindings: {
-    onChange: '&',
-    property: '@',
-    order: '@'
-  },
-  controllerAs: name,
-  controller: PartiesSort
-});
diff --git a/imports/ui/components/partiesSort/partiesSort.ts b/imports/ui/components/partiesSort/partiesSort.ts
new file mode 100644
index 0000000..1f52a88
--- /dev/null
+++ b/imports/ui/components/partiesSort/partiesSort.ts
@@ -0,0 +1,39 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import template from './partiesSort.html';
+
+class PartiesSort {
+  constructor() {
+    this.changed();
+  }
+
+  changed() {
+    this.onChange({
+      sort: {
+        [this.property]: parseInt(this.order)
+      }
+    });
+  }
+}
+
+const name = 'partiesSort';
+
+// create a module
+export const PartiesSortNg1Module = angular.module(name, [
+  angularMeteor
+]);
+
+export function registerPartiesSort() {
+  PartiesSortNg1Module
+    .component(name, {
+      template,
+      bindings: {
+        onChange: '&',
+        property: '@',
+        order: '@'
+      },
+      controllerAs: name,
+      controller: PartiesSort
+    });
+}
diff --git a/imports/ui/components/partyAdd/client/partyAdd.tests.js b/imports/ui/components/partyAdd/client/partyAdd.tests.js
deleted file mode 100644
index 76765c0..0000000
--- a/imports/ui/components/partyAdd/client/partyAdd.tests.js
+++ /dev/null
@@ -1,65 +0,0 @@
-import { Meteor } from 'meteor/meteor';
-import { name as PartyAdd } from '../partyAdd';
-import { Parties } from '../../../../api/parties';
-import 'angular-mocks';
-
-describe('PartyAdd', () => {
-  beforeEach(() => {
-    window.module(PartyAdd);
-  });
-
-  describe('controller', () => {
-    let controller;
-    const party = {
-      name: 'Foo',
-      description: 'Birthday of Foo',
-      public: true
-    };
-    const user = {
-      _id: 'userId'
-    };
-
-    beforeEach(() => {
-      inject(($rootScope, $componentController) => {
-        controller = $componentController(PartyAdd, {
-          $scope: $rootScope.$new(true)
-        });
-      });
-
-      spyOn(Meteor, 'userId').and.returnValue(user._id);
-    });
-
-    describe('reset()', () => {
-      it('should clean up party object', () => {
-        controller.party = party;
-        controller.reset();
-
-        expect(controller.party).toEqual({});
-      });
-    });
-
-    describe('submit()', () => {
-      beforeEach(() => {
-        spyOn(Parties, 'insert');
-        spyOn(controller, 'reset').and.callThrough();
-
-        controller.party = party;
-
-        controller.submit();
-      });
-
-      it('should insert a new party', () => {
-        expect(Parties.insert).toHaveBeenCalledWith({
-          name: party.name,
-          description: party.description,
-          public: party.public,
-          owner: user._id
-        });
-      });
-
-      it('should call reset()', () => {
-        expect(controller.reset).toHaveBeenCalled();
-      });
-    });
-  });
-});
diff --git a/imports/ui/components/partyAdd/client/partyAdd.tests.ts b/imports/ui/components/partyAdd/client/partyAdd.tests.ts
new file mode 100644
index 0000000..76765c0
--- /dev/null
+++ b/imports/ui/components/partyAdd/client/partyAdd.tests.ts
@@ -0,0 +1,65 @@
+import { Meteor } from 'meteor/meteor';
+import { name as PartyAdd } from '../partyAdd';
+import { Parties } from '../../../../api/parties';
+import 'angular-mocks';
+
+describe('PartyAdd', () => {
+  beforeEach(() => {
+    window.module(PartyAdd);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const party = {
+      name: 'Foo',
+      description: 'Birthday of Foo',
+      public: true
+    };
+    const user = {
+      _id: 'userId'
+    };
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartyAdd, {
+          $scope: $rootScope.$new(true)
+        });
+      });
+
+      spyOn(Meteor, 'userId').and.returnValue(user._id);
+    });
+
+    describe('reset()', () => {
+      it('should clean up party object', () => {
+        controller.party = party;
+        controller.reset();
+
+        expect(controller.party).toEqual({});
+      });
+    });
+
+    describe('submit()', () => {
+      beforeEach(() => {
+        spyOn(Parties, 'insert');
+        spyOn(controller, 'reset').and.callThrough();
+
+        controller.party = party;
+
+        controller.submit();
+      });
+
+      it('should insert a new party', () => {
+        expect(Parties.insert).toHaveBeenCalledWith({
+          name: party.name,
+          description: party.description,
+          public: party.public,
+          owner: user._id
+        });
+      });
+
+      it('should call reset()', () => {
+        expect(controller.reset).toHaveBeenCalled();
+      });
+    });
+  });
+});
diff --git a/imports/ui/components/partyAdd/partyAdd.js b/imports/ui/components/partyAdd/partyAdd.js
deleted file mode 100644
index 0ac9f9c..0000000
--- a/imports/ui/components/partyAdd/partyAdd.js
+++ /dev/null
@@ -1,44 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyAdd.html';
-import { Parties } from '../../../api/parties';
-import { name as PartyUpload } from '../partyUpload/partyUpload';
-
-class PartyAdd {
-  constructor() {
-    this.party = {};
-  }
-
-  submit() {
-    this.party.owner = Meteor.userId();
-    Parties.insert(this.party);
-
-    if(this.done) {
-      this.done();
-    }
-
-    this.reset();
-  }
-
-  reset() {
-    this.party = {};
-  }
-}
-
-const name = 'partyAdd';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  PartyUpload
-]).component(name, {
-  template,
-  bindings: {
-    done: '&?'
-  },
-  controllerAs: name,
-  controller: PartyAdd
-});
diff --git a/imports/ui/components/partyAdd/partyAdd.ts b/imports/ui/components/partyAdd/partyAdd.ts
new file mode 100644
index 0000000..827acbf
--- /dev/null
+++ b/imports/ui/components/partyAdd/partyAdd.ts
@@ -0,0 +1,49 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyAdd.html';
+import { Parties } from '../../../api/parties';
+import { PartyUploadNg1Module } from '../partyUpload/partyUpload';
+
+class PartyAdd {
+  constructor() {
+    this.party = {};
+  }
+
+  submit() {
+    this.party.owner = Meteor.userId();
+    Parties.insert(this.party);
+
+    if(this.done) {
+      this.done();
+    }
+
+    this.reset();
+  }
+
+  reset() {
+    this.party = {};
+  }
+}
+
+const name = 'partyAdd';
+
+// create a module
+export const PartyAddNg1Module = angular.module(name, [
+  angularMeteor,
+  PartyUploadNg1Module.name
+]);
+
+export function registerPartyAdd() {
+  PartyAddNg1Module
+    .component(name, {
+      template,
+      bindings: {
+        done: '&?'
+      },
+      controllerAs: name,
+      controller: PartyAdd
+    });
+}
diff --git a/imports/ui/components/partyAddButton/partyAddButton.js b/imports/ui/components/partyAddButton/partyAddButton.js
deleted file mode 100644
index cadd70c..0000000
--- a/imports/ui/components/partyAddButton/partyAddButton.js
+++ /dev/null
@@ -1,45 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import buttonTemplate from './partyAddButton.html';
-import modalTemplate from './partyAddModal.html';
-import { name as PartyAdd } from '../partyAdd/partyAdd';
-
-class PartyAddButton {
-  constructor($mdDialog, $mdMedia) {
-    'ngInject';
-
-    this.$mdDialog = $mdDialog;
-    this.$mdMedia = $mdMedia
-  }
-
-  open(event) {
-    this.$mdDialog.show({
-      controller($mdDialog) {
-        'ngInject';
-
-        this.close = () => {
-          $mdDialog.hide();
-        }
-      },
-      controllerAs: 'partyAddModal',
-      template: modalTemplate,
-      targetEvent: event,
-      parent: angular.element(document.body),
-      clickOutsideToClose: true,
-      fullscreen: this.$mdMedia('sm') || this.$mdMedia('xs')
-    });
-  }
-}
-
-const name = 'partyAddButton';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  PartyAdd
-]).component(name, {
-  template: buttonTemplate,
-  controllerAs: name,
-  controller: PartyAddButton
-});
diff --git a/imports/ui/components/partyAddButton/partyAddButton.ts b/imports/ui/components/partyAddButton/partyAddButton.ts
new file mode 100644
index 0000000..94d3460
--- /dev/null
+++ b/imports/ui/components/partyAddButton/partyAddButton.ts
@@ -0,0 +1,50 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import * as buttonTemplate from './partyAddButton.html';
+import * as modalTemplate from './partyAddModal.html';
+import { PartyAddNg1Module } from '../partyAdd/partyAdd';
+
+class PartyAddButton {
+  constructor($mdDialog, $mdMedia) {
+    'ngInject';
+
+    this.$mdDialog = $mdDialog;
+    this.$mdMedia = $mdMedia
+  }
+
+  open(event) {
+    this.$mdDialog.show({
+      controller($mdDialog) {
+        'ngInject';
+
+        this.close = () => {
+          $mdDialog.hide();
+        }
+      },
+      controllerAs: 'partyAddModal',
+      template: modalTemplate,
+      targetEvent: event,
+      parent: angular.element(document.body),
+      clickOutsideToClose: true,
+      fullscreen: this.$mdMedia('sm') || this.$mdMedia('xs')
+    });
+  }
+}
+
+const name = 'partyAddButton';
+
+// create a module
+export const PartyAddButtonNg1Module = angular.module(name, [
+  angularMeteor,
+  PartyAddNg1Module.name
+]);
+
+export function registerPartyAddButton() {
+  PartyAddButtonNg1Module
+    .component(name, {
+      template: buttonTemplate,
+      controllerAs: name,
+      controller: PartyAddButton
+    });
+}
diff --git a/imports/ui/components/partyCreator/client/partyCreator.tests.js b/imports/ui/components/partyCreator/client/partyCreator.tests.js
deleted file mode 100644
index dabb0b5..0000000
--- a/imports/ui/components/partyCreator/client/partyCreator.tests.js
+++ /dev/null
@@ -1,81 +0,0 @@
-import { name as PartyCreator } from '../partyCreator';
-import { Meteor } from 'meteor/meteor';
-import 'angular-mocks';
-
-describe('PartyCreator', () => {
-  beforeEach(() => {
-    window.module(PartyCreator);
-  });
-
-  describe('controller', () => {
-    let $rootScope;
-    let $componentController;
-    const party = {
-      _id: 'partyId'
-    };
-
-    beforeEach(() => {
-      inject((_$rootScope_, _$componentController_) => {
-        $rootScope = _$rootScope_;
-        $componentController = _$componentController_;
-      });
-    });
-
-    function component(bindings) {
-      return $componentController(PartyCreator, {
-        $scope: $rootScope.$new(true)
-      }, bindings);
-    }
-
-    it('should return an empty string if there is no party', () => {
-      const controller = component({
-        party: undefined
-      });
-
-      expect(controller.creator).toEqual('');
-    });
-
-    it('should say `me` if logged in is the owner', () => {
-      const owner = 'userId';
-      // logged in
-      spyOn(Meteor, 'userId').and.returnValue(owner);
-      const controller = component({
-        party: {
-          owner
-        }
-      });
-
-      expect(controller.creator).toEqual('me');
-    });
-
-    it('should say `nobody` if user does not exist', () => {
-      const owner = 'userId';
-      // not logged in
-      spyOn(Meteor, 'userId').and.returnValue(null);
-      // no user found
-      spyOn(Meteor.users, 'findOne').and.returnValue(undefined);
-      const controller = component({
-        party: {
-          owner
-        }
-      });
-
-      expect(controller.creator).toEqual('nobody');
-    });
-
-    it('should return user data if user exists and it is not logged one', () => {
-      const owner = 'userId';
-      // not logged in
-      spyOn(Meteor, 'userId').and.returnValue(null);
-      // user found
-      spyOn(Meteor.users, 'findOne').and.returnValue('found');
-      const controller = component({
-        party: {
-          owner
-        }
-      });
-
-      expect(controller.creator).toEqual('found');
-    });
-  });
-});
diff --git a/imports/ui/components/partyCreator/client/partyCreator.tests.ts b/imports/ui/components/partyCreator/client/partyCreator.tests.ts
new file mode 100644
index 0000000..dabb0b5
--- /dev/null
+++ b/imports/ui/components/partyCreator/client/partyCreator.tests.ts
@@ -0,0 +1,81 @@
+import { name as PartyCreator } from '../partyCreator';
+import { Meteor } from 'meteor/meteor';
+import 'angular-mocks';
+
+describe('PartyCreator', () => {
+  beforeEach(() => {
+    window.module(PartyCreator);
+  });
+
+  describe('controller', () => {
+    let $rootScope;
+    let $componentController;
+    const party = {
+      _id: 'partyId'
+    };
+
+    beforeEach(() => {
+      inject((_$rootScope_, _$componentController_) => {
+        $rootScope = _$rootScope_;
+        $componentController = _$componentController_;
+      });
+    });
+
+    function component(bindings) {
+      return $componentController(PartyCreator, {
+        $scope: $rootScope.$new(true)
+      }, bindings);
+    }
+
+    it('should return an empty string if there is no party', () => {
+      const controller = component({
+        party: undefined
+      });
+
+      expect(controller.creator).toEqual('');
+    });
+
+    it('should say `me` if logged in is the owner', () => {
+      const owner = 'userId';
+      // logged in
+      spyOn(Meteor, 'userId').and.returnValue(owner);
+      const controller = component({
+        party: {
+          owner
+        }
+      });
+
+      expect(controller.creator).toEqual('me');
+    });
+
+    it('should say `nobody` if user does not exist', () => {
+      const owner = 'userId';
+      // not logged in
+      spyOn(Meteor, 'userId').and.returnValue(null);
+      // no user found
+      spyOn(Meteor.users, 'findOne').and.returnValue(undefined);
+      const controller = component({
+        party: {
+          owner
+        }
+      });
+
+      expect(controller.creator).toEqual('nobody');
+    });
+
+    it('should return user data if user exists and it is not logged one', () => {
+      const owner = 'userId';
+      // not logged in
+      spyOn(Meteor, 'userId').and.returnValue(null);
+      // user found
+      spyOn(Meteor.users, 'findOne').and.returnValue('found');
+      const controller = component({
+        party: {
+          owner
+        }
+      });
+
+      expect(controller.creator).toEqual('found');
+    });
+  });
+});
diff --git a/imports/ui/components/partyCreator/partyCreator.js b/imports/ui/components/partyCreator/partyCreator.js
deleted file mode 100644
index b6911db..0000000
--- a/imports/ui/components/partyCreator/partyCreator.js
+++ /dev/null
@@ -1,51 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyCreator.html';
-import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
-
-/**
- * PartyCreator component
- */
-class PartyCreator {
-  constructor($scope) {
-    'ngInject';
-
-    $scope.viewModel(this);
-
-    this.subscribe('users');
-
-    this.helpers({
-      creator() {
-        if (!this.party) {
-          return '';
-        }
-
-        const owner = this.party.owner;
-
-        if (Meteor.userId() !== null && owner === Meteor.userId()) {
-          return 'me';
-        }
-
-        return Meteor.users.findOne(owner) || 'nobody';
-      }
-    });
-  }
-}
-
-const name = 'partyCreator';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  DisplayNameFilter
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    party: '<'
-  },
-  controller: PartyCreator
-});
diff --git a/imports/ui/components/partyCreator/partyCreator.ts b/imports/ui/components/partyCreator/partyCreator.ts
new file mode 100644
index 0000000..d7c91c1
--- /dev/null
+++ b/imports/ui/components/partyCreator/partyCreator.ts
@@ -0,0 +1,56 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyCreator.html';
+import DisplayNameFilter from '../../filters/displayNameFilter';
+
+/**
+ * PartyCreator component
+ */
+class PartyCreator {
+  constructor($scope) {
+    'ngInject';
+
+    $scope.viewModel(this);
+
+    this.subscribe('users');
+
+    this.helpers({
+      creator() {
+        if (!this.party) {
+          return '';
+        }
+
+        const owner = this.party.owner;
+
+        if (Meteor.userId() !== null && owner === Meteor.userId()) {
+          return 'me';
+        }
+
+        return Meteor.users.findOne(owner) || 'nobody';
+      }
+    });
+  }
+}
+
+const name = 'partyCreator';
+
+// create a module
+export const PartyCreatorNg1Module = angular.module(name, [
+  angularMeteor,
+  DisplayNameFilter.name
+]);
+
+export function registerPartyCreator() {
+  PartyCreatorNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      bindings: {
+        party: '<'
+      },
+      controller: PartyCreator
+    });
+}
diff --git a/imports/ui/components/partyDetails/client/partyDetails.tests.js b/imports/ui/components/partyDetails/client/partyDetails.tests.js
deleted file mode 100644
index 0f3aa3b..0000000
--- a/imports/ui/components/partyDetails/client/partyDetails.tests.js
+++ /dev/null
@@ -1,51 +0,0 @@
-import { name as PartyDetails } from '../partyDetails';
-import { Parties } from '../../../../api/parties';
-import 'angular-mocks';
-
-describe('PartyDetails', () => {
-  beforeEach(() => {
-    window.module(PartyDetails);
-  });
-
-  describe('controller', () => {
-    let controller;
-    const party = {
-      _id: 'partyId',
-      name: 'Foo',
-      description: 'Birthday of Foo',
-      public: true
-    };
-
-    beforeEach(() => {
-      inject(($rootScope, $componentController) => {
-        controller = $componentController(PartyDetails, {
-          $scope: $rootScope.$new(true)
-        });
-      });
-    });
-
-    describe('save()', () => {
-      beforeEach(() => {
-        spyOn(Parties, 'update');
-        controller.party = party;
-        controller.save();
-      });
-
-      it('should update a proper party', () => {
-        expect(Parties.update.calls.mostRecent().args[0]).toEqual({
-          _id: party._id
-        });
-      });
-
-      it('should update with proper modifier', () => {
-        expect(Parties.update.calls.mostRecent().args[1]).toEqual({
-          $set: {
-            name: party.name,
-            description: party.description,
-            public: party.public
-          }
-        });
-      });
-    });
-  });
-});
diff --git a/imports/ui/components/partyDetails/client/partyDetails.tests.ts b/imports/ui/components/partyDetails/client/partyDetails.tests.ts
new file mode 100644
index 0000000..0f3aa3b
--- /dev/null
+++ b/imports/ui/components/partyDetails/client/partyDetails.tests.ts
@@ -0,0 +1,51 @@
+import { name as PartyDetails } from '../partyDetails';
+import { Parties } from '../../../../api/parties';
+import 'angular-mocks';
+
+describe('PartyDetails', () => {
+  beforeEach(() => {
+    window.module(PartyDetails);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const party = {
+      _id: 'partyId',
+      name: 'Foo',
+      description: 'Birthday of Foo',
+      public: true
+    };
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartyDetails, {
+          $scope: $rootScope.$new(true)
+        });
+      });
+    });
+
+    describe('save()', () => {
+      beforeEach(() => {
+        spyOn(Parties, 'update');
+        controller.party = party;
+        controller.save();
+      });
+
+      it('should update a proper party', () => {
+        expect(Parties.update.calls.mostRecent().args[0]).toEqual({
+          _id: party._id
+        });
+      });
+
+      it('should update with proper modifier', () => {
+        expect(Parties.update.calls.mostRecent().args[1]).toEqual({
+          $set: {
+            name: party.name,
+            description: party.description,
+            public: party.public
+          }
+        });
+      });
+    });
+  });
+});
diff --git a/imports/ui/components/partyDetails/partyDetails.js b/imports/ui/components/partyDetails/partyDetails.js
deleted file mode 100644
index 86adc67..0000000
--- a/imports/ui/components/partyDetails/partyDetails.js
+++ /dev/null
@@ -1,104 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import uiRouter from 'angular-ui-router';
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyDetails.html';
-import { Parties } from '../../../api/parties';
-import { name as PartyUninvited } from '../partyUninvited/partyUninvited';
-import { name as PartyMap } from '../partyMap/partyMap';
-
-class PartyDetails {
-  constructor($stateParams, $scope, $reactive) {
-    'ngInject';
-
-    $reactive(this).attach($scope);
-
-    this.partyId = $stateParams.partyId;
-
-    this.subscribe('parties');
-    this.subscribe('users');
-
-    this.helpers({
-      party() {
-        return Parties.findOne({
-          _id: $stateParams.partyId
-        });
-      },
-      users() {
-        return Meteor.users.find({});
-      },
-      isLoggedIn() {
-        return !!Meteor.userId();
-      },
-      isOwner() {
-        if (!this.party) {
-          return false;
-        }
-
-        return this.party.owner === Meteor.userId();
-      }
-    });
-  }
-
-  canInvite() {
-    if (!this.party) {
-      return false;
-    }
-
-    return !this.party.public && this.party.owner === Meteor.userId();
-  }
-
-  save() {
-    Parties.update({
-      _id: this.party._id
-    }, {
-      $set: {
-        name: this.party.name,
-        description: this.party.description,
-        public: this.party.public,
-        location: this.party.location
-      }
-    }, (error) => {
-      if (error) {
-        console.log('Oops, unable to update the party...');
-      } else {
-        console.log('Done!');
-      }
-    });
-  }
-}
-
-const name = 'partyDetails';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  uiRouter,
-  PartyUninvited,
-  PartyMap
-]).component(name, {
-  template,
-  controllerAs: name,
-  controller: PartyDetails
-})
-  .config(config);
-
-function config($stateProvider) {
-  'ngInject';
-
-  $stateProvider.state('partyDetails', {
-    url: '/parties/:partyId',
-    template: '<party-details></party-details>',
-    resolve: {
-      currentUser($q) {
-        if (Meteor.userId() === null) {
-          return $q.reject('AUTH_REQUIRED');
-        } else {
-          return $q.resolve();
-        }
-      }
-    }
-  });
-}
diff --git a/imports/ui/components/partyDetails/partyDetails.ts b/imports/ui/components/partyDetails/partyDetails.ts
new file mode 100644
index 0000000..84e1bb2
--- /dev/null
+++ b/imports/ui/components/partyDetails/partyDetails.ts
@@ -0,0 +1,109 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as uiRouter from 'angular-ui-router';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyDetails.html';
+import { Parties } from '../../../api/parties';
+import { PartyUninvitedNg1Module } from '../partyUninvited/partyUninvited';
+import { PartyMapNg1Module } from '../partyMap/partyMap';
+
+class PartyDetails {
+  constructor($stateParams, $scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+
+    this.partyId = $stateParams.partyId;
+
+    this.subscribe('parties');
+    this.subscribe('users');
+
+    this.helpers({
+      party() {
+        return Parties.findOne({
+          _id: $stateParams.partyId
+        });
+      },
+      users() {
+        return Meteor.users.find({});
+      },
+      isLoggedIn() {
+        return !!Meteor.userId();
+      },
+      isOwner() {
+        if (!this.party) {
+          return false;
+        }
+
+        return this.party.owner === Meteor.userId();
+      }
+    });
+  }
+
+  canInvite() {
+    if (!this.party) {
+      return false;
+    }
+
+    return !this.party.public && this.party.owner === Meteor.userId();
+  }
+
+  save() {
+    Parties.update({
+      _id: this.party._id
+    }, {
+      $set: {
+        name: this.party.name,
+        description: this.party.description,
+        public: this.party.public,
+        location: this.party.location
+      }
+    }, (error) => {
+      if (error) {
+        console.log('Oops, unable to update the party...');
+      } else {
+        console.log('Done!');
+      }
+    });
+  }
+}
+
+const name = 'partyDetails';
+
+// create a module
+export const PartyDetailsNg1Module = angular.module(name, [
+  angularMeteor,
+  uiRouter,
+  PartyUninvitedNg1Module.name,
+  PartyMapNg1Module.name
+]);
+
+export function registerPartyDetails() {
+  PartyDetailsNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      controller: PartyDetails
+    })
+    .config(config);
+}
+
+function config($stateProvider) {
+  'ngInject';
+
+  $stateProvider.state('partyDetails', {
+    url: '/parties/:partyId',
+    template: '<party-details></party-details>',
+    resolve: {
+      currentUser($q) {
+        if (Meteor.userId() === null) {
+          return $q.reject('AUTH_REQUIRED');
+        } else {
+          return $q.resolve();
+        }
+      }
+    }
+  });
+}
diff --git a/imports/ui/components/partyImage/partyImage.js b/imports/ui/components/partyImage/partyImage.js
deleted file mode 100644
index 64384c0..0000000
--- a/imports/ui/components/partyImage/partyImage.js
+++ /dev/null
@@ -1,39 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import template from './partyImage.html';
-import { Images } from '../../../api/images';
-import { name as DisplayImageFilter } from '../../filters/displayImageFilter';
-
-class PartyImage {
-  constructor($scope, $reactive) {
-    'ngInject';
-    $reactive(this).attach($scope);
-
-    this.helpers({
-      mainImage() {
-        const images = this.getReactively('images', true);
-        if (images) {
-          return Images.findOne({
-            _id: images[0]
-          });
-        }
-      }
-    });
-  }
-}
-
-const name = 'partyImage';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  DisplayImageFilter
-]).component(name, {
-  template,
-  bindings: {
-    images: '<'
-  },
-  controllerAs: name,
-  controller: PartyImage
-});
diff --git a/imports/ui/components/partyImage/partyImage.ts b/imports/ui/components/partyImage/partyImage.ts
new file mode 100644
index 0000000..84d5905
--- /dev/null
+++ b/imports/ui/components/partyImage/partyImage.ts
@@ -0,0 +1,44 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import template from './partyImage.html';
+import { Images } from '../../../api/images';
+import DisplayImageFilter from '../../filters/displayImageFilter';
+
+class PartyImage {
+  constructor($scope, $reactive) {
+    'ngInject';
+    $reactive(this).attach($scope);
+
+    this.helpers({
+      mainImage() {
+        const images = this.getReactively('images', true);
+        if (images) {
+          return Images.findOne({
+            _id: images[0]
+          });
+        }
+      }
+    });
+  }
+}
+
+const name = 'partyImage';
+
+// create a module
+export const PartyImageNg1Module = angular.module(name, [
+  angularMeteor,
+  DisplayImageFilter.name
+]);
+
+export function registerPartyImage() {
+  PartyImageNg1Module
+    .component(name, {
+      template,
+      bindings: {
+        images: '<'
+      },
+      controllerAs: name,
+      controller: PartyImage
+    });
+}
diff --git a/imports/ui/components/partyMap/partyMap.js b/imports/ui/components/partyMap/partyMap.js
deleted file mode 100644
index c062d30..0000000
--- a/imports/ui/components/partyMap/partyMap.js
+++ /dev/null
@@ -1,61 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import 'angular-simple-logger';
-import 'angular-google-maps';
-
-import template from './partyMap.html';
-
-class PartyMap {
-  constructor($scope) {
-    'ngInject';
-
-    this.map = {
-      center: {
-        latitude: 45,
-        longitude: -73
-      },
-      zoom: 8,
-      events: {
-        click: (mapModel, eventName, originalEventArgs) => {
-          this.setLocation(originalEventArgs[0].latLng.lat(), originalEventArgs[0].latLng.lng());
-          $scope.$apply();
-        }
-      }
-    };
-
-    this.marker = {
-      options: {
-        draggable: true
-      },
-      events: {
-        dragend: (marker, eventName, args) => {
-          this.setLocation(marker.getPosition().lat(), marker.getPosition().lng());
-          $scope.$apply();
-        }
-      }
-    };
-  }
-
-  setLocation(latitude, longitude) {
-    this.location = {
-      latitude,
-      longitude
-    };
-  }
-}
-
-const name = 'partyMap';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  'nemLogging', // https://github.com/angular-ui/angular-google-maps/issues/1633
-  'uiGmapgoogle-maps'
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    location: '='
-  },
-  controller: PartyMap
-});
diff --git a/imports/ui/components/partyMap/partyMap.ts b/imports/ui/components/partyMap/partyMap.ts
new file mode 100644
index 0000000..2dca6c5
--- /dev/null
+++ b/imports/ui/components/partyMap/partyMap.ts
@@ -0,0 +1,66 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import 'angular-simple-logger';
+import 'angular-google-maps';
+
+import template from './partyMap.html';
+
+class PartyMap {
+  constructor($scope) {
+    'ngInject';
+
+    this.map = {
+      center: {
+        latitude: 45,
+        longitude: -73
+      },
+      zoom: 8,
+      events: {
+        click: (mapModel, eventName, originalEventArgs) => {
+          this.setLocation(originalEventArgs[0].latLng.lat(), originalEventArgs[0].latLng.lng());
+          $scope.$apply();
+        }
+      }
+    };
+
+    this.marker = {
+      options: {
+        draggable: true
+      },
+      events: {
+        dragend: (marker, eventName, args) => {
+          this.setLocation(marker.getPosition().lat(), marker.getPosition().lng());
+          $scope.$apply();
+        }
+      }
+    };
+  }
+
+  setLocation(latitude, longitude) {
+    this.location = {
+      latitude,
+      longitude
+    };
+  }
+}
+
+const name = 'partyMap';
+
+// create a module
+export const PartyMapNg1Module = angular.module(name, [
+  angularMeteor,
+  'nemLogging', // https://github.com/angular-ui/angular-google-maps/issues/1633
+  'uiGmapgoogle-maps'
+]);
+
+export function registerPartyMap() {
+  PartyMapNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      bindings: {
+        location: '='
+      },
+      controller: PartyMap
+    });
+}
diff --git a/imports/ui/components/partyRemove/client/partyRemove.tests.js b/imports/ui/components/partyRemove/client/partyRemove.tests.js
deleted file mode 100644
index e8b6e97..0000000
--- a/imports/ui/components/partyRemove/client/partyRemove.tests.js
+++ /dev/null
@@ -1,37 +0,0 @@
-import { name as PartyRemove } from '../partyRemove';
-import { Parties } from '../../../../api/parties';
-import 'angular-mocks';
-
-describe('PartyRemove', () => {
-  beforeEach(() => {
-    window.module(PartyRemove);
-  });
-
-  describe('controller', () => {
-    let controller;
-    const party = {
-      _id: 'partyId'
-    };
-
-    beforeEach(() => {
-      inject(($rootScope, $componentController) => {
-        controller = $componentController(PartyRemove, {
-          $scope: $rootScope.$new(true)
-        }, {
-          party
-        });
-      });
-    });
-
-    describe('remove()', () => {
-      beforeEach(() => {
-        spyOn(Parties, 'remove');
-        controller.remove();
-      });
-
-      it('should remove a party', () => {
-        expect(Parties.remove).toHaveBeenCalledWith(party._id);
-      });
-    });
-  });
-});
diff --git a/imports/ui/components/partyRemove/client/partyRemove.tests.ts b/imports/ui/components/partyRemove/client/partyRemove.tests.ts
new file mode 100644
index 0000000..e8b6e97
--- /dev/null
+++ b/imports/ui/components/partyRemove/client/partyRemove.tests.ts
@@ -0,0 +1,37 @@
+import { name as PartyRemove } from '../partyRemove';
+import { Parties } from '../../../../api/parties';
+import 'angular-mocks';
+
+describe('PartyRemove', () => {
+  beforeEach(() => {
+    window.module(PartyRemove);
+  });
+
+  describe('controller', () => {
+    let controller;
+    const party = {
+      _id: 'partyId'
+    };
+
+    beforeEach(() => {
+      inject(($rootScope, $componentController) => {
+        controller = $componentController(PartyRemove, {
+          $scope: $rootScope.$new(true)
+        }, {
+          party
+        });
+      });
+    });
+
+    describe('remove()', () => {
+      beforeEach(() => {
+        spyOn(Parties, 'remove');
+        controller.remove();
+      });
+
+      it('should remove a party', () => {
+        expect(Parties.remove).toHaveBeenCalledWith(party._id);
+      });
+    });
+  });
+});
diff --git a/imports/ui/components/partyRemove/partyRemove.js b/imports/ui/components/partyRemove/partyRemove.js
deleted file mode 100644
index ab73562..0000000
--- a/imports/ui/components/partyRemove/partyRemove.js
+++ /dev/null
@@ -1,27 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import template from './partyRemove.html';
-import { Parties } from '../../../api/parties';
-
-class PartyRemove {
-  remove() {
-    if (this.party) {
-      Parties.remove(this.party._id);
-    }
-  }
-}
-
-const name = 'partyRemove';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor
-]).component(name, {
-  template,
-  bindings: {
-    party: '<'
-  },
-  controllerAs: name,
-  controller: PartyRemove
-});
diff --git a/imports/ui/components/partyRemove/partyRemove.ts b/imports/ui/components/partyRemove/partyRemove.ts
new file mode 100644
index 0000000..f4377cb
--- /dev/null
+++ b/imports/ui/components/partyRemove/partyRemove.ts
@@ -0,0 +1,32 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import template from './partyRemove.html';
+import { Parties } from '../../../api/parties';
+
+class PartyRemove {
+  remove() {
+    if (this.party) {
+      Parties.remove(this.party._id);
+    }
+  }
+}
+
+const name = 'partyRemove';
+
+// create a module
+export const PartyRemoveNg1Module = angular.module(name, [
+  angularMeteor
+]);
+
+export function registerPartyRemove() {
+  PartyRemoveNg1Module
+    .component(name, {
+      template,
+      bindings: {
+        party: '<'
+      },
+      controllerAs: name,
+      controller: PartyRemove
+    });
+}
diff --git a/imports/ui/components/partyRsvp/partyRsvp.js b/imports/ui/components/partyRsvp/partyRsvp.js
deleted file mode 100644
index 522cc38..0000000
--- a/imports/ui/components/partyRsvp/partyRsvp.js
+++ /dev/null
@@ -1,62 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import _ from 'underscore';
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyRsvp.html';
-
-class PartyRsvp {
-  yes() {
-    this.answer('yes');
-  }
-  isYes() {
-    return this.isAnswer('yes');
-  }
-
-  maybe() {
-    this.answer('maybe');
-  }
-  isMaybe() {
-    return this.isAnswer('maybe');
-  }
-
-  no() {
-    this.answer('no');
-  }
-  isNo() {
-    return this.isAnswer('no');
-  }
-
-  answer(answer) {
-    Meteor.call('rsvp', this.party._id, answer, (error) => {
-      if (error) {
-        console.error('Oops, unable to rsvp!');
-      } else {
-        console.log('RSVP done!')
-      }
-    });
-  }
-  isAnswer(answer) {
-    if(this.party) {
-      return !!_.findWhere(this.party.rsvps, {
-        user: Meteor.userId(),
-        rsvp: answer
-      });
-    }
-  }
-}
-
-const name = 'partyRsvp';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    party: '<'
-  },
-  controller: PartyRsvp
-});
diff --git a/imports/ui/components/partyRsvp/partyRsvp.ts b/imports/ui/components/partyRsvp/partyRsvp.ts
new file mode 100644
index 0000000..1d99115
--- /dev/null
+++ b/imports/ui/components/partyRsvp/partyRsvp.ts
@@ -0,0 +1,67 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as _ from 'underscore';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyRsvp.html';
+
+class PartyRsvp {
+  yes() {
+    this.answer('yes');
+  }
+  isYes() {
+    return this.isAnswer('yes');
+  }
+
+  maybe() {
+    this.answer('maybe');
+  }
+  isMaybe() {
+    return this.isAnswer('maybe');
+  }
+
+  no() {
+    this.answer('no');
+  }
+  isNo() {
+    return this.isAnswer('no');
+  }
+
+  answer(answer) {
+    Meteor.call('rsvp', this.party._id, answer, (error) => {
+      if (error) {
+        console.error('Oops, unable to rsvp!');
+      } else {
+        console.log('RSVP done!')
+      }
+    });
+  }
+  isAnswer(answer) {
+    if(this.party) {
+      return !!_.findWhere(this.party.rsvps, {
+        user: Meteor.userId(),
+        rsvp: answer
+      });
+    }
+  }
+}
+
+const name = 'partyRsvp';
+
+// create a module
+export const PartyRsvpNg1Module = angular.module(name, [
+  angularMeteor
+])
+
+export function registerPartyRsvp() {
+  PartyRsvpNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      bindings: {
+        party: '<'
+      },
+      controller: PartyRsvp
+    });
+}
diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.js b/imports/ui/components/partyRsvpsList/partyRsvpsList.js
deleted file mode 100644
index 755c9f9..0000000
--- a/imports/ui/components/partyRsvpsList/partyRsvpsList.js
+++ /dev/null
@@ -1,20 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import template from './partyRsvpsList.html';
-
-class PartyRsvpsList { }
-
-const name = 'partyRsvpsList';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    rsvps: '<'
-  },
-  controller: PartyRsvpsList
-});
diff --git a/imports/ui/components/partyRsvpsList/partyRsvpsList.ts b/imports/ui/components/partyRsvpsList/partyRsvpsList.ts
new file mode 100644
index 0000000..8872f9c
--- /dev/null
+++ b/imports/ui/components/partyRsvpsList/partyRsvpsList.ts
@@ -0,0 +1,25 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import template from './partyRsvpsList.html';
+
+class PartyRsvpsList { }
+
+const name = 'partyRsvpsList';
+
+// create a module
+export const PartyRsvpsListNg1Module = angular.module(name, [
+  angularMeteor
+]);
+
+export function registerPartyRsvpsList() {
+  PartyRsvpsListNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      bindings: {
+        rsvps: '<'
+      },
+      controller: PartyRsvpsList
+    });
+}
diff --git a/imports/ui/components/partyUninvited/partyUninvited.js b/imports/ui/components/partyUninvited/partyUninvited.js
deleted file mode 100644
index 7958f5a..0000000
--- a/imports/ui/components/partyUninvited/partyUninvited.js
+++ /dev/null
@@ -1,50 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyUninvited.html';
-import { name as UninvitedFilter } from '../../filters/uninvitedFilter';
-import { name as DisplayNameFilter } from '../../filters/displayNameFilter';
-
-class PartyUninvited {
-  constructor($scope) {
-    'ngInject';
-
-    $scope.viewModel(this);
-
-    this.helpers({
-      users() {
-        return Meteor.users.find({});
-      }
-    });
-  }
-
-  invite(user) {
-    Meteor.call('invite', this.party._id, user._id,
-      (error) => {
-        if (error) {
-          console.log('Oops, unable to invite!');
-        } else {
-          console.log('Invited!');
-        }
-      }
-    );
-  }
-}
-
-const name = 'partyUninvited';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  UninvitedFilter,
-  DisplayNameFilter
-]).component(name, {
-  template,
-  controllerAs: name,
-  bindings: {
-    party: '<'
-  },
-  controller: PartyUninvited
-});
diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
new file mode 100644
index 0000000..4781e8b
--- /dev/null
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -0,0 +1,55 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyUninvited.html';
+import UninvitedFilter from '../../filters/uninvitedFilter';
+import DisplayNameFilter from '../../filters/displayNameFilter';
+
+class PartyUninvited {
+  constructor($scope) {
+    'ngInject';
+
+    $scope.viewModel(this);
+
+    this.helpers({
+      users() {
+        return Meteor.users.find({});
+      }
+    });
+  }
+
+  invite(user) {
+    Meteor.call('invite', this.party._id, user._id,
+      (error) => {
+        if (error) {
+          console.log('Oops, unable to invite!');
+        } else {
+          console.log('Invited!');
+        }
+      }
+    );
+  }
+}
+
+const name = 'partyUninvited';
+
+// create a module
+export const PartyUninvitedNg1Module = angular.module(name, [
+  angularMeteor,
+  UninvitedFilter.name,
+  DisplayNameFilter.name
+]);
+
+export function registerPartyUninvited() {
+  PartyUninvitedNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      bindings: {
+        party: '<'
+      },
+      controller: PartyUninvited
+    });
+}
diff --git a/imports/ui/components/partyUpload/partyUpload.js b/imports/ui/components/partyUpload/partyUpload.js
deleted file mode 100644
index 400368e..0000000
--- a/imports/ui/components/partyUpload/partyUpload.js
+++ /dev/null
@@ -1,91 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import ngFileUpload from 'ng-file-upload';
-import 'angular-sortable-view';
-import 'ng-img-crop/compile/minified/ng-img-crop';
-import 'ng-img-crop/compile/minified/ng-img-crop.css';
-
-
-import { Meteor } from 'meteor/meteor';
-
-import template from './partyUpload.html';
-import { Thumbs, upload } from '../../../api/images';
-
-class PartyUpload {
-  constructor($scope, $reactive) {
-    'ngInject';
-
-    $reactive(this).attach($scope);
-
-    this.uploaded = [];
-
-    this.subscribe('thumbs', () => [
-      this.getReactively('files', true) || []
-    ]);
-
-    this.helpers({
-      thumbs() {
-        return Thumbs.find({
-          originalStore: 'images',
-          originalId: {
-            $in: this.getReactively('files', true) || []
-          }
-        });
-      }
-    });
-  }
-
-  addImages(files) {
-    if (files.length) {
-      this.currentFile = files[0];
-
-      const reader = new FileReader;
-
-      reader.onload = this.$bindToContext((e) => {
-        this.cropImgSrc = e.target.result;
-        this.myCroppedImage = '';
-      });
-
-      reader.readAsDataURL(files[0]);
-    } else {
-      this.cropImgSrc = undefined;
-    }
-  }
-
-  save() {
-    upload(this.myCroppedImage, this.currentFile.name, this.$bindToContext((file) => {
-      this.uploaded.push(file);
-
-      if (!this.files || !this.files.length) {
-        this.files = [];
-      }
-      this.files.push(file._id);
-
-      this.reset();
-    }), (e) => {
-      console.log('Oops, something went wrong', e);
-    });
-  }
-
-  reset() {
-    this.cropImgSrc = undefined;
-    this.myCroppedImage = '';
-  }
-}
-
-const name = 'partyUpload';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  ngFileUpload,
-  'ngImgCrop',
-  'angular-sortable-view'
-]).component(name, {
-  template,
-  bindings: {
-    files: '=?'
-  },
-  controllerAs: name,
-  controller: PartyUpload
-});
diff --git a/imports/ui/components/partyUpload/partyUpload.ts b/imports/ui/components/partyUpload/partyUpload.ts
new file mode 100644
index 0000000..39e04ce
--- /dev/null
+++ b/imports/ui/components/partyUpload/partyUpload.ts
@@ -0,0 +1,96 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as ngFileUpload from 'ng-file-upload';
+import 'angular-sortable-view';
+import 'ng-img-crop/compile/minified/ng-img-crop';
+import 'ng-img-crop/compile/minified/ng-img-crop.css';
+
+
+import { Meteor } from 'meteor/meteor';
+
+import template from './partyUpload.html';
+import { Thumbs, upload } from '../../../api/images';
+
+class PartyUpload {
+  constructor($scope, $reactive) {
+    'ngInject';
+
+    $reactive(this).attach($scope);
+
+    this.uploaded = [];
+
+    this.subscribe('thumbs', () => [
+      this.getReactively('files', true) || []
+    ]);
+
+    this.helpers({
+      thumbs() {
+        return Thumbs.find({
+          originalStore: 'images',
+          originalId: {
+            $in: this.getReactively('files', true) || []
+          }
+        });
+      }
+    });
+  }
+
+  addImages(files) {
+    if (files.length) {
+      this.currentFile = files[0];
+
+      const reader = new FileReader;
+
+      reader.onload = this.$bindToContext((e) => {
+        this.cropImgSrc = e.target.result;
+        this.myCroppedImage = '';
+      });
+
+      reader.readAsDataURL(files[0]);
+    } else {
+      this.cropImgSrc = undefined;
+    }
+  }
+
+  save() {
+    upload(this.myCroppedImage, this.currentFile.name, this.$bindToContext((file) => {
+      this.uploaded.push(file);
+
+      if (!this.files || !this.files.length) {
+        this.files = [];
+      }
+      this.files.push(file._id);
+
+      this.reset();
+    }), (e) => {
+      console.log('Oops, something went wrong', e);
+    });
+  }
+
+  reset() {
+    this.cropImgSrc = undefined;
+    this.myCroppedImage = '';
+  }
+}
+
+const name = 'partyUpload';
+
+// create a module
+export const PartyUploadNg1Module = angular.module(name, [
+  angularMeteor,
+  ngFileUpload,
+  'ngImgCrop',
+  'angular-sortable-view'
+]);
+
+export function registerPartyUpload() {
+  PartyUploadNg1Module
+    .component(name, {
+      template,
+      bindings: {
+        files: '=?'
+      },
+      controllerAs: name,
+      controller: PartyUpload
+    });
+}
diff --git a/imports/ui/components/password/password.js b/imports/ui/components/password/password.js
deleted file mode 100644
index c417f95..0000000
--- a/imports/ui/components/password/password.js
+++ /dev/null
@@ -1,56 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import uiRouter from 'angular-ui-router';
-
-import { Accounts } from 'meteor/accounts-base';
-
-import template from './password.html';
-
-class Register {
-  constructor($scope, $reactive, $state) {
-    'ngInject';
-
-    this.$state = $state;
-
-    $reactive(this).attach($scope);
-
-    this.credentials = {
-      email: ''
-    };
-
-    this.error = '';
-  }
-
-  reset() {
-    Accounts.forgotPassword(this.credentials, this.$bindToContext((err) => {
-      if (err) {
-        this.error = err;
-      } else {
-        this.$state.go('parties');
-      }
-    }));
-  }
-}
-
-const name = 'password';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  uiRouter
-])
-  .component(name, {
-    template,
-    controllerAs: name,
-    controller: Register
-  })
-  .config(config);
-
-function config($stateProvider) {
-  'ngInject';
-
-  $stateProvider.state('password', {
-    url: '/password',
-    template: '<password></password>'
-  });
-}
diff --git a/imports/ui/components/password/password.ts b/imports/ui/components/password/password.ts
new file mode 100644
index 0000000..f7ad1e0
--- /dev/null
+++ b/imports/ui/components/password/password.ts
@@ -0,0 +1,60 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as uiRouter from 'angular-ui-router';
+
+import { Accounts } from 'meteor/accounts-base';
+
+import template from './password.html';
+
+class Register {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.credentials = {
+      email: ''
+    };
+
+    this.error = '';
+  }
+
+  reset() {
+    Accounts.forgotPassword(this.credentials, this.$bindToContext((err) => {
+      if (err) {
+        this.error = err;
+      } else {
+        this.$state.go('parties');
+      }
+    }));
+  }
+}
+
+const name = 'password';
+
+// create a module
+export const PasswordNg1Module = angular.module(name, [
+  angularMeteor,
+  uiRouter
+]);
+
+export function registerPassword() {
+  PasswordNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      controller: Register
+    })
+    .config(config);
+}
+
+function config($stateProvider) {
+  'ngInject';
+
+  $stateProvider.state('password', {
+    url: '/password',
+    template: '<password></password>'
+  });
+}
diff --git a/imports/ui/components/register/register.js b/imports/ui/components/register/register.js
deleted file mode 100644
index ab4ae94..0000000
--- a/imports/ui/components/register/register.js
+++ /dev/null
@@ -1,58 +0,0 @@
-import angular from 'angular';
-import angularMeteor from 'angular-meteor';
-import uiRouter from 'angular-ui-router';
-
-import { Accounts } from 'meteor/accounts-base';
-
-import template from './register.html';
-
-class Register {
-  constructor($scope, $reactive, $state) {
-    'ngInject';
-
-    this.$state = $state;
-
-    $reactive(this).attach($scope);
-
-    this.credentials = {
-      email: '',
-      password: ''
-    };
-
-    this.error = '';
-  }
-
-  register() {
-    Accounts.createUser(this.credentials,
-      this.$bindToContext((err) => {
-        if (err) {
-          this.error = err;
-        } else {
-          this.$state.go('parties');
-        }
-      })
-    );
-  }
-}
-
-const name = 'register';
-
-// create a module
-export default angular.module(name, [
-  angularMeteor,
-  uiRouter
-])
-  .component(name, {
-    template,
-    controllerAs: name,
-    controller: Register
-  })
-  .config(config);
-
-function config($stateProvider) {
-  'ngInject';
-  $stateProvider.state('register', {
-    url: '/register',
-    template: '<register></register>'
-  });
-}
diff --git a/imports/ui/components/register/register.ts b/imports/ui/components/register/register.ts
new file mode 100644
index 0000000..4f5850d
--- /dev/null
+++ b/imports/ui/components/register/register.ts
@@ -0,0 +1,62 @@
+import * as angular from 'angular';
+import * as angularMeteor from 'angular-meteor';
+import * as uiRouter from 'angular-ui-router';
+
+import { Accounts } from 'meteor/accounts-base';
+
+import template from './register.html';
+
+class Register {
+  constructor($scope, $reactive, $state) {
+    'ngInject';
+
+    this.$state = $state;
+
+    $reactive(this).attach($scope);
+
+    this.credentials = {
+      email: '',
+      password: ''
+    };
+
+    this.error = '';
+  }
+
+  register() {
+    Accounts.createUser(this.credentials,
+      this.$bindToContext((err) => {
+        if (err) {
+          this.error = err;
+        } else {
+          this.$state.go('parties');
+        }
+      })
+    );
+  }
+}
+
+const name = 'register';
+
+// create a module
+export const RegisterNg1Module = angular.module(name, [
+  angularMeteor,
+  uiRouter
+]);
+
+export function registerRegister() {
+  RegisterNg1Module
+    .component(name, {
+      template,
+      controllerAs: name,
+      controller: Register
+    })
+    .config(config);
+}
+
+function config($stateProvider) {
+  'ngInject';
+  $stateProvider.state('register', {
+    url: '/register',
+    template: '<register></register>'
+  });
+}
diff --git a/imports/ui/filters/displayImageFilter.js b/imports/ui/filters/displayImageFilter.js
deleted file mode 100644
index aa2dfda..0000000
--- a/imports/ui/filters/displayImageFilter.js
+++ /dev/null
@@ -1,26 +0,0 @@
-import angular from 'angular';
-
-import { Meteor } from 'meteor/meteor';
-
-const name = 'displayImageFilter';
-
-function DisplayImageFilter(image) {
-  if (!image) {
-    return image;
-  }
-
-  // leave it as it is for the web view
-  if (!Meteor.isCordova) {
-    return image.url;
-  }
-
-  // create new path of an image
-  const path = `ufs/${image.store}/${image._id}/${image.name}`;
-  return Meteor.absoluteUrl(path);
-}
-
-// create a module
-export default angular.module(name, [])
-  .filter(name, () => {
-    return DisplayImageFilter;
-  });
diff --git a/imports/ui/filters/displayImageFilter.ts b/imports/ui/filters/displayImageFilter.ts
new file mode 100644
index 0000000..2cd8c9c
--- /dev/null
+++ b/imports/ui/filters/displayImageFilter.ts
@@ -0,0 +1,26 @@
+import * as angular from 'angular';
+
+import { Meteor } from 'meteor/meteor';
+
+const name = 'displayImageFilter';
+
+function DisplayImageFilter(image) {
+  if (!image) {
+    return image;
+  }
+
+  // leave it as it is for the web view
+  if (!Meteor.isCordova) {
+    return image.url;
+  }
+
+  // create new path of an image
+  const path = `ufs/${image.store}/${image._id}/${image.name}`;
+  return Meteor.absoluteUrl(path);
+}
+
+// create a module
+export default angular.module(name, [])
+  .filter(name, () => {
+    return DisplayImageFilter;
+  });
diff --git a/imports/ui/filters/displayNameFilter.js b/imports/ui/filters/displayNameFilter.js
deleted file mode 100644
index 57d9250..0000000
--- a/imports/ui/filters/displayNameFilter.js
+++ /dev/null
@@ -1,25 +0,0 @@
-import angular from 'angular';
-
-const name = 'displayNameFilter';
-
-function DisplayNameFilter(user) {
-  if (!user) {
-    return '';
-  }
-
-  if (user.profile && user.profile.name) {
-    return user.profile.name;
-  }
-
-  if (user.emails) {
-    return user.emails[0].address;
-  }
-
-  return user;
-}
-
-// create a module
-export default angular.module(name, [])
-  .filter(name, () => {
-    return DisplayNameFilter;
-  });
diff --git a/imports/ui/filters/displayNameFilter.ts b/imports/ui/filters/displayNameFilter.ts
new file mode 100644
index 0000000..05c4059
--- /dev/null
+++ b/imports/ui/filters/displayNameFilter.ts
@@ -0,0 +1,25 @@
+import * as angular from 'angular';
+
+const name = 'displayNameFilter';
+
+function DisplayNameFilter(user) {
+  if (!user) {
+    return '';
+  }
+
+  if (user.profile && user.profile.name) {
+    return user.profile.name;
+  }
+
+  if (user.emails) {
+    return user.emails[0].address;
+  }
+
+  return user;
+}
+
+// create a module
+export default angular.module(name, [])
+  .filter(name, () => {
+    return DisplayNameFilter;
+  });
diff --git a/imports/ui/filters/uninvitedFilter.js b/imports/ui/filters/uninvitedFilter.js
deleted file mode 100644
index cfe8d2d..0000000
--- a/imports/ui/filters/uninvitedFilter.js
+++ /dev/null
@@ -1,21 +0,0 @@
-import angular from 'angular';
-import _ from 'underscore';
-
-const name = 'uninvitedFilter';
-
-function UninvitedFilter(users, party) {
-  if (!party) {
-    return false;
-  }
-
-  return users.filter((user) => {
-    // if not the owner and not invited
-    return user._id !== party.owner && !_.contains(party.invited, user._id);
-  });
-}
-
-// create a module
-export default angular.module(name, [])
-  .filter(name, () => {
-    return UninvitedFilter;
-  });
diff --git a/imports/ui/filters/uninvitedFilter.ts b/imports/ui/filters/uninvitedFilter.ts
new file mode 100644
index 0000000..260bd05
--- /dev/null
+++ b/imports/ui/filters/uninvitedFilter.ts
@@ -0,0 +1,21 @@
+import * as angular from 'angular';
+import * as _ from 'underscore';
+
+const name = 'uninvitedFilter';
+
+function UninvitedFilter(users, party) {
+  if (!party) {
+    return false;
+  }
+
+  return users.filter((user) => {
+    // if not the owner and not invited
+    return user._id !== party.owner && !_.contains(party.invited, user._id);
+  });
+}
+
+// create a module
+export default angular.module(name, [])
+  .filter(name, () => {
+    return UninvitedFilter;
+  });
diff --git a/server/main.js b/server/main.js
deleted file mode 100644
index 2b47936..0000000
--- a/server/main.js
+++ /dev/null
@@ -1,4 +0,0 @@
-import '../imports/startup/fixtures';
-import '../imports/api/parties';
-import '../imports/api/users';
-import '../imports/api/images';
diff --git a/server/main.ts b/server/main.ts
new file mode 100644
index 0000000..2b47936
--- /dev/null
+++ b/server/main.ts
@@ -0,0 +1,4 @@
+import '../imports/startup/fixtures';
+import '../imports/api/parties';
+import '../imports/api/users';
+import '../imports/api/images';
-- 
2.7.4


From 0b0094400f87cf705c0c2a8b165add0155a1474b Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:20:56 +0200
Subject: [PATCH 383/414] Step 23.8: Import underscore correctly inside Parties
 Methods

---
 imports/api/parties/methods.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/api/parties/methods.ts b/imports/api/parties/methods.ts
index e8aa1ad..b6c7ff9 100644
--- a/imports/api/parties/methods.ts
+++ b/imports/api/parties/methods.ts
@@ -1,4 +1,4 @@
-import _ from 'underscore';
+import * as _ from 'underscore';
 import { Meteor } from 'meteor/meteor';
 import { check } from 'meteor/check';
 import { Email } from 'meteor/email';
-- 
2.7.4


From 5dd3a36ef1291d38642970aa5afe16a527c660ed Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:28:32 +0200
Subject: [PATCH 384/414] Step 23.9: Install angular2 modules

---
 package.json | 17 +++++++++++++++--
 1 file changed, 15 insertions(+), 2 deletions(-)

diff --git a/package.json b/package.json
index 056163e..517e44b 100644
--- a/package.json
+++ b/package.json
@@ -6,6 +6,13 @@
     "test:watch": "meteor test --driver-package sanjo:jasmine"
   },
   "dependencies": {
+    "@angular/common": "^2.1.0",
+    "@angular/compiler": "^2.1.0",
+    "@angular/core": "^2.1.0",
+    "@angular/forms": "^2.1.0",
+    "@angular/platform-browser": "^2.1.0",
+    "@angular/platform-browser-dynamic": "^2.1.0",
+    "@angular/upgrade": "^2.1.0",
     "angular": "^1.5.3",
     "angular-animate": "^1.5.3",
     "angular-aria": "^1.5.3",
@@ -13,17 +20,23 @@
     "angular-material": "^1.0.7",
     "angular-messages": "^1.5.3",
     "angular-meteor": "^1.3.9",
-    "angular-ui-router": "^0.2.18",
     "angular-sanitize": "^1.5.5",
     "angular-simple-logger": "^0.1.7",
     "angular-sortable-view": "0.0.15",
+    "angular-ui-router": "^0.2.18",
     "angular-utils-pagination": "^0.11.1",
+    "angular2-meteor": "^0.7.0",
+    "angular2-meteor-polyfills": "^0.1.1",
+    "es6-shim": "^0.35.1",
     "gm": "^1.22.0",
     "ionic-sdk": "^1.2.4",
     "meteor-node-stubs": "~0.2.0",
     "ng-file-upload": "^12.0.4",
     "ng-img-crop": "^0.2.0",
-    "underscore": "^1.8.3"
+    "reflect-metadata": "^0.1.8",
+    "rxjs": "^5.0.0-beta.12",
+    "underscore": "^1.8.3",
+    "zone.js": "^0.6.21"
   },
   "devDependencies": {
     "angular-mocks": "^1.5.3"
-- 
2.7.4


From 9c826dde6bf203515bd41a0ccaf790fe4c2c4b8a Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:29:54 +0200
Subject: [PATCH 385/414] Step 23.10: Create module with instance of
 UpgradeAdapter

---
 client/main.ts | 43 +++++++++++++++++++++++--------------------
 1 file changed, 23 insertions(+), 20 deletions(-)

diff --git a/client/main.ts b/client/main.ts
index 1a17992..92b3cc0 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -1,4 +1,5 @@
 import * as angular from 'angular';
+import { UpgradeAdapter } from '@angular/upgrade';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -23,26 +24,28 @@ import { registerPassword } from '../imports/ui/components/password/password';
 import { registerRegister } from '../imports/ui/components/register/register';
 import { registerSocially, SociallyNg1Module } from '../imports/ui/components/socially/socially';
 
-registerAuth();
-registerLogin();
-registerNavigation();
-registerPartiesList();
-registerPartiesMap();
-registerPartiesSort();
-registerPartyAdd();
-registerPartyAddButton();
-registerPartyCreator();
-registerPartyDetails();
-registerPartyImage();
-registerPartyMap();
-registerPartyRemove();
-registerPartyRsvp();
-registerPartyRsvpsList();
-registerPartyUninvited();
-registerPartyUpload();
-registerPassword();
-registerRegister();
-registerSocially();
+const adapter = new UpgradeAdapter();
+
+registerAuth(adapter);
+registerLogin(adapter);
+registerNavigation(adapter);
+registerPartiesList(adapter);
+registerPartiesMap(adapter);
+registerPartiesSort(adapter);
+registerPartyAdd(adapter);
+registerPartyAddButton(adapter);
+registerPartyCreator(adapter);
+registerPartyDetails(adapter);
+registerPartyImage(adapter);
+registerPartyMap(adapter);
+registerPartyRemove(adapter);
+registerPartyRsvp(adapter);
+registerPartyRsvpsList(adapter);
+registerPartyUninvited(adapter);
+registerPartyUpload(adapter);
+registerPassword(adapter);
+registerRegister(adapter);
+registerSocially(adapter);
 
 function onReady() {
   angular.bootstrap(document, [
-- 
2.7.4


From 253b52c59527380fda31366ed88a22f2be6b6762 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:34:01 +0200
Subject: [PATCH 386/414] Step 23.11: bootstrap using UpgradeAdapter

---
 client/main.ts | 16 ++++++++++++++--
 1 file changed, 14 insertions(+), 2 deletions(-)

diff --git a/client/main.ts b/client/main.ts
index 92b3cc0..e5d0ad7 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -1,4 +1,8 @@
+import 'angular2-meteor-polyfills/browser';
 import * as angular from 'angular';
+import { NgModule } from '@angular/core';
+import { BrowserModule } from '@angular/platform-browser';
+import { FormsModule } from '@angular/forms';
 import { UpgradeAdapter } from '@angular/upgrade';
 
 import { Meteor } from 'meteor/meteor';
@@ -24,7 +28,15 @@ import { registerPassword } from '../imports/ui/components/password/password';
 import { registerRegister } from '../imports/ui/components/register/register';
 import { registerSocially, SociallyNg1Module } from '../imports/ui/components/socially/socially';
 
-const adapter = new UpgradeAdapter();
+@NgModule({
+  imports: [
+    BrowserModule,
+    FormsModule
+  ]
+})
+class AppNg2Module {}
+
+const adapter = new UpgradeAdapter(AppNg2Module);
 
 registerAuth(adapter);
 registerLogin(adapter);
@@ -48,7 +60,7 @@ registerRegister(adapter);
 registerSocially(adapter);
 
 function onReady() {
-  angular.bootstrap(document, [
+  adapter.bootstrap(document.body, [
     SociallyNg1Module.name
   ]);
 }
-- 
2.7.4


From 140c31a487ed85861bde519adf4b4ace7c0d5cc2 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:36:26 +0200
Subject: [PATCH 387/414] Step 23.12: Create displayNamePipe based on
 displayNameFilter

---
 client/main.ts                        |  4 ++++
 imports/ui/filters/displayNamePipe.ts | 24 ++++++++++++++++++++++++
 2 files changed, 28 insertions(+)
 create mode 100644 imports/ui/filters/displayNamePipe.ts

diff --git a/client/main.ts b/client/main.ts
index e5d0ad7..2f77e89 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -27,8 +27,12 @@ import { registerPartyUpload } from '../imports/ui/components/partyUpload/partyU
 import { registerPassword } from '../imports/ui/components/password/password';
 import { registerRegister } from '../imports/ui/components/register/register';
 import { registerSocially, SociallyNg1Module } from '../imports/ui/components/socially/socially';
+import { DisplayNamePipe } from '../imports/ui/filters/displayNamePipe';
 
 @NgModule({
+  declarations: [
+    DisplayNamePipe
+  ],
   imports: [
     BrowserModule,
     FormsModule
diff --git a/imports/ui/filters/displayNamePipe.ts b/imports/ui/filters/displayNamePipe.ts
new file mode 100644
index 0000000..f1d9804
--- /dev/null
+++ b/imports/ui/filters/displayNamePipe.ts
@@ -0,0 +1,24 @@
+import { Pipe } from '@angular/core';
+
+const name = 'displayName';
+
+@Pipe({
+  name
+})
+export class DisplayNamePipe {
+  transform(user) {
+    if (!user) {
+      return '';
+    }
+
+    if (user.profile && user.profile.name) {
+      return user.profile.name;
+    }
+
+    if (user.emails) {
+      return user.emails[0].address;
+    }
+
+    return user;
+  }
+}
-- 
2.7.4


From 26d27a6aeea920bbc4e1a687d4539b0c594e03e3 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:37:50 +0200
Subject: [PATCH 388/414] Step 23.13: Create UninvitedPipe based on
 UninvitedFilter

---
 client/main.ts                      |  4 +++-
 imports/ui/filters/uninvitedPipe.ts | 20 ++++++++++++++++++++
 2 files changed, 23 insertions(+), 1 deletion(-)
 create mode 100644 imports/ui/filters/uninvitedPipe.ts

diff --git a/client/main.ts b/client/main.ts
index 2f77e89..17423d2 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -28,10 +28,12 @@ import { registerPassword } from '../imports/ui/components/password/password';
 import { registerRegister } from '../imports/ui/components/register/register';
 import { registerSocially, SociallyNg1Module } from '../imports/ui/components/socially/socially';
 import { DisplayNamePipe } from '../imports/ui/filters/displayNamePipe';
+import { UninvitedPipe } from '../imports/ui/filters/uninvitedPipe';
 
 @NgModule({
   declarations: [
-    DisplayNamePipe
+    DisplayNamePipe,
+    UninvitedPipe
   ],
   imports: [
     BrowserModule,
diff --git a/imports/ui/filters/uninvitedPipe.ts b/imports/ui/filters/uninvitedPipe.ts
new file mode 100644
index 0000000..523c74d
--- /dev/null
+++ b/imports/ui/filters/uninvitedPipe.ts
@@ -0,0 +1,20 @@
+import { Pipe } from '@angular/core';
+import * as _ from 'underscore';
+
+const name = 'uninvited';
+
+@Pipe({
+  name
+})
+export class UninvitedPipe {
+  transform(users, party) {
+    if (!party) {
+      return false;
+    }
+
+    return users.filter((user) => {
+      // if not the owner and not invited
+      return user._id !== party.owner && !_.contains(party.invited, user._id);
+    });
+  }
+}
-- 
2.7.4


From d79c6ace288f4568173b7c2cbd33fec4e491edf0 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:38:26 +0200
Subject: [PATCH 389/414] Step 23.14: Return an empty array instead of false

---
 imports/ui/filters/uninvitedPipe.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/filters/uninvitedPipe.ts b/imports/ui/filters/uninvitedPipe.ts
index 523c74d..b40208e 100644
--- a/imports/ui/filters/uninvitedPipe.ts
+++ b/imports/ui/filters/uninvitedPipe.ts
@@ -9,7 +9,7 @@ const name = 'uninvited';
 export class UninvitedPipe {
   transform(users, party) {
     if (!party) {
-      return false;
+      return [];
     }
 
     return users.filter((user) => {
-- 
2.7.4


From 74923a6df89b3117af8ee6122c068bbbc6f0084e Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:41:15 +0200
Subject: [PATCH 390/414] Step 23.15: Use Component decorator

---
 client/main.ts                                         | 5 +++--
 imports/ui/components/partyUninvited/partyUninvited.ts | 7 ++++++-
 2 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/client/main.ts b/client/main.ts
index 17423d2..f8437cb 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -22,7 +22,7 @@ import { registerPartyMap } from '../imports/ui/components/partyMap/partyMap';
 import { registerPartyRemove } from '../imports/ui/components/partyRemove/partyRemove';
 import { registerPartyRsvp } from '../imports/ui/components/partyRsvp/partyRsvp';
 import { registerPartyRsvpsList } from '../imports/ui/components/partyRsvpsList/partyRsvpsList';
-import { registerPartyUninvited } from '../imports/ui/components/partyUninvited/partyUninvited';
+import { registerPartyUninvited, PartyUninvited } from '../imports/ui/components/partyUninvited/partyUninvited';
 import { registerPartyUpload } from '../imports/ui/components/partyUpload/partyUpload';
 import { registerPassword } from '../imports/ui/components/password/password';
 import { registerRegister } from '../imports/ui/components/register/register';
@@ -33,7 +33,8 @@ import { UninvitedPipe } from '../imports/ui/filters/uninvitedPipe';
 @NgModule({
   declarations: [
     DisplayNamePipe,
-    UninvitedPipe
+    UninvitedPipe,
+    PartyUninvited
   ],
   imports: [
     BrowserModule,
diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
index 4781e8b..0fe9347 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.ts
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -1,5 +1,6 @@
 import * as angular from 'angular';
 import * as angularMeteor from 'angular-meteor';
+import { Component } from '@angular/core';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -7,7 +8,11 @@ import template from './partyUninvited.html';
 import UninvitedFilter from '../../filters/uninvitedFilter';
 import DisplayNameFilter from '../../filters/displayNameFilter';
 
-class PartyUninvited {
+@Component({
+  template,
+  selector: 'party-uninvited'
+})
+export class PartyUninvited {
   constructor($scope) {
     'ngInject';
 
-- 
2.7.4


From badc52e7801cc9e7e45c99067b9a87a54b6da5c5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:42:41 +0200
Subject: [PATCH 391/414] Step 23.16: Use Pipes instead of Filters

---
 imports/ui/components/partyUninvited/partyUninvited.ts | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
index 0fe9347..2c923ec 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.ts
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -5,8 +5,6 @@ import { Component } from '@angular/core';
 import { Meteor } from 'meteor/meteor';
 
 import template from './partyUninvited.html';
-import UninvitedFilter from '../../filters/uninvitedFilter';
-import DisplayNameFilter from '../../filters/displayNameFilter';
 
 @Component({
   template,
@@ -42,9 +40,7 @@ const name = 'partyUninvited';
 
 // create a module
 export const PartyUninvitedNg1Module = angular.module(name, [
-  angularMeteor,
-  UninvitedFilter.name,
-  DisplayNameFilter.name
+  angularMeteor
 ]);
 
 export function registerPartyUninvited() {
-- 
2.7.4


From 819691df3445bc84c0e31e66ca49c95bcef18de5 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:43:28 +0200
Subject: [PATCH 392/414] Step 23.17: Extend by MeteorComponent

---
 imports/ui/components/partyUninvited/partyUninvited.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
index 2c923ec..df97cc8 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.ts
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -1,6 +1,7 @@
 import * as angular from 'angular';
 import * as angularMeteor from 'angular-meteor';
 import { Component } from '@angular/core';
+import { MeteorComponent } from 'angular2-meteor';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -10,9 +11,10 @@ import template from './partyUninvited.html';
   template,
   selector: 'party-uninvited'
 })
-export class PartyUninvited {
+export class PartyUninvited extends MeteorComponent {
   constructor($scope) {
     'ngInject';
+    super();
 
     $scope.viewModel(this);
 
-- 
2.7.4


From b0f2bcac02a50240592da1e94e5be32bfcaeb633 Mon Sep 17 00:00:00 2001
From: DAB0mB <emanor6@gmail.com>
Date: Fri, 21 Oct 2016 19:50:28 -0200
Subject: [PATCH 393/414] Step 23.18: Switch to MeteorComponent API

---
 imports/ui/components/partyUninvited/partyUninvited.ts | 11 +++--------
 1 file changed, 3 insertions(+), 8 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
index df97cc8..fe58ab5 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.ts
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -12,16 +12,11 @@ import template from './partyUninvited.html';
   selector: 'party-uninvited'
 })
 export class PartyUninvited extends MeteorComponent {
-  constructor($scope) {
-    'ngInject';
+  constructor() {
     super();
 
-    $scope.viewModel(this);
-
-    this.helpers({
-      users() {
-        return Meteor.users.find({});
-      }
+    this.autorun(() => {
+      this.users = Meteor.users.find({}).fetch();
     });
   }
 
-- 
2.7.4


From b007409110ed0427c194244465e3f5d709b05938 Mon Sep 17 00:00:00 2001
From: DAB0mB <emanor6@gmail.com>
Date: Fri, 21 Oct 2016 19:51:24 -0200
Subject: [PATCH 394/414] Step 23.19: Use downgraded Ng2 Component

---
 imports/ui/components/partyUninvited/partyUninvited.ts | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
index fe58ab5..8910eec 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.ts
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -40,14 +40,7 @@ export const PartyUninvitedNg1Module = angular.module(name, [
   angularMeteor
 ]);
 
-export function registerPartyUninvited() {
+export function registerPartyUninvited(adapter) {
   PartyUninvitedNg1Module
-    .component(name, {
-      template,
-      controllerAs: name,
-      bindings: {
-        party: '<'
-      },
-      controller: PartyUninvited
-    });
+    .directive(name, adapter.downgradeNg2Component(PartyUninvited))
 }
-- 
2.7.4


From 2220c2c46f657d9488090fa40050d920da34e582 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:47:23 +0200
Subject: [PATCH 395/414] Step 23.20: Define binding

---
 imports/ui/components/partyUninvited/partyUninvited.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
index 8910eec..0dcfb74 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.ts
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -1,6 +1,6 @@
 import * as angular from 'angular';
 import * as angularMeteor from 'angular-meteor';
-import { Component } from '@angular/core';
+import { Component, Input } from '@angular/core';
 import { MeteorComponent } from 'angular2-meteor';
 
 import { Meteor } from 'meteor/meteor';
@@ -12,6 +12,8 @@ import template from './partyUninvited.html';
   selector: 'party-uninvited'
 })
 export class PartyUninvited extends MeteorComponent {
+  @Input() party: any;
+
   constructor() {
     super();
 
-- 
2.7.4


From cd6de4feeddc510d6662138a48ca85e5cc007602 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:49:03 +0200
Subject: [PATCH 396/414] Step 23.21: Remove prefix in template

---
 imports/ui/components/partyUninvited/partyUninvited.html | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index 84b3eaf..0d7f5b3 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -3,10 +3,10 @@
 </h4>
 
 <md-list>
-  <md-list-item ng-repeat="user in partyUninvited.users | uninvitedFilter:partyUninvited.party" ng-click="partyUninvited.invite(user)">
+  <md-list-item ng-repeat="user in users | uninvitedFilter:party" ng-click="invite(user)">
     <p>{{ user | displayNameFilter }}</p>
   </md-list-item>
-  <md-list-item ng-if="(partyUninvited.users | uninvitedFilter:partyUninvited.party).length <= 0">
+  <md-list-item ng-if="(users | uninvitedFilter:party).length <= 0">
     Everyone are already invited.
   </md-list-item>
 </md-list>
-- 
2.7.4


From ed1f764096f2f61ffb60d00f2443b75e40fe02d0 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:50:26 +0200
Subject: [PATCH 397/414] Step 23.22: Switch to pipes

---
 imports/ui/components/partyUninvited/partyUninvited.html | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index 0d7f5b3..4297572 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -3,10 +3,10 @@
 </h4>
 
 <md-list>
-  <md-list-item ng-repeat="user in users | uninvitedFilter:party" ng-click="invite(user)">
-    <p>{{ user | displayNameFilter }}</p>
+  <md-list-item ng-repeat="user in users | uninvited:party" ng-click="invite(user)">
+    <p>{{ user | displayName }}</p>
   </md-list-item>
-  <md-list-item ng-if="(users | uninvitedFilter:party).length <= 0">
+  <md-list-item ng-if="(users | uninvited:party).length <= 0">
     Everyone are already invited.
   </md-list-item>
 </md-list>
-- 
2.7.4


From df7eccf11d651840fec2311c0e4690f8a904b559 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:50:47 +0200
Subject: [PATCH 398/414] Step 23.23: Switch to ngFor

---
 imports/ui/components/partyUninvited/partyUninvited.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index 4297572..50de7a3 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -3,7 +3,7 @@
 </h4>
 
 <md-list>
-  <md-list-item ng-repeat="user in users | uninvited:party" ng-click="invite(user)">
+  <md-list-item *ngFor="let user of users | uninvited:party" ng-click="invite(user)">
     <p>{{ user | displayName }}</p>
   </md-list-item>
   <md-list-item ng-if="(users | uninvited:party).length <= 0">
-- 
2.7.4


From 4a9426b19cbe2f769eac69a2f78f46d5413cb6cd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:51:10 +0200
Subject: [PATCH 399/414] Step 23.24: Switch to ngIf

---
 imports/ui/components/partyUninvited/partyUninvited.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index 50de7a3..ee66c5c 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -6,7 +6,7 @@
   <md-list-item *ngFor="let user of users | uninvited:party" ng-click="invite(user)">
     <p>{{ user | displayName }}</p>
   </md-list-item>
-  <md-list-item ng-if="(users | uninvited:party).length <= 0">
+  <md-list-item *ngIf="(users | uninvited:party).length <= 0">
     Everyone are already invited.
   </md-list-item>
 </md-list>
-- 
2.7.4


From 02259a84cda2ad01f3f6153eebae9e146b80cb0d Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 18:51:26 +0200
Subject: [PATCH 400/414] Step 23.25: Switch to (click)

---
 imports/ui/components/partyUninvited/partyUninvited.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyUninvited/partyUninvited.html b/imports/ui/components/partyUninvited/partyUninvited.html
index ee66c5c..86907aa 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.html
+++ b/imports/ui/components/partyUninvited/partyUninvited.html
@@ -3,7 +3,7 @@
 </h4>
 
 <md-list>
-  <md-list-item *ngFor="let user of users | uninvited:party" ng-click="invite(user)">
+  <md-list-item *ngFor="let user of users | uninvited:party" (click)="invite(user)">
     <p>{{ user | displayName }}</p>
   </md-list-item>
   <md-list-item *ngIf="(users | uninvited:party).length <= 0">
-- 
2.7.4


From a81748fecada2a8813e3319c3f1f1e9f6fa04bfd Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:04:45 +0200
Subject: [PATCH 401/414] Step 23.26: Use one-way binding

---
 imports/ui/components/partyDetails/partyDetails.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index e913815..a106644 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -24,5 +24,5 @@
     <party-map flex="50" location="partyDetails.party.location"></party-map>
   </div>
 
-  <party-uninvited flex party="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
+  <party-uninvited flex [party]="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
 </div>
-- 
2.7.4


From 8686de9abcada64a99245c78d4a39c10ec14506c Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:26:15 +0200
Subject: [PATCH 402/414] Step 23.27: Implement Component decorator in
 PartyDetails

---
 client/main.ts                                     | 3 ++-
 imports/ui/components/partyDetails/partyDetails.ts | 7 ++++++-
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/client/main.ts b/client/main.ts
index f8437cb..46c9dc7 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -16,7 +16,7 @@ import { registerPartiesSort } from '../imports/ui/components/partiesSort/partie
 import { registerPartyAdd } from '../imports/ui/components/partyAdd/partyAdd';
 import { registerPartyAddButton } from '../imports/ui/components/partyAddButton/partyAddButton';
 import { registerPartyCreator } from '../imports/ui/components/partyCreator/partyCreator';
-import { registerPartyDetails } from '../imports/ui/components/partyDetails/partyDetails';
+import { registerPartyDetails, PartyDetails } from '../imports/ui/components/partyDetails/partyDetails';
 import { registerPartyImage } from '../imports/ui/components/partyImage/partyImage';
 import { registerPartyMap } from '../imports/ui/components/partyMap/partyMap';
 import { registerPartyRemove } from '../imports/ui/components/partyRemove/partyRemove';
@@ -34,6 +34,7 @@ import { UninvitedPipe } from '../imports/ui/filters/uninvitedPipe';
   declarations: [
     DisplayNamePipe,
     UninvitedPipe,
+    PartyDetails,
     PartyUninvited
   ],
   imports: [
diff --git a/imports/ui/components/partyDetails/partyDetails.ts b/imports/ui/components/partyDetails/partyDetails.ts
index 84e1bb2..85ebf40 100644
--- a/imports/ui/components/partyDetails/partyDetails.ts
+++ b/imports/ui/components/partyDetails/partyDetails.ts
@@ -1,6 +1,7 @@
 import * as angular from 'angular';
 import * as angularMeteor from 'angular-meteor';
 import * as uiRouter from 'angular-ui-router';
+import { Component } from '@angular/core';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -9,7 +10,11 @@ import { Parties } from '../../../api/parties';
 import { PartyUninvitedNg1Module } from '../partyUninvited/partyUninvited';
 import { PartyMapNg1Module } from '../partyMap/partyMap';
 
-class PartyDetails {
+@Component({
+  template,
+  selector: 'party-details'
+})
+export class PartyDetails {
   constructor($stateParams, $scope, $reactive) {
     'ngInject';
 
-- 
2.7.4


From b14f8711ee1dc2f730e450babddd5d306967ea10 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:26:55 +0200
Subject: [PATCH 403/414] Step 23.28: upgrade PartyMap to be used inside Ng2
 Component

---
 client/main.ts | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/client/main.ts b/client/main.ts
index 46c9dc7..34a644d 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -46,6 +46,8 @@ class AppNg2Module {}
 
 const adapter = new UpgradeAdapter(AppNg2Module);
 
+adapter.upgradeNg1Component('partyMap');
+
 registerAuth(adapter);
 registerLogin(adapter);
 registerNavigation(adapter);
-- 
2.7.4


From 6bdb1c160f157806c8dd90f9eba7021d36850d94 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:28:14 +0200
Subject: [PATCH 404/414] Step 23.29: Use MeteorComponent

---
 imports/ui/components/partyDetails/partyDetails.ts | 41 +++++++++-------------
 1 file changed, 16 insertions(+), 25 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.ts b/imports/ui/components/partyDetails/partyDetails.ts
index 85ebf40..7e23f06 100644
--- a/imports/ui/components/partyDetails/partyDetails.ts
+++ b/imports/ui/components/partyDetails/partyDetails.ts
@@ -2,6 +2,7 @@ import * as angular from 'angular';
 import * as angularMeteor from 'angular-meteor';
 import * as uiRouter from 'angular-ui-router';
 import { Component } from '@angular/core';
+import { MeteorComponent } from 'angular2-meteor';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -14,37 +15,27 @@ import { PartyMapNg1Module } from '../partyMap/partyMap';
   template,
   selector: 'party-details'
 })
-export class PartyDetails {
-  constructor($stateParams, $scope, $reactive) {
-    'ngInject';
+export class PartyDetails extends MeteorComponent {
+  partyId: string;
+  party: Object = {};
+  users: Object[];
+  isLoggedIn: boolean;
 
-    $reactive(this).attach($scope);
-
-    this.partyId = $stateParams.partyId;
+  constructor() {
+    super();
 
     this.subscribe('parties');
     this.subscribe('users');
 
-    this.helpers({
-      party() {
-        return Parties.findOne({
-          _id: $stateParams.partyId
-        });
-      },
-      users() {
-        return Meteor.users.find({});
-      },
-      isLoggedIn() {
-        return !!Meteor.userId();
-      },
-      isOwner() {
-        if (!this.party) {
-          return false;
-        }
+    this.autorun(() => {
+      this.party = Parties.findOne({
+        _id: this.partyId
+      });
 
-        return this.party.owner === Meteor.userId();
-      }
-    });
+      this.users = Meteor.users.find({}).fetch();
+
+      this.isOwner = this.party && this.party.owner === Meteor.userId();
+    }, true);
   }
 
   canInvite() {
-- 
2.7.4


From 3e8dfa10817c462aaf8e2f6867c99028c0cfca46 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:29:10 +0200
Subject: [PATCH 405/414] Step 23.30: Downgrade PartyDetails to ng1 directive

---
 imports/ui/components/partyDetails/partyDetails.ts | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.ts b/imports/ui/components/partyDetails/partyDetails.ts
index 7e23f06..3c86c00 100644
--- a/imports/ui/components/partyDetails/partyDetails.ts
+++ b/imports/ui/components/partyDetails/partyDetails.ts
@@ -76,13 +76,9 @@ export const PartyDetailsNg1Module = angular.module(name, [
   PartyMapNg1Module.name
 ]);
 
-export function registerPartyDetails() {
+export function registerPartyDetails(adapter) {
   PartyDetailsNg1Module
-    .component(name, {
-      template,
-      controllerAs: name,
-      controller: PartyDetails
-    })
+    .directive(name, adapter.downgradeNg2Component(PartyDetails))
     .config(config);
 }
 
-- 
2.7.4


From c877284f183ef061c1097542fb3eb68afe5468ac Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:30:13 +0200
Subject: [PATCH 406/414] Step 23.31: Implement ng2 component inside ui-router
 template

---
 imports/ui/components/partyDetails/partyDetails.ts | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.ts b/imports/ui/components/partyDetails/partyDetails.ts
index 3c86c00..97b1a09 100644
--- a/imports/ui/components/partyDetails/partyDetails.ts
+++ b/imports/ui/components/partyDetails/partyDetails.ts
@@ -87,7 +87,12 @@ function config($stateProvider) {
 
   $stateProvider.state('partyDetails', {
     url: '/parties/:partyId',
-    template: '<party-details></party-details>',
+    template: '<party-details [party-id]="partyDetailsRoute.partyId"></party-details>',
+    controllerAs: 'partyDetailsRoute',
+    controller: function($stateParams, $scope) {
+      'ngInject';
+      this.partyId = $stateParams.partyId;
+    },
     resolve: {
       currentUser($q) {
         if (Meteor.userId() === null) {
-- 
2.7.4


From 1bc9d3b703fdc0081974743b33a5f2e6a8d00f92 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:31:08 +0200
Subject: [PATCH 407/414] Step 23.32: Define bindings

---
 imports/ui/components/partyDetails/partyDetails.ts | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.ts b/imports/ui/components/partyDetails/partyDetails.ts
index 97b1a09..8244554 100644
--- a/imports/ui/components/partyDetails/partyDetails.ts
+++ b/imports/ui/components/partyDetails/partyDetails.ts
@@ -1,7 +1,7 @@
 import * as angular from 'angular';
 import * as angularMeteor from 'angular-meteor';
 import * as uiRouter from 'angular-ui-router';
-import { Component } from '@angular/core';
+import { Component, Input, Output } from '@angular/core';
 import { MeteorComponent } from 'angular2-meteor';
 
 import { Meteor } from 'meteor/meteor';
@@ -16,8 +16,8 @@ import { PartyMapNg1Module } from '../partyMap/partyMap';
   selector: 'party-details'
 })
 export class PartyDetails extends MeteorComponent {
-  partyId: string;
-  party: Object = {};
+  @Input() partyId: string;
+  @Output() party: Object = {};
   users: Object[];
   isLoggedIn: boolean;
 
-- 
2.7.4


From 847d791245ee5f0114cdd0443d077fa375b56e34 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:51:38 +0200
Subject: [PATCH 408/414] Step 23.33: Remove ng1 from PartyUninvited

---
 client/main.ts                                         |  3 +--
 imports/ui/components/partyDetails/partyDetails.ts     |  2 --
 imports/ui/components/partyUninvited/partyUninvited.ts | 14 --------------
 3 files changed, 1 insertion(+), 18 deletions(-)

diff --git a/client/main.ts b/client/main.ts
index 34a644d..662240f 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -22,7 +22,7 @@ import { registerPartyMap } from '../imports/ui/components/partyMap/partyMap';
 import { registerPartyRemove } from '../imports/ui/components/partyRemove/partyRemove';
 import { registerPartyRsvp } from '../imports/ui/components/partyRsvp/partyRsvp';
 import { registerPartyRsvpsList } from '../imports/ui/components/partyRsvpsList/partyRsvpsList';
-import { registerPartyUninvited, PartyUninvited } from '../imports/ui/components/partyUninvited/partyUninvited';
+import { PartyUninvited } from '../imports/ui/components/partyUninvited/partyUninvited';
 import { registerPartyUpload } from '../imports/ui/components/partyUpload/partyUpload';
 import { registerPassword } from '../imports/ui/components/password/password';
 import { registerRegister } from '../imports/ui/components/register/register';
@@ -63,7 +63,6 @@ registerPartyMap(adapter);
 registerPartyRemove(adapter);
 registerPartyRsvp(adapter);
 registerPartyRsvpsList(adapter);
-registerPartyUninvited(adapter);
 registerPartyUpload(adapter);
 registerPassword(adapter);
 registerRegister(adapter);
diff --git a/imports/ui/components/partyDetails/partyDetails.ts b/imports/ui/components/partyDetails/partyDetails.ts
index 8244554..5f91845 100644
--- a/imports/ui/components/partyDetails/partyDetails.ts
+++ b/imports/ui/components/partyDetails/partyDetails.ts
@@ -8,7 +8,6 @@ import { Meteor } from 'meteor/meteor';
 
 import template from './partyDetails.html';
 import { Parties } from '../../../api/parties';
-import { PartyUninvitedNg1Module } from '../partyUninvited/partyUninvited';
 import { PartyMapNg1Module } from '../partyMap/partyMap';
 
 @Component({
@@ -72,7 +71,6 @@ const name = 'partyDetails';
 export const PartyDetailsNg1Module = angular.module(name, [
   angularMeteor,
   uiRouter,
-  PartyUninvitedNg1Module.name,
   PartyMapNg1Module.name
 ]);
 
diff --git a/imports/ui/components/partyUninvited/partyUninvited.ts b/imports/ui/components/partyUninvited/partyUninvited.ts
index 0dcfb74..ac77e00 100644
--- a/imports/ui/components/partyUninvited/partyUninvited.ts
+++ b/imports/ui/components/partyUninvited/partyUninvited.ts
@@ -1,5 +1,3 @@
-import * as angular from 'angular';
-import * as angularMeteor from 'angular-meteor';
 import { Component, Input } from '@angular/core';
 import { MeteorComponent } from 'angular2-meteor';
 
@@ -34,15 +32,3 @@ export class PartyUninvited extends MeteorComponent {
     );
   }
 }
-
-const name = 'partyUninvited';
-
-// create a module
-export const PartyUninvitedNg1Module = angular.module(name, [
-  angularMeteor
-]);
-
-export function registerPartyUninvited(adapter) {
-  PartyUninvitedNg1Module
-    .directive(name, adapter.downgradeNg2Component(PartyUninvited))
-}
-- 
2.7.4


From 1fb36c32076922c5418e483466858b81aef9b224 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:53:13 +0200
Subject: [PATCH 409/414] Step 23.34: Install material2

---
 package.json | 1 +
 1 file changed, 1 insertion(+)

diff --git a/package.json b/package.json
index 517e44b..5a06e5b 100644
--- a/package.json
+++ b/package.json
@@ -10,6 +10,7 @@
     "@angular/compiler": "^2.1.0",
     "@angular/core": "^2.1.0",
     "@angular/forms": "^2.1.0",
+    "@angular/material": "^2.0.0-alpha.9-3",
     "@angular/platform-browser": "^2.1.0",
     "@angular/platform-browser-dynamic": "^2.1.0",
     "@angular/upgrade": "^2.1.0",
-- 
2.7.4


From 42883f4d31fea34a50858e3c70978a885aa36362 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 19:55:35 +0200
Subject: [PATCH 410/414] Step 23.35: Import material2 directives

---
 client/main.ts | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/client/main.ts b/client/main.ts
index 662240f..b30ebfc 100644
--- a/client/main.ts
+++ b/client/main.ts
@@ -4,6 +4,7 @@ import { NgModule } from '@angular/core';
 import { BrowserModule } from '@angular/platform-browser';
 import { FormsModule } from '@angular/forms';
 import { UpgradeAdapter } from '@angular/upgrade';
+import { MaterialModule } from '@angular/material';
 
 import { Meteor } from 'meteor/meteor';
 
@@ -39,7 +40,8 @@ import { UninvitedPipe } from '../imports/ui/filters/uninvitedPipe';
   ],
   imports: [
     BrowserModule,
-    FormsModule
+    FormsModule,
+    MaterialModule
   ]
 })
 class AppNg2Module {}
-- 
2.7.4


From 238abdbe69eceaea10750a5295eb03a5d740f5ae Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Thu, 19 May 2016 20:10:28 +0200
Subject: [PATCH 411/414] Step 23.36: Implement material2

---
 imports/ui/components/partyDetails/partyDetails.html | 20 +++++++-------------
 1 file changed, 7 insertions(+), 13 deletions(-)

diff --git a/imports/ui/components/partyDetails/partyDetails.html b/imports/ui/components/partyDetails/partyDetails.html
index a106644..6d99f70 100644
--- a/imports/ui/components/partyDetails/partyDetails.html
+++ b/imports/ui/components/partyDetails/partyDetails.html
@@ -1,28 +1,22 @@
-<div layout="column" layout-padding>
+<div *ngIf="party" layout="column" layout-padding>
   <div layout="column" layout-gt-sm="row"  layout-padding>
     <form flex="50" layout="column">
-      <md-input-container>
-        <label>Party name</label>
-        <input ng-model="partyDetails.party.name" ng-disabled="!partyDetails.isOwner">
-      </md-input-container>
+      <md-input [(ngModel)]="party.name" [disabled]="!isOwner" placeholder="Party name"></md-input>
 
-      <md-input-container>
-        <label>Description</label>
-        <input ng-model="partyDetails.party.description" ng-disabled="!partyDetails.isOwner">
-      </md-input-container>
+      <md-input [(ngModel)]="party.description" [disabled]="!isOwner" placeholder="Description"></md-input>
 
       <div>
-        <md-checkbox ng-model="partyDetails.party.public" ng-disabled="!partyDetails.isOwner" aria-label="Public Party?">
+        <md-checkbox [checked]="party.public">
           Public Party?
         </md-checkbox>
       </div>
 
       <div>
-        <md-button ng-click="partyDetails.save()" class="md-primary md-raised">Save</md-button>
+        <md-button md-raised-button color="primary" (click)="save()">Save</md-button>
       </div>
     </form>
-    <party-map flex="50" location="partyDetails.party.location"></party-map>
+    <party-map flex="50" [location]="party.location"></party-map>
   </div>
 
-  <party-uninvited flex [party]="partyDetails.party" ng-show="partyDetails.canInvite()"></party-uninvited>
+  <party-uninvited flex [party]="party" *ngIf="canInvite()"></party-uninvited>
 </div>
-- 
2.7.4


From ee44b57d05bbc8b757645967149de988154ba84f Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 10:27:29 +0200
Subject: [PATCH 412/414] Add README

---
 README.md | 75 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 75 insertions(+)
 create mode 100644 README.md

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..6ee9ff1
--- /dev/null
+++ b/README.md
@@ -0,0 +1,75 @@
+# meteor-angular-socially - [Tutorial's site](http://angular-meteor.com/tutorialIntro)
+angular-meteor example and tutorial app.
+
+The tutorial starts at branch 'step_00' till the last step.
+
+The master branch is always equal to the last step.
+
+Here is the deployed final version - http://socially-step22.meteor.com/
+
+Please contribute to the tutorial.
+Pull request the master branch to add new features or pull request specific step to improve that step.
+
+Our goal in this tutorial is to add more steps as we go along, to cover as many use cases as possible.
+
+Thanks @MilosStanic for writing step 18 on angular-material
+
+An example with the `controller as` syntax can be found in [this branch](https://github.com/Urigo/meteor-angular-socially/tree/step_12_controller_as_vm).
+
+# angular-meteor University! <a href="http://angularjs.meteor.com/"><img src="http://angular-meteor.com/images/logo.png" /></a>  
+
+The angular-meteor university is a community learning experiment, we would like to create a similar experience to the [hueniversity](https://github.com/hueniverse/hueniversity)
+
+
+[![Join the chat at https://gitter.im/Urigo/angular-meteor](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/Urigo/angular-meteor?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+
+The first assignments will be to rewrite the tutorial steps, and follow the latest angular-meteor API , in a more [consistent style](https://github.com/johnpapa/angular-styleguide).
+We also hope the community will propose better solutions than the current ones.
+When we will catch up with the latest steps we will create new steps.
+
+### What am I going to learn?
+You will learn how to build a full stack application using meteor and angular. It will start with the basics and move on to the more advanced topic such as users and authentication, application architecture, reactivity, mobile app, ionic, working with files, Angular Server, ES6 and more.
+
+
+### What do I need to know?
+You should feel comfortable writing simple functions in JavaScript, working with GitHub, using basic git commands, have a basic familiarity with mongoDB, and be able to pick up new subjects by reading tutorials and documentation.
+
+### How advanced is this course?
+We'll start from the basics and make our way to the most advanced topics. The way this course is structured, you can choose which assignments to participate in, so more experienced developers can "sit out" or help others during the basic assignments and participate when it gets to areas they are not as strong in. However, since teaching is one of the most effective ways to learn, we believe that participating early will improve the existing skills of advanced developers.
+The assignment will include just enough information to get you going, but you will need to do most of the learning on your own by using the wide range of online resources available. However, the real benefit of this process will come from the code review of your Pull Request. This is where expert developers will review your work and provide you specific and actionable feedback.
+
+### How does it work?
+First, read the [Code of Conduct](https://github.com/Urigo/meteor-angular-socially/blob/master/COC.md) !
+
+Simple, you start by forking this repo.
+Every few days a new issue will be posted with an [`assignment` label](https://github.com/Urigo/meteor-angular-socially/labels/assignment)
+. If you would like to participate in the assignment, try to solve it and when you are done, submit a Pull Request back to this repo to the `step_NUMBER_u` branch. Make sure your code complies with the [John Papa Angular Style Guide](https://github.com/johnpapa/angular-styleguide).
+While you wait for the assignment to close, take a look at what others are submitting and see if you can improve your own solution (borrow ideas, add tests, write examples, update the documentation). If you see ways in which others can improve their solution, please don’t hesitate to comment on their Pull Request.
+Each assignment will have a final submission date. When the issue expires, one of the Pull Requests submitted will be picked and merged and published as the new tutorial step. Any follow up assignments will be based on the merged code.
+Before starting the next assignment, make sure [your fork matches the current](https://github.com/Urigo/meteor-angular-socially/blob/master/guides/git.md ) assignment step branch (`step_NUMBER_u`) since only one Pull Request can be accepted.
+
+### How can I help?
+There are lots of way you can help make this experiment succeed and help shape a new format for teaching development skills:
+Submit Pull Requests to improve this readme, add examples, write quick tutorials on how to work with git, etc.
+Add new steps to angular-meteor-socially tutorial.
+Look for issues with a [help wanted label](https://github.com/Urigo/meteor-angular-socially/labels/help%20wanted) and help with those.
+Randomly pick submitted Pull Request and review them, offering advice and helping others improve their skills.
+Submit Pull Request or open issues with proposals for [angular-meteor](https://github.com/Urigo/angular-meteor)
+
+### How do I Start?
+First you'll have to install all dependent `npm` packages:
+
+    $ meteor npm install
+
+Install declaration files:
+
+    $ typings install
+
+And to start the application, simply type:
+
+    $ meteor run
+
+You can also provide an optional `--port` option if you would like to run the app on a port different than 3000. Note whenever the app is being built you will receive some TypeScript compilations warnings. This is normal and caused due to Socially not being fully migrated to Angular2. Further information can be found in [step 23](https://www.angular-meteor.com/tutorials/socially/angular1/migration-to-angular2);
+
+### Anything else?
+[Open an issue](https://github.com/Urigo/meteor-angular-socially/issues/new), it's free.
-- 
2.7.4


From 4a7a54e29abaf983990db2b0b49b96b337728832 Mon Sep 17 00:00:00 2001
From: Kamil Kisiela <kamil.kisiela@ster-project.pl>
Date: Mon, 11 Apr 2016 10:28:34 +0200
Subject: [PATCH 413/414] Add EDIT_THIS_TUTORIAL.md

---
 EDIT_THIS_TUTORIAL.md | 192 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 192 insertions(+)
 create mode 100644 EDIT_THIS_TUTORIAL.md

diff --git a/EDIT_THIS_TUTORIAL.md b/EDIT_THIS_TUTORIAL.md
new file mode 100644
index 0000000..b0f831a
--- /dev/null
+++ b/EDIT_THIS_TUTORIAL.md
@@ -0,0 +1,192 @@
+## How to edit this tutorial?
+
+First, you need to understand how this tutorial works and the importance of the commits.
+This tutorial is based on [Meteor's tutorial tools](http://meteor-tutorial-tools.readthedocs.org/en/latest/) and use it's tools to create a simple diff-boxes for code changes accross the commit.
+
+So the very first thing you need to know it that this specific tutorial is used in [Angular1 Meteor tutorials](http://www.angular-meteor.com/tutorials/socially/angular1/bootstrapping) and every diff box you see there is generated automatically from the commits in this repository.
+
+So what is the flow?
+- Create commits with specific format - the format in use in this repository and in Meteor tutorial tools is:
+
+  ````Step XX.XX: TEXT_TEXT_TEXT````
+
+  (where XX.XX are numbers that relates to the step in the tutorial you write, and TEXT_TEXT_TEXT is the title of the generated diffbox you will get).
+
+- Generate PATCH file, as described [here](http://meteor-tutorial-tools.readthedocs.org/en/latest/new-tutorial/), it's just running a simple `git` command that generates a file from all of you commits in the repository.
+
+- Create a Meteor tutorial app and define the tutorial objects - also described [here](http://meteor-tutorial-tools.readthedocs.org/en/latest/new-tutorial/).
+
+- Write your tutorial and use the `diffBox` helper to generate the actual HTML of the DiffBox.
+
+**Note that commit without the speical format are also legal, but won't be available for creating diff-box!**
+
+## How to add new steps to the tutorial?
+
+Adding new steps to your tutorial is easy, just get the latest version of the repository, and do your changes and commit them.
+It is recomended to make only ONE CHANGE in ONE FILE in ONE COMMIT, which means that after you make a simple change in only one file, commit that single file with a commit message with the right format, for example:
+
+` Step 10.12: This is new!`
+
+I recomend to perform multiple commit to your local repository, and just after you sure that they are fine, to `git push` them to the remote repository, because it is much easier to make change in the local repository.
+
+## How to undo my lastest commit?
+
+So you done a commit and you are not so sure about the change you made, or the order of it? you can just undo your lastest commit with the following command:
+
+` git reset HEAD~1`
+
+Note that the files you changes goes back to be uncommited change, and if it's a new file it will be removed from git and new you need to `git add` it again.
+
+## How to edit existing commits?
+
+So this is there it becomes interesting - we want to keep the order of the commits as it should be in the tutorial.
+
+Let's understand it with this order of commits:
+
+````
+Step 1.4: Create a new service
+Step 1.3: Create a new view
+Step 1.2: Create a new component
+Step 1.1: Add the application dependencies
+Step 1.0: Create new application
+````
+
+So now we created our tutorial, and we noticed that we have a bug in `Step 1.2` - our instinct is to go to the latest commit (most updated state of the repository) and add a new commit, and this will be the result:
+
+````
+Fix for step 1.2
+Step 1.4: Create a new service
+Step 1.3: Create a new view
+Step 1.2: Create a new component
+Step 1.1: Add the application dependencies
+Step 1.0: Create new application
+````
+
+So now we have a commit on top of the rest of the commit and if we get the lastest repository commit - everything will work great and we will have the bug fixed we just applied.
+
+This is good for regular applications or projects - but in case of a tutorial it isn't good at all - if we generate the diff box for the commit with `Step 1.2` we will see the code with the bug!
+
+So as you might already understand - we need to edit the actual `Step 1.2` commit, without adding new commits!
+
+In order to edit existing commits, we need to get the actual commit with the bug, edit it, keep the same commit message and the same commit id and then generate a new PATCH file.
+
+This might sound complicated but it isn't, it just requires from you to know how to use some `git` commands and basic `vi` commands. I also recommend to use [SourceTree](https://www.sourcetreeapp.com/) - it's great Git GUI tool, but it is not enough and note that you **must** know how to use the command line git.
+
+
+So let's edit the commit:
+
+- Go the the project's repository after you clone it, make sure you all up-to-date (`git pull`) and make sure that you do not have any commits that you did not pushed, or any other uncomitted changes! (**This is VERY important**)
+- Find the commit id you want to edit, you can simply do it in SourceTree. For example, here:
+![1](http://s10.postimg.org/qs4f1d2nd/image.png)
+
+- So in our case, we want to edit commit id `d002ba8`, so we need to go back in time and to set our local repository to that commit. This done by running the following command:
+
+````
+  git rebase -i d002ba8~1
+````
+
+- Now you will get the Interactive Rebase screen of git - you will see your commit in the first line:
+
+![2](http://s8.postimg.org/sz0avbymt/Screen_Shot_2016_02_08_at_16_42_51.png)
+
+
+- Notice the `pick` near you commit? great! we want to edit that commit, so use your `vi` skills and change the word `pick` to `edit`, than exit and save your changes in `vi` (ESC, `:`, and then `wq!`).
+
+- Great, now you in edit mode, and the repository is set to the commit you want to edit! ** so now make your changes to the file / files **
+
+- Done with that file? Great. to keep the original commit and apply the changes to it, run:
+
+`  git commit --all --no-edit --amend`
+
+That command will commit **all** the files you changed, without **edit the commit message**, and it will **amend** you changes into the original commit.
+
+- So now you are done with the changes and updating the commit, you will need to add the next commits on top of the new commit you edited. so you need to continue with the rebase process, do it by running:
+
+`  git rebase --continue`
+
+And if you noticed in any step on the change the you made a mistake, you can always abort the rebase by running:
+
+`  git rebase --abort`
+
+- In some cases, this is the last step, but in most of the times, you notice that after you continue the rebase operation, git stops and tells you that you have to merge because of conflicts. This makes sense - you changed a file in some point of the repository, but the commits that comes next, also changes it and it depends on the previous version of the file.
+
+- So in order to merge your conflict, I recommend to open your working directory in WebStorm, right click on the root of your project, and select "Git > Resolve Conflicts":
+![3](http://s12.postimg.org/4yxlr4llp/Screen_Shot_2016_02_08_at_16_58_04.png)
+
+- In the next screen, resolve you conflicts and ** DO NOT MAKE ANY GIT ACTION FROM WEBSTORM**
+
+- Now go back to the command line, and run: `git rebase --continue`, and you will get a screen that tells you to modify your commit message, you can just ignore it and save it as-is (ESC, `:` and then `wq!`).
+
+- If it's compilicated file that changes a lot of time, you might have multiple merges that needed to be done!
+- And you are done now! you just need to update your remote repository with the changes, but in order to do it, you need to `git push` with the `--force` flag, because now that you changed the history of you commits, the repositories no longer match! So run `git push --force origin YOUR_BRANCH` (replace YOUR_BRANCH with the branch you want to push to, **be carful! if you do not specify it, you will push it to the master and you might override the whole repo!**
+
+## How to only edit the commit message?
+
+So if you know how to edit commint (read the previous explaination), changing a commit message is much easier.
+
+You just need to perform the same `git rebase` as in the previous question, and instead of using `edit`, use `reword` (or just `r`), note that you can do it to multiple commits in the same time.
+
+Then you will see the commit message in the git shell screen, just change it and then exit and save from the vi.
+
+Then just continue the rebase (`git rebase --continue`) and push it.
+
+## How to remove entire commit?
+
+You just need to perform the same `git rebase` as in the previous question, and in the `vi` screen you get, just removed the entire line of the commit you want to remove (vi shortcut: `dd`), and then continue the rebase.
+
+## How to split commit into two or more commits?
+
+Splitting commits is a tricky one - there are some ways to to it, but I recommend to undo the commit if you still can (if it's the last one) and do it again in splitted commits.
+
+But if you can't undo it, you can still solve this issue:
+
+- Do `git rebase` to your commit minus two commits, that means for example: `git rebase d0021ab~2` (note the 2 instead of 1 in the end of the line), now the commit you want to split will be second in the commits list.
+- Remove the commit you want to split by removing it's line (vi shortcut: `dd`).
+- Go to the first commit in the list now (which is the commit that comes before the one you want to split), and set it to `edit` mode.
+- Now make you changes in a different commits, instead of one, perform them manually, and to commit each single change, use: `git commit --all` (Note that we did not use `amend` flag so we do not change the commit we set to edit mode!), and in that screen that opens, set the commit message. do that for each one of the commits.
+- Now just continue your rebase with `git rebase --continue` and finish it like any other change you made in the git history.
+
+## How to handle Meteor packages and versions?
+
+Actually, changing versions and packages in Meteor app should be the same, but there is a file that Meteor manages by it self, called `.meteor/versions` - this file contains the versions of all the packages you use in your app.
+
+So if you `git rebase` to specific commit and modify the packages or update a package version, make sure to run your app as you used to (for example: `meteor`) and wait until Meteor done with the build - in this point, a new `.meteor/versions` file will be generated, so make sure that you commit and update it aswell.
+
+But now you will notice that in every step that you done some change with the packages, you have a conflict and you have to merge - this merge will be very hard to perform because of two generated files with a lot of lines and versions of packages - you do not have to deal with it that way!
+
+First, mark the `.meteor/versions` file as resolved conflict (does matter it's content right now) , and then set the content of the file to empty content.
+
+Now run your app and wait for it to finish the build, and you will notice that Meteor generated the correct and updates `versions` file! Just commit that file now and continue the rebase!
+
+
+## How to create a new tutorial app?
+
+Creating a new tutorial described [here](http://meteor-tutorial-tools.readthedocs.org/en/latest/new-tutorial/).
+
+## Another goods
+
+#### Step tag and step diff
+
+So after creating a few steps in your tutorial, you can create a link that shown that entire diff between two steps (not sub-steps!), the actual does not related to the tutorial tools but very useful if you want to provide your users the ability to see the whole changes for each step of the tutorial.
+
+So in order to do that, make sure you create a Git Tag for each steps you finish (In the last commit of the step), you can do it with SourceTree or in GitHub, it does not matter.
+
+So after adding more that one step and one tag, you can add to your tutotial link to page that shows the entire diff, for example:
+
+https://github.com/Urigo/meteor-angular-socially/compare/step_01...step_02
+
+This link shows the entire diff between the tag `step_01` and `step_02`.
+
+Note that after each change you made in the commits that required a force `push`, you need to create the tags again!
+
+#### Download link for a step
+
+Another good you get is the ability to get a link to download the entire tutorial example, so users can jump to step and start it from there with the updated code!
+
+To do that, just add a link in your tutorial, like this:
+
+https://github.com/Urigo/meteor-angular-socially/archive/step_21.zip
+
+You need ofcourse to change the repository url, and replace `step_21` with the name of the tag you created (explained in the previous section).
+
+Thanks it! now you can just download the entire project in each step!
-- 
2.7.4


From 8abca4f4c757e8c887794d4d1af76b7974dad07c Mon Sep 17 00:00:00 2001
From: DAB0mB <emanor6@gmail.com>
Date: Wed, 19 Oct 2016 13:15:21 -0200
Subject: [PATCH 414/414] Add LICENSE

---
 LICENSE | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)
 create mode 100644 LICENSE

diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..d1bdb1d
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,22 @@
+
+The MIT License (MIT)
+
+Copyright (c) 2016 Uri Goldshtein
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
-- 
2.7.4

